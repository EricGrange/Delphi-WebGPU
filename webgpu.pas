unit webgpu;
{ This unit is automatically generated by Chet:
  https://github.com/neslib/Chet }

{$MINENUMSIZE 4}

interface

const
  {$IF Defined(WIN64)}
  WEBGPU_LIB = 'webgpu_dawn.dll';
  _PU = '';
  {$ELSE}
    {$MESSAGE Error 'Unsupported platform'}
  {$ENDIF}

const
  { TODO : Macro probably uses invalid symbol "void": }
  (* NULL ( ( void * ) 0 ) *)
  { TODO : Unable to convert function-like macro: }
  (* offsetof ( TYPE , MEMBER ) ( ( size_t ) & ( ( TYPE * ) 0 ) -> MEMBER ) *)
  INT8_MIN = (-128);
  INT16_MIN = (-32768);
  INT32_MIN = (-2147483647-1);
  INT64_MIN = (-9223372036854775807-1);
  INT8_MAX = 127;
  INT16_MAX = 32767;
  INT32_MAX = 2147483647;
  INT64_MAX = 9223372036854775807;
  UINT8_MAX = $ff;
  UINT16_MAX = $ffff;
  UINT32_MAX = $ffffffff;
  UINT64_MAX = $ffffffffffffffff;
  INT_LEAST8_MIN = INT8_MIN;
  INT_LEAST16_MIN = INT16_MIN;
  INT_LEAST32_MIN = INT32_MIN;
  INT_LEAST64_MIN = INT64_MIN;
  INT_LEAST8_MAX = INT8_MAX;
  INT_LEAST16_MAX = INT16_MAX;
  INT_LEAST32_MAX = INT32_MAX;
  INT_LEAST64_MAX = INT64_MAX;
  UINT_LEAST8_MAX = UINT8_MAX;
  UINT_LEAST16_MAX = UINT16_MAX;
  UINT_LEAST32_MAX = UINT32_MAX;
  UINT_LEAST64_MAX = UINT64_MAX;
  INT_FAST8_MIN = INT8_MIN;
  INT_FAST16_MIN = INT16_MIN;
  INT_FAST32_MIN = INT32_MIN;
  INT_FAST64_MIN = INT64_MIN;
  INT_FAST8_MAX = INT8_MAX;
  INT_FAST16_MAX = INT16_MAX;
  INT_FAST32_MAX = INT32_MAX;
  INT_FAST64_MAX = INT64_MAX;
  UINT_FAST8_MAX = UINT8_MAX;
  UINT_FAST16_MAX = UINT16_MAX;
  UINT_FAST32_MAX = UINT32_MAX;
  UINT_FAST64_MAX = UINT64_MAX;
  INTPTR_MIN = INT32_MIN;
  INTPTR_MAX = INT32_MAX;
  UINTPTR_MAX = UINT32_MAX;
  INTMAX_MIN = INT64_MIN;
  INTMAX_MAX = INT64_MAX;
  UINTMAX_MAX = UINT64_MAX;
  PTRDIFF_MIN = INT32_MIN;
  PTRDIFF_MAX = INT32_MAX;
  SIG_ATOMIC_MIN = INT32_MIN;
  SIG_ATOMIC_MAX = INT32_MAX;
  SIZE_MAX = UINT32_MAX;
  WCHAR_MIN = 0;
  { TODO : Macro probably uses invalid symbol "wchar_t": }
  (* WCHAR_MAX ( ( wchar_t ) - 1 ) *)
  WINT_MIN = 0;
  { TODO : Macro probably uses invalid symbol "wint_t": }
  (* WINT_MAX ( ( wint_t ) - 1 ) *)
  { TODO : Unable to convert function-like macro: }
  (* INT8_C ( val ) ( ( int8_t ) + ( val ) ) *)
  { TODO : Unable to convert function-like macro: }
  (* UINT8_C ( val ) ( ( uint8_t ) + ( val ## U ) ) *)
  { TODO : Unable to convert function-like macro: }
  (* INT16_C ( val ) ( ( int16_t ) + ( val ) ) *)
  { TODO : Unable to convert function-like macro: }
  (* UINT16_C ( val ) ( ( uint16_t ) + ( val ## U ) ) *)
  { TODO : Unable to convert function-like macro: }
  (* INT32_C ( val ) val ## L *)
  { TODO : Unable to convert function-like macro: }
  (* UINT32_C ( val ) val ## UL *)
  { TODO : Unable to convert function-like macro: }
  (* INT64_C ( val ) val ## LL *)
  { TODO : Unable to convert function-like macro: }
  (* UINT64_C ( val ) val ## ULL *)
  { TODO : Unable to convert function-like macro: }
  (* INTMAX_C ( val ) INT64_C ( val ) *)
  { TODO : Unable to convert function-like macro: }
  (* UINTMAX_C ( val ) UINT64_C ( val ) *)
  { TODO : Unable to convert function-like macro: }
  (* WGPU_MAKE_INIT_STRUCT ( type , value ) ( ( type ) value ) *)
  WGPU_ARRAY_LAYER_COUNT_UNDEFINED = UINT32_MAX;
  WGPU_COPY_STRIDE_UNDEFINED = UINT32_MAX;
  WGPU_DEPTH_SLICE_UNDEFINED = UINT32_MAX;
  WGPU_LIMIT_U32_UNDEFINED = UINT32_MAX;
  WGPU_LIMIT_U64_UNDEFINED = UINT64_MAX;
  WGPU_MIP_LEVEL_COUNT_UNDEFINED = UINT32_MAX;
  WGPU_QUERY_SET_INDEX_UNDEFINED = UINT32_MAX;
  WGPU_WHOLE_MAP_SIZE = SIZE_MAX;
  WGPU_WHOLE_SIZE = UINT64_MAX;
  { TODO : Unable to convert macro: }
  (* WGPU_COMMA , *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BUFFER_MAP_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBufferMapCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMPILATION_INFO_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCompilationInfoCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_CREATE_COMPUTE_PIPELINE_ASYNC_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCreateComputePipelineAsyncCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_CREATE_RENDER_PIPELINE_ASYNC_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCreateRenderPipelineAsyncCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DEVICE_LOST_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDeviceLostCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_POP_ERROR_SCOPE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPUPopErrorScopeCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_QUEUE_WORK_DONE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPUQueueWorkDoneCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_REQUEST_ADAPTER_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPURequestAdapterCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_REQUEST_DEVICE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPURequestDeviceCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_UNCAPTURED_ERROR_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT ( WGPUUncapturedErrorCallbackInfo2 , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata1=*/ nullptr WGPU_COMMA /*.userdata2=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_INTERNAL__HAVE_EMDAWNWEBGPU_HEADER_INIT WGPU_MAKE_INIT_STRUCT ( WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER , { \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_ADAPTER_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUAdapterInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.vendor=*/ nullptr WGPU_COMMA /*.architecture=*/ nullptr WGPU_COMMA /*.device=*/ nullptr WGPU_COMMA /*.description=*/ nullptr WGPU_COMMA /*.backendType=*/ { } WGPU_COMMA /*.adapterType=*/ { } WGPU_COMMA /*.vendorID=*/ { } WGPU_COMMA /*.deviceID=*/ { } WGPU_COMMA /*.compatibilityMode=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_ADAPTER_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUAdapterProperties , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.vendorID=*/ { } WGPU_COMMA /*.vendorName=*/ nullptr WGPU_COMMA /*.architecture=*/ nullptr WGPU_COMMA /*.deviceID=*/ { } WGPU_COMMA /*.name=*/ nullptr WGPU_COMMA /*.driverDescription=*/ nullptr WGPU_COMMA /*.adapterType=*/ { } WGPU_COMMA /*.backendType=*/ { } WGPU_COMMA /*.compatibilityMode=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_ADAPTER_PROPERTIES_D3D_INIT WGPU_MAKE_INIT_STRUCT ( WGPUAdapterPropertiesD3D , { /*.chain=*/ { } WGPU_COMMA /*.shaderModel=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_ADAPTER_PROPERTIES_VK_INIT WGPU_MAKE_INIT_STRUCT ( WGPUAdapterPropertiesVk , { /*.chain=*/ { } WGPU_COMMA /*.driverVersion=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BIND_GROUP_ENTRY_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBindGroupEntry , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.binding=*/ { } WGPU_COMMA /*.buffer=*/ nullptr WGPU_COMMA /*.offset=*/ 0 WGPU_COMMA /*.size=*/ WGPU_WHOLE_SIZE WGPU_COMMA /*.sampler=*/ nullptr WGPU_COMMA /*.textureView=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BLEND_COMPONENT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBlendComponent , { /*.operation=*/ WGPUBlendOperation_Add WGPU_COMMA /*.srcFactor=*/ WGPUBlendFactor_One WGPU_COMMA /*.dstFactor=*/ WGPUBlendFactor_Zero WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BUFFER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBufferBindingLayout , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.type=*/ WGPUBufferBindingType_Undefined WGPU_COMMA /*.hasDynamicOffset=*/ false WGPU_COMMA /*.minBindingSize=*/ 0 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBufferDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.usage=*/ { } WGPU_COMMA /*.size=*/ { } WGPU_COMMA /*.mappedAtCreation=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BUFFER_HOST_MAPPED_POINTER_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBufferHostMappedPointer , { /*.chain=*/ { } WGPU_COMMA /*.pointer=*/ { } WGPU_COMMA /*.disposeCallback=*/ { } WGPU_COMMA /*.userdata=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BUFFER_MAP_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBufferMapCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ { } WGPU_COMMA /*.userdata=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COLOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUColor , { /*.r=*/ { } WGPU_COMMA /*.g=*/ { } WGPU_COMMA /*.b=*/ { } WGPU_COMMA /*.a=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COLOR_TARGET_STATE_EXPAND_RESOLVE_TEXTURE_DAWN_INIT WGPU_MAKE_INIT_STRUCT ( WGPUColorTargetStateExpandResolveTextureDawn , { /*.chain=*/ { } WGPU_COMMA /*.enabled=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMMAND_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCommandBufferDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMMAND_ENCODER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCommandEncoderDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMPILATION_INFO_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCompilationInfoCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ { } WGPU_COMMA /*.userdata=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMPILATION_MESSAGE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCompilationMessage , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.message=*/ nullptr WGPU_COMMA /*.type=*/ { } WGPU_COMMA /*.lineNum=*/ { } WGPU_COMMA /*.linePos=*/ { } WGPU_COMMA /*.offset=*/ { } WGPU_COMMA /*.length=*/ { } WGPU_COMMA /*.utf16LinePos=*/ { } WGPU_COMMA /*.utf16Offset=*/ { } WGPU_COMMA /*.utf16Length=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMPUTE_PASS_TIMESTAMP_WRITES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUComputePassTimestampWrites , { /*.querySet=*/ { } WGPU_COMMA /*.beginningOfPassWriteIndex=*/ WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA /*.endOfPassWriteIndex=*/ WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_CONSTANT_ENTRY_INIT WGPU_MAKE_INIT_STRUCT ( WGPUConstantEntry , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.key=*/ { } WGPU_COMMA /*.value=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COPY_TEXTURE_FOR_BROWSER_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCopyTextureForBrowserOptions , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.flipY=*/ false WGPU_COMMA /*.needsColorSpaceConversion=*/ false WGPU_COMMA /*.srcAlphaMode=*/ WGPUAlphaMode_Unpremultiplied WGPU_COMMA /*.srcTransferFunctionParameters=*/ nullptr WGPU_COMMA /*.conversionMatrix=*/ nullptr WGPU_COMMA /*.dstTransferFunctionParameters=*/ nullptr WGPU_COMMA /*.dstAlphaMode=*/ WGPUAlphaMode_Unpremultiplied WGPU_COMMA /*.internalUsage=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_CREATE_COMPUTE_PIPELINE_ASYNC_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCreateComputePipelineAsyncCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ { } WGPU_COMMA /*.userdata=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_CREATE_RENDER_PIPELINE_ASYNC_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCreateRenderPipelineAsyncCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ { } WGPU_COMMA /*.userdata=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_WGSL_BLOCKLIST_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnWGSLBlocklist , { /*.chain=*/ { } WGPU_COMMA /*.blocklistedFeatureCount=*/ 0 WGPU_COMMA /*.blocklistedFeatures=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_ADAPTER_PROPERTIES_POWER_PREFERENCE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnAdapterPropertiesPowerPreference , { /*.chain=*/ { } WGPU_COMMA /*.powerPreference=*/ WGPUPowerPreference_Undefined WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_BUFFER_DESCRIPTOR_ERROR_INFO_FROM_WIRE_CLIENT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnBufferDescriptorErrorInfoFromWireClient , { /*.chain=*/ { } WGPU_COMMA /*.outOfMemory=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_CACHE_DEVICE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnCacheDeviceDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.isolationKey=*/ "" WGPU_COMMA /*.loadDataFunction=*/ nullptr WGPU_COMMA /*.storeDataFunction=*/ nullptr WGPU_COMMA /*.functionUserdata=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_COMPUTE_PIPELINE_FULL_SUBGROUPS_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnComputePipelineFullSubgroups , { /*.chain=*/ { } WGPU_COMMA /*.requiresFullSubgroups=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_ENCODER_INTERNAL_USAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnEncoderInternalUsageDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.useInternalUsages=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_EXPERIMENTAL_SUBGROUP_LIMITS_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnExperimentalSubgroupLimits , { /*.chain=*/ { } WGPU_COMMA /*.minSubgroupSize=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxSubgroupSize=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_RENDER_PASS_COLOR_ATTACHMENT_RENDER_TO_SINGLE_SAMPLED_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnRenderPassColorAttachmentRenderToSingleSampled , { /*.chain=*/ { } WGPU_COMMA /*.implicitSampleCount=*/ 1 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_SHADER_MODULE_SPIRV_OPTIONS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnShaderModuleSPIRVOptionsDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.allowNonUniformDerivatives=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_TEXTURE_INTERNAL_USAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnTextureInternalUsageDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.internalUsage=*/ WGPUTextureUsage_None WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_TOGGLES_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnTogglesDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.enabledToggleCount=*/ 0 WGPU_COMMA /*.enabledToggles=*/ { } WGPU_COMMA /*.disabledToggleCount=*/ 0 WGPU_COMMA /*.disabledToggles=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DAWN_WIRE_WGSL_CONTROL_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDawnWireWGSLControl , { /*.chain=*/ { } WGPU_COMMA /*.enableExperimental=*/ false WGPU_COMMA /*.enableUnsafe=*/ false WGPU_COMMA /*.enableTesting=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DEVICE_LOST_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDeviceLostCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ WGPUCallbackMode_WaitAnyOnly WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DRM_FORMAT_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDrmFormatProperties , { /*.modifier=*/ { } WGPU_COMMA /*.modifierPlaneCount=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_EXTENT_2D_INIT WGPU_MAKE_INIT_STRUCT ( WGPUExtent2D , { /*.width=*/ { } WGPU_COMMA /*.height=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_EXTENT_3D_INIT WGPU_MAKE_INIT_STRUCT ( WGPUExtent3D , { /*.width=*/ { } WGPU_COMMA /*.height=*/ 1 WGPU_COMMA /*.depthOrArrayLayers=*/ 1 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_EXTERNAL_TEXTURE_BINDING_ENTRY_INIT WGPU_MAKE_INIT_STRUCT ( WGPUExternalTextureBindingEntry , { /*.chain=*/ { } WGPU_COMMA /*.externalTexture=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_EXTERNAL_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUExternalTextureBindingLayout , { /*.chain=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_FORMAT_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUFormatCapabilities , { /*.nextInChain=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_FUTURE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUFuture , { /*.id=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_INSTANCE_FEATURES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUInstanceFeatures , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.timedWaitAnyEnable=*/ false WGPU_COMMA /*.timedWaitAnyMaxCount=*/ 0 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_LIMITS_INIT WGPU_MAKE_INIT_STRUCT ( WGPULimits , { /*.maxTextureDimension1D=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxTextureDimension2D=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxTextureDimension3D=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxTextureArrayLayers=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxBindGroups=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxBindGroupsPlusVertexBuffers=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxBindingsPerBindGroup=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxDynamicUniformBuffersPerPipelineLayout=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxDynamicStorageBuffersPerPipelineLayout=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxSampledTexturesPerShaderStage=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxSamplersPerShaderStage=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxStorageBuffersPerShaderStage=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxStorageTexturesPerShaderStage=*/
  WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxUniformBuffersPerShaderStage=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxUniformBufferBindingSize=*/ WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA /*.maxStorageBufferBindingSize=*/ WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA /*.minUniformBufferOffsetAlignment=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.minStorageBufferOffsetAlignment=*/
   WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxVertexBuffers=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxBufferSize=*/ WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA /*.maxVertexAttributes=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxVertexBufferArrayStride=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxInterStageShaderComponents=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxInterStageShaderVariables=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxColorAttachments=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxColorAttachmentBytesPerSample=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxComputeWorkgroupStorageSize=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxComputeInvocationsPerWorkgroup=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxComputeWorkgroupSizeX=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxComputeWorkgroupSizeY=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxComputeWorkgroupSizeZ=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA /*.maxComputeWorkgroupsPerDimension=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_MEMORY_HEAP_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUMemoryHeapInfo , { /*.properties=*/ { } WGPU_COMMA /*.size=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_MULTISAMPLE_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUMultisampleState , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.count=*/ 1 WGPU_COMMA /*.mask=*/ 0xFFFFFFFF WGPU_COMMA /*.alphaToCoverageEnabled=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_ORIGIN_2D_INIT WGPU_MAKE_INIT_STRUCT ( WGPUOrigin2D , { /*.x=*/ 0 WGPU_COMMA /*.y=*/ 0 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_ORIGIN_3D_INIT WGPU_MAKE_INIT_STRUCT ( WGPUOrigin3D , { /*.x=*/ 0 WGPU_COMMA /*.y=*/ 0 WGPU_COMMA /*.z=*/ 0 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_PIPELINE_LAYOUT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUPipelineLayoutDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.bindGroupLayoutCount=*/ { } WGPU_COMMA /*.bindGroupLayouts=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_PIPELINE_LAYOUT_STORAGE_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUPipelineLayoutStorageAttachment , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.offset=*/ 0 WGPU_COMMA /*.format=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_POP_ERROR_SCOPE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUPopErrorScopeCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ WGPUCallbackMode_WaitAnyOnly WGPU_COMMA /*.callback=*/ { } WGPU_COMMA /*.oldCallback=*/ { } WGPU_COMMA /*.userdata=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_PRIMITIVE_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUPrimitiveState , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.topology=*/ WGPUPrimitiveTopology_TriangleList WGPU_COMMA /*.stripIndexFormat=*/ WGPUIndexFormat_Undefined WGPU_COMMA /*.frontFace=*/ WGPUFrontFace_CCW WGPU_COMMA /*.cullMode=*/ WGPUCullMode_None WGPU_COMMA /*.unclippedDepth=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_QUERY_SET_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUQuerySetDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.type=*/ { } WGPU_COMMA /*.count=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_QUEUE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUQueueDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_QUEUE_WORK_DONE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUQueueWorkDoneCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ { } WGPU_COMMA /*.userdata=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_BUNDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderBundleDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_BUNDLE_ENCODER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderBundleEncoderDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.colorFormatCount=*/ { } WGPU_COMMA /*.colorFormats=*/ { } WGPU_COMMA /*.depthStencilFormat=*/ WGPUTextureFormat_Undefined WGPU_COMMA /*.sampleCount=*/ 1 WGPU_COMMA /*.depthReadOnly=*/ false WGPU_COMMA /*.stencilReadOnly=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PASS_DEPTH_STENCIL_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPassDepthStencilAttachment , { /*.view=*/ { } WGPU_COMMA /*.depthLoadOp=*/ WGPULoadOp_Undefined WGPU_COMMA /*.depthStoreOp=*/ WGPUStoreOp_Undefined WGPU_COMMA /*.depthClearValue=*/ NAN WGPU_COMMA /*.depthReadOnly=*/ false WGPU_COMMA /*.stencilLoadOp=*/ WGPULoadOp_Undefined WGPU_COMMA /*.stencilStoreOp=*/ WGPUStoreOp_Undefined WGPU_COMMA /*.stencilClearValue=*/ 0 WGPU_COMMA /*.stencilReadOnly=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PASS_DESCRIPTOR_EXPAND_RESOLVE_RECT_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPassDescriptorExpandResolveRect , { /*.chain=*/ { } WGPU_COMMA /*.x=*/ { } WGPU_COMMA /*.y=*/ { } WGPU_COMMA /*.width=*/ { } WGPU_COMMA /*.height=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PASS_MAX_DRAW_COUNT_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPassMaxDrawCount , { /*.chain=*/ { } WGPU_COMMA /*.maxDrawCount=*/ 50000000 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PASS_TIMESTAMP_WRITES_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPassTimestampWrites , { /*.querySet=*/ { } WGPU_COMMA /*.beginningOfPassWriteIndex=*/ WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA /*.endOfPassWriteIndex=*/ WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_REQUEST_ADAPTER_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPURequestAdapterCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ { } WGPU_COMMA /*.userdata=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_REQUEST_ADAPTER_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT ( WGPURequestAdapterOptions , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.compatibleSurface=*/ nullptr WGPU_COMMA /*.powerPreference=*/ WGPUPowerPreference_Undefined WGPU_COMMA /*.backendType=*/ WGPUBackendType_Undefined WGPU_COMMA /*.forceFallbackAdapter=*/ false WGPU_COMMA /*.compatibilityMode=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_REQUEST_DEVICE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPURequestDeviceCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.mode=*/ { } WGPU_COMMA /*.callback=*/ { } WGPU_COMMA /*.userdata=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SAMPLER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSamplerBindingLayout , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.type=*/ WGPUSamplerBindingType_Undefined WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SAMPLER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSamplerDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.addressModeU=*/ WGPUAddressMode_ClampToEdge WGPU_COMMA /*.addressModeV=*/ WGPUAddressMode_ClampToEdge WGPU_COMMA /*.addressModeW=*/ WGPUAddressMode_ClampToEdge WGPU_COMMA /*.magFilter=*/ WGPUFilterMode_Nearest WGPU_COMMA /*.minFilter=*/ WGPUFilterMode_Nearest WGPU_COMMA /*.mipmapFilter=*/ WGPUMipmapFilterMode_Nearest WGPU_COMMA /*.lodMinClamp=*/ 0.0f WGPU_COMMA /*.lodMaxClamp=*/ 32.0f WGPU_COMMA /*.compare=*/ WGPUCompareFunction_Undefined WGPU_COMMA /*.maxAnisotropy=*/ 1 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHADER_MODULE_COMPILATION_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT ( WGPUShaderModuleCompilationOptions , { /*.chain=*/ { } WGPU_COMMA /*.strictMath=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHADER_MODULE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUShaderModuleDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHADER_SOURCE_SPIRV_INIT WGPU_MAKE_INIT_STRUCT ( WGPUShaderSourceSPIRV , { /*.chain=*/ { } WGPU_COMMA /*.codeSize=*/ { } WGPU_COMMA /*.code=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHADER_SOURCE_WGSL_INIT WGPU_MAKE_INIT_STRUCT ( WGPUShaderSourceWGSL , { /*.chain=*/ { } WGPU_COMMA /*.code=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_BUFFER_MEMORY_BEGIN_ACCESS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedBufferMemoryBeginAccessDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.initialized=*/ { } WGPU_COMMA /*.fenceCount=*/ 0 WGPU_COMMA /*.fences=*/ { } WGPU_COMMA /*.signaledValues=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_BUFFER_MEMORY_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedBufferMemoryDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_BUFFER_MEMORY_END_ACCESS_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedBufferMemoryEndAccessState , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.initialized=*/ { } WGPU_COMMA /*.fenceCount=*/ 0 WGPU_COMMA /*.fences=*/ { } WGPU_COMMA /*.signaledValues=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_BUFFER_MEMORY_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedBufferMemoryProperties , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.usage=*/ { } WGPU_COMMA /*.size=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_DXGI_SHARED_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceDXGISharedHandleDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_DXGI_SHARED_HANDLE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceDXGISharedHandleExportInfo , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_MTL_SHARED_EVENT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceMTLSharedEventDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.sharedEvent=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_MTL_SHARED_EVENT_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceMTLSharedEventExportInfo , { /*.chain=*/ { } WGPU_COMMA /*.sharedEvent=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceExportInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.type=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_VK_SEMAPHORE_OPAQUE_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_VK_SEMAPHORE_OPAQUE_FD_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_VK_SEMAPHORE_SYNC_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceVkSemaphoreSyncFDDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_VK_SEMAPHORE_SYNC_FD_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceVkSemaphoreSyncFDExportInfo , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_VK_SEMAPHORE_ZIRCON_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceVkSemaphoreZirconHandleDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_FENCE_VK_SEMAPHORE_ZIRCON_HANDLE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedFenceVkSemaphoreZirconHandleExportInfo , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_D3D_SWAPCHAIN_BEGIN_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryD3DSwapchainBeginState , { /*.chain=*/ { } WGPU_COMMA /*.isSwapchain=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_DXGI_SHARED_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryDXGISharedHandleDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA /*.useKeyedMutex=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_EGL_IMAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryEGLImageDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.image=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_IO_SURFACE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryIOSurfaceDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.ioSurface=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_A_HARDWARE_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryAHardwareBufferDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.handle=*/ { } WGPU_COMMA /*.useExternalFormat=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_BEGIN_ACCESS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryBeginAccessDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.concurrentRead=*/ { } WGPU_COMMA /*.initialized=*/ { } WGPU_COMMA /*.fenceCount=*/ { } WGPU_COMMA /*.fences=*/ { } WGPU_COMMA /*.signaledValues=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_DMA_BUF_PLANE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryDmaBufPlane , { /*.fd=*/ { } WGPU_COMMA /*.offset=*/ { } WGPU_COMMA /*.stride=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_END_ACCESS_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryEndAccessState , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.initialized=*/ { } WGPU_COMMA /*.fenceCount=*/ { } WGPU_COMMA /*.fences=*/ { } WGPU_COMMA /*.signaledValues=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_OPAQUE_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryOpaqueFDDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.vkImageCreateInfo=*/ { } WGPU_COMMA /*.memoryFD=*/ { } WGPU_COMMA /*.memoryTypeIndex=*/ { } WGPU_COMMA /*.allocationSize=*/ { } WGPU_COMMA /*.dedicatedAllocation=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_VK_DEDICATED_ALLOCATION_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.dedicatedAllocation=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_VK_IMAGE_LAYOUT_BEGIN_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryVkImageLayoutBeginState , { /*.chain=*/ { } WGPU_COMMA /*.oldLayout=*/ { } WGPU_COMMA /*.newLayout=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_VK_IMAGE_LAYOUT_END_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryVkImageLayoutEndState , { /*.chain=*/ { } WGPU_COMMA /*.oldLayout=*/ { } WGPU_COMMA /*.newLayout=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_ZIRCON_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryZirconHandleDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.memoryFD=*/ { } WGPU_COMMA /*.allocationSize=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_STATIC_SAMPLER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUStaticSamplerBindingLayout , { /*.chain=*/ { } WGPU_COMMA /*.sampler=*/ { } WGPU_COMMA /*.sampledTextureBinding=*/ WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_STENCIL_FACE_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUStencilFaceState , { /*.compare=*/ WGPUCompareFunction_Always WGPU_COMMA /*.failOp=*/ WGPUStencilOperation_Keep WGPU_COMMA /*.depthFailOp=*/ WGPUStencilOperation_Keep WGPU_COMMA /*.passOp=*/ WGPUStencilOperation_Keep WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUStorageTextureBindingLayout , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.access=*/ WGPUStorageTextureAccess_Undefined WGPU_COMMA /*.format=*/ WGPUTextureFormat_Undefined WGPU_COMMA /*.viewDimension=*/ WGPUTextureViewDimension_2D WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_STRING_VIEW_INIT WGPU_MAKE_INIT_STRUCT ( WGPUStringView , { /*.data=*/ nullptr WGPU_COMMA /*.length=*/ SIZE_MAX WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceCapabilities , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.usages=*/ { } WGPU_COMMA /*.formatCount=*/ { } WGPU_COMMA /*.formats=*/ { } WGPU_COMMA /*.presentModeCount=*/ { } WGPU_COMMA /*.presentModes=*/ { } WGPU_COMMA /*.alphaModeCount=*/ { } WGPU_COMMA /*.alphaModes=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_CONFIGURATION_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceConfiguration , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.device=*/ { } WGPU_COMMA /*.format=*/ { } WGPU_COMMA /*.usage=*/ WGPUTextureUsage_RenderAttachment WGPU_COMMA /*.viewFormatCount=*/ 0 WGPU_COMMA /*.viewFormats=*/ { } WGPU_COMMA /*.alphaMode=*/ WGPUCompositeAlphaMode_Auto WGPU_COMMA /*.width=*/ { } WGPU_COMMA /*.height=*/ { } WGPU_COMMA /*.presentMode=*/ WGPUPresentMode_Fifo WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_DESCRIPTOR_FROM_WINDOWS_CORE_WINDOW_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceDescriptorFromWindowsCoreWindow , { /*.chain=*/ { } WGPU_COMMA /*.coreWindow=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_DESCRIPTOR_FROM_WINDOWS_SWAP_CHAIN_PANEL_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceDescriptorFromWindowsSwapChainPanel , { /*.chain=*/ { } WGPU_COMMA /*.swapChainPanel=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_SOURCE_XCB_WINDOW_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceSourceXCBWindow , { /*.chain=*/ { } WGPU_COMMA /*.connection=*/ { } WGPU_COMMA /*.window=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_SOURCE_ANDROID_NATIVE_WINDOW_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceSourceAndroidNativeWindow , { /*.chain=*/ { } WGPU_COMMA /*.window=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_SOURCE_CANVAS_HTML_SELECTOR__EMSCRIPTEN_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceSourceCanvasHTMLSelector_Emscripten , { /*.chain=*/ { } WGPU_COMMA /*.selector=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_SOURCE_METAL_LAYER_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceSourceMetalLayer , { /*.chain=*/ { } WGPU_COMMA /*.layer=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_SOURCE_WAYLAND_SURFACE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceSourceWaylandSurface , { /*.chain=*/ { } WGPU_COMMA /*.display=*/ { } WGPU_COMMA /*.surface=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_SOURCE_WINDOWS_HWND_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceSourceWindowsHWND , { /*.chain=*/ { } WGPU_COMMA /*.hinstance=*/ { } WGPU_COMMA /*.hwnd=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_SOURCE_XLIB_WINDOW_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceSourceXlibWindow , { /*.chain=*/ { } WGPU_COMMA /*.display=*/ { } WGPU_COMMA /*.window=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SURFACE_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSurfaceTexture , { /*.texture=*/ { } WGPU_COMMA /*.suboptimal=*/ { } WGPU_COMMA /*.status=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SWAP_CHAIN_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSwapChainDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.usage=*/ { } WGPU_COMMA /*.format=*/ { } WGPU_COMMA /*.width=*/ { } WGPU_COMMA /*.height=*/ { } WGPU_COMMA /*.presentMode=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUTextureBindingLayout , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.sampleType=*/ WGPUTextureSampleType_Undefined WGPU_COMMA /*.viewDimension=*/ WGPUTextureViewDimension_2D WGPU_COMMA /*.multisampled=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_TEXTURE_BINDING_VIEW_DIMENSION_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUTextureBindingViewDimensionDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.textureBindingViewDimension=*/ WGPUTextureViewDimension_Undefined WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_TEXTURE_DATA_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUTextureDataLayout , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.offset=*/ 0 WGPU_COMMA /*.bytesPerRow=*/ WGPU_COPY_STRIDE_UNDEFINED WGPU_COMMA /*.rowsPerImage=*/ WGPU_COPY_STRIDE_UNDEFINED WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_TEXTURE_VIEW_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUTextureViewDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.format=*/ WGPUTextureFormat_Undefined WGPU_COMMA /*.dimension=*/ WGPUTextureViewDimension_Undefined WGPU_COMMA /*.baseMipLevel=*/ 0 WGPU_COMMA /*.mipLevelCount=*/ WGPU_MIP_LEVEL_COUNT_UNDEFINED WGPU_COMMA /*.baseArrayLayer=*/ 0 WGPU_COMMA /*.arrayLayerCount=*/ WGPU_ARRAY_LAYER_COUNT_UNDEFINED WGPU_COMMA /*.aspect=*/ WGPUTextureAspect_All WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_UNCAPTURED_ERROR_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUUncapturedErrorCallbackInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.callback=*/ nullptr WGPU_COMMA /*.userdata=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_VERTEX_ATTRIBUTE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUVertexAttribute , { /*.format=*/ { } WGPU_COMMA /*.offset=*/ { } WGPU_COMMA /*.shaderLocation=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUYCbCrVkDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.vkFormat=*/ 0 WGPU_COMMA /*.vkYCbCrModel=*/ 0 WGPU_COMMA /*.vkYCbCrRange=*/ 0 WGPU_COMMA /*.vkComponentSwizzleRed=*/ 0 WGPU_COMMA /*.vkComponentSwizzleGreen=*/ 0 WGPU_COMMA /*.vkComponentSwizzleBlue=*/ 0 WGPU_COMMA /*.vkComponentSwizzleAlpha=*/ 0 WGPU_COMMA /*.vkXChromaOffset=*/ 0 WGPU_COMMA /*.vkYChromaOffset=*/ 0 WGPU_COMMA /*.vkChromaFilter=*/ WGPUFilterMode_Nearest WGPU_COMMA /*.forceExplicitReconstruction=*/ false WGPU_COMMA /*.externalFormat=*/ 0 WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_A_HARDWARE_BUFFER_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUAHardwareBufferProperties , { /*.yCbCrInfo=*/ WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_ADAPTER_PROPERTIES_MEMORY_HEAPS_INIT WGPU_MAKE_INIT_STRUCT ( WGPUAdapterPropertiesMemoryHeaps , { /*.chain=*/ { } WGPU_COMMA /*.heapCount=*/ { } WGPU_COMMA /*.heapInfo=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BIND_GROUP_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBindGroupDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.layout=*/ { } WGPU_COMMA /*.entryCount=*/ { } WGPU_COMMA /*.entries=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BIND_GROUP_LAYOUT_ENTRY_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBindGroupLayoutEntry , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.binding=*/ { } WGPU_COMMA /*.visibility=*/ { } WGPU_COMMA /*.buffer=*/ WGPU_BUFFER_BINDING_LAYOUT_INIT WGPU_COMMA /*.sampler=*/ WGPU_SAMPLER_BINDING_LAYOUT_INIT WGPU_COMMA /*.texture=*/ WGPU_TEXTURE_BINDING_LAYOUT_INIT WGPU_COMMA /*.storageTexture=*/ WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BLEND_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBlendState , { /*.color=*/ WGPU_BLEND_COMPONENT_INIT WGPU_COMMA /*.alpha=*/ WGPU_BLEND_COMPONENT_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMPILATION_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUCompilationInfo , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.messageCount=*/ { } WGPU_COMMA /*.messages=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMPUTE_PASS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUComputePassDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.timestampWrites=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DEPTH_STENCIL_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDepthStencilState , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.format=*/ { } WGPU_COMMA /*.depthWriteEnabled=*/ WGPUOptionalBool_Undefined WGPU_COMMA /*.depthCompare=*/ WGPUCompareFunction_Undefined WGPU_COMMA /*.stencilFront=*/ WGPU_STENCIL_FACE_STATE_INIT WGPU_COMMA /*.stencilBack=*/ WGPU_STENCIL_FACE_STATE_INIT WGPU_COMMA /*.stencilReadMask=*/ 0xFFFFFFFF WGPU_COMMA /*.stencilWriteMask=*/ 0xFFFFFFFF WGPU_COMMA /*.depthBias=*/ 0 WGPU_COMMA /*.depthBiasSlopeScale=*/ 0.0f WGPU_COMMA /*.depthBiasClamp=*/ 0.0f WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DRM_FORMAT_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDrmFormatCapabilities , { /*.chain=*/ { } WGPU_COMMA /*.propertiesCount=*/ { } WGPU_COMMA /*.properties=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUExternalTextureDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.plane0=*/ { } WGPU_COMMA /*.plane1=*/ nullptr WGPU_COMMA /*.visibleOrigin=*/ WGPU_ORIGIN_2D_INIT WGPU_COMMA /*.visibleSize=*/ WGPU_EXTENT_2D_INIT WGPU_COMMA /*.doYuvToRgbConversionOnly=*/ false WGPU_COMMA /*.yuvToRgbConversionMatrix=*/ nullptr WGPU_COMMA /*.srcTransferFunctionParameters=*/ { } WGPU_COMMA /*.dstTransferFunctionParameters=*/ { } WGPU_COMMA /*.gamutConversionMatrix=*/ { } WGPU_COMMA /*.mirrored=*/ false WGPU_COMMA /*.rotation=*/ WGPUExternalTextureRotation_Rotate0Degrees WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_FUTURE_WAIT_INFO_INIT WGPU_MAKE_INIT_STRUCT ( WGPUFutureWaitInfo , { /*.future=*/ WGPU_FUTURE_INIT WGPU_COMMA /*.completed=*/ false WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_IMAGE_COPY_BUFFER_INIT WGPU_MAKE_INIT_STRUCT ( WGPUImageCopyBuffer , { /*.layout=*/ WGPU_TEXTURE_DATA_LAYOUT_INIT WGPU_COMMA /*.buffer=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_IMAGE_COPY_EXTERNAL_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUImageCopyExternalTexture , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.externalTexture=*/ { } WGPU_COMMA /*.origin=*/ WGPU_ORIGIN_3D_INIT WGPU_COMMA /*.naturalSize=*/ WGPU_EXTENT_2D_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_IMAGE_COPY_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUImageCopyTexture , { /*.texture=*/ { } WGPU_COMMA /*.mipLevel=*/ 0 WGPU_COMMA /*.origin=*/ WGPU_ORIGIN_3D_INIT WGPU_COMMA /*.aspect=*/ WGPUTextureAspect_All WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_INSTANCE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUInstanceDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.features=*/ WGPU_INSTANCE_FEATURES_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_PIPELINE_LAYOUT_PIXEL_LOCAL_STORAGE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUPipelineLayoutPixelLocalStorage , { /*.chain=*/ { } WGPU_COMMA /*.totalPixelLocalStorageSize=*/ { } WGPU_COMMA /*.storageAttachmentCount=*/ 0 WGPU_COMMA /*.storageAttachments=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_PROGRAMMABLE_STAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUProgrammableStageDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.module=*/ { } WGPU_COMMA /*.entryPoint=*/ nullptr WGPU_COMMA /*.constantCount=*/ 0 WGPU_COMMA /*.constants=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PASS_COLOR_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPassColorAttachment , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.view=*/ nullptr WGPU_COMMA /*.depthSlice=*/ WGPU_DEPTH_SLICE_UNDEFINED WGPU_COMMA /*.resolveTarget=*/ nullptr WGPU_COMMA /*.loadOp=*/ { } WGPU_COMMA /*.storeOp=*/ { } WGPU_COMMA /*.clearValue=*/ WGPU_COLOR_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PASS_STORAGE_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPassStorageAttachment , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.offset=*/ 0 WGPU_COMMA /*.storage=*/ { } WGPU_COMMA /*.loadOp=*/ { } WGPU_COMMA /*.storeOp=*/ { } WGPU_COMMA /*.clearValue=*/ WGPU_COLOR_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_REQUIRED_LIMITS_INIT WGPU_MAKE_INIT_STRUCT ( WGPURequiredLimits , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.limits=*/ WGPU_LIMITS_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_A_HARDWARE_BUFFER_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryAHardwareBufferProperties , { /*.chain=*/ { } WGPU_COMMA /*.yCbCrInfo=*/ WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_DMA_BUF_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryDmaBufDescriptor , { /*.chain=*/ { } WGPU_COMMA /*.size=*/ WGPU_EXTENT_3D_INIT WGPU_COMMA /*.drmFormat=*/ { } WGPU_COMMA /*.drmModifier=*/ { } WGPU_COMMA /*.planeCount=*/ { } WGPU_COMMA /*.planes=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SHARED_TEXTURE_MEMORY_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSharedTextureMemoryProperties , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.usage=*/ { } WGPU_COMMA /*.size=*/ WGPU_EXTENT_3D_INIT WGPU_COMMA /*.format=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_SUPPORTED_LIMITS_INIT WGPU_MAKE_INIT_STRUCT ( WGPUSupportedLimits , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.limits=*/ WGPU_LIMITS_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_TEXTURE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUTextureDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.usage=*/ { } WGPU_COMMA /*.dimension=*/ WGPUTextureDimension_2D WGPU_COMMA /*.size=*/ WGPU_EXTENT_3D_INIT WGPU_COMMA /*.format=*/ { } WGPU_COMMA /*.mipLevelCount=*/ 1 WGPU_COMMA /*.sampleCount=*/ 1 WGPU_COMMA /*.viewFormatCount=*/ 0 WGPU_COMMA /*.viewFormats=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_VERTEX_BUFFER_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT ( WGPUVertexBufferLayout , { /*.arrayStride=*/ { } WGPU_COMMA /*.stepMode=*/ WGPUVertexStepMode_Vertex WGPU_COMMA /*.attributeCount=*/ { } WGPU_COMMA /*.attributes=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_BIND_GROUP_LAYOUT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUBindGroupLayoutDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.entryCount=*/ { } WGPU_COMMA /*.entries=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COLOR_TARGET_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUColorTargetState , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.format=*/ { } WGPU_COMMA /*.blend=*/ nullptr WGPU_COMMA /*.writeMask=*/ WGPUColorWriteMask_All WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_COMPUTE_PIPELINE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUComputePipelineDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.layout=*/ nullptr WGPU_COMMA /*.compute=*/ WGPU_PROGRAMMABLE_STAGE_DESCRIPTOR_INIT WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_DEVICE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPUDeviceDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.requiredFeatureCount=*/ 0 WGPU_COMMA /*.requiredFeatures=*/ nullptr WGPU_COMMA /*.requiredLimits=*/ nullptr WGPU_COMMA /*.defaultQueue=*/ WGPU_QUEUE_DESCRIPTOR_INIT WGPU_COMMA /*.deviceLostCallback=*/ nullptr WGPU_COMMA /*.deviceLostUserdata=*/ nullptr WGPU_COMMA /*.deviceLostCallbackInfo=*/ WGPU_DEVICE_LOST_CALLBACK_INFO_INIT WGPU_COMMA /*.uncapturedErrorCallbackInfo=*/ WGPU_UNCAPTURED_ERROR_CALLBACK_INFO_INIT WGPU_COMMA /*.deviceLostCallbackInfo2=*/ { } WGPU_COMMA /*.uncapturedErrorCallbackInfo2=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PASS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPassDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.colorAttachmentCount=*/ { } WGPU_COMMA /*.colorAttachments=*/ { } WGPU_COMMA /*.depthStencilAttachment=*/ nullptr WGPU_COMMA /*.occlusionQuerySet=*/ nullptr WGPU_COMMA /*.timestampWrites=*/ nullptr WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PASS_PIXEL_LOCAL_STORAGE_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPassPixelLocalStorage , { /*.chain=*/ { } WGPU_COMMA /*.totalPixelLocalStorageSize=*/ { } WGPU_COMMA /*.storageAttachmentCount=*/ 0 WGPU_COMMA /*.storageAttachments=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_VERTEX_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUVertexState , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.module=*/ { } WGPU_COMMA /*.entryPoint=*/ nullptr WGPU_COMMA /*.constantCount=*/ 0 WGPU_COMMA /*.constants=*/ { } WGPU_COMMA /*.bufferCount=*/ 0 WGPU_COMMA /*.buffers=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_FRAGMENT_STATE_INIT WGPU_MAKE_INIT_STRUCT ( WGPUFragmentState , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.module=*/ { } WGPU_COMMA /*.entryPoint=*/ nullptr WGPU_COMMA /*.constantCount=*/ 0 WGPU_COMMA /*.constants=*/ { } WGPU_COMMA /*.targetCount=*/ { } WGPU_COMMA /*.targets=*/ { } WGPU_COMMA \
} ) *)
  { TODO : Macro uses commented-out symbol "WGPU_MAKE_INIT_STRUCT": }
  (* WGPU_RENDER_PIPELINE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT ( WGPURenderPipelineDescriptor , { /*.nextInChain=*/ nullptr WGPU_COMMA /*.label=*/ nullptr WGPU_COMMA /*.layout=*/ nullptr WGPU_COMMA /*.vertex=*/ WGPU_VERTEX_STATE_INIT WGPU_COMMA /*.primitive=*/ WGPU_PRIMITIVE_STATE_INIT WGPU_COMMA /*.depthStencil=*/ nullptr WGPU_COMMA /*.multisample=*/ WGPU_MULTISAMPLE_STATE_INIT WGPU_COMMA /*.fragment=*/ nullptr WGPU_COMMA \
} ) *)

type
  // Forward declarations
  PPUTF8Char = ^PUTF8Char;
  PUInt8 = ^UInt8;
  PUInt32 = ^UInt32;
  PUInt64 = ^UInt64;
  PWGPUAdapterImpl = Pointer;
  PPWGPUAdapterImpl = ^PWGPUAdapterImpl;
  PWGPUBindGroupImpl = Pointer;
  PPWGPUBindGroupImpl = ^PWGPUBindGroupImpl;
  PWGPUBindGroupLayoutImpl = Pointer;
  PPWGPUBindGroupLayoutImpl = ^PWGPUBindGroupLayoutImpl;
  PWGPUBufferImpl = Pointer;
  PPWGPUBufferImpl = ^PWGPUBufferImpl;
  PWGPUCommandBufferImpl = Pointer;
  PPWGPUCommandBufferImpl = ^PWGPUCommandBufferImpl;
  PWGPUCommandEncoderImpl = Pointer;
  PPWGPUCommandEncoderImpl = ^PWGPUCommandEncoderImpl;
  PWGPUComputePassEncoderImpl = Pointer;
  PPWGPUComputePassEncoderImpl = ^PWGPUComputePassEncoderImpl;
  PWGPUComputePipelineImpl = Pointer;
  PPWGPUComputePipelineImpl = ^PWGPUComputePipelineImpl;
  PWGPUDeviceImpl = Pointer;
  PPWGPUDeviceImpl = ^PWGPUDeviceImpl;
  PWGPUExternalTextureImpl = Pointer;
  PPWGPUExternalTextureImpl = ^PWGPUExternalTextureImpl;
  PWGPUInstanceImpl = Pointer;
  PPWGPUInstanceImpl = ^PWGPUInstanceImpl;
  PWGPUPipelineLayoutImpl = Pointer;
  PPWGPUPipelineLayoutImpl = ^PWGPUPipelineLayoutImpl;
  PWGPUQuerySetImpl = Pointer;
  PPWGPUQuerySetImpl = ^PWGPUQuerySetImpl;
  PWGPUQueueImpl = Pointer;
  PPWGPUQueueImpl = ^PWGPUQueueImpl;
  PWGPURenderBundleImpl = Pointer;
  PPWGPURenderBundleImpl = ^PWGPURenderBundleImpl;
  PWGPURenderBundleEncoderImpl = Pointer;
  PPWGPURenderBundleEncoderImpl = ^PWGPURenderBundleEncoderImpl;
  PWGPURenderPassEncoderImpl = Pointer;
  PPWGPURenderPassEncoderImpl = ^PWGPURenderPassEncoderImpl;
  PWGPURenderPipelineImpl = Pointer;
  PPWGPURenderPipelineImpl = ^PWGPURenderPipelineImpl;
  PWGPUSamplerImpl = Pointer;
  PPWGPUSamplerImpl = ^PWGPUSamplerImpl;
  PWGPUShaderModuleImpl = Pointer;
  PPWGPUShaderModuleImpl = ^PWGPUShaderModuleImpl;
  PWGPUSharedBufferMemoryImpl = Pointer;
  PPWGPUSharedBufferMemoryImpl = ^PWGPUSharedBufferMemoryImpl;
  PWGPUSharedFenceImpl = Pointer;
  PPWGPUSharedFenceImpl = ^PWGPUSharedFenceImpl;
  PWGPUSharedTextureMemoryImpl = Pointer;
  PPWGPUSharedTextureMemoryImpl = ^PWGPUSharedTextureMemoryImpl;
  PWGPUSurfaceImpl = Pointer;
  PPWGPUSurfaceImpl = ^PWGPUSurfaceImpl;
  PWGPUSwapChainImpl = Pointer;
  PPWGPUSwapChainImpl = ^PWGPUSwapChainImpl;
  PWGPUTextureImpl = Pointer;
  PPWGPUTextureImpl = ^PWGPUTextureImpl;
  PWGPUTextureViewImpl = Pointer;
  PPWGPUTextureViewImpl = ^PWGPUTextureViewImpl;
  PWGPUChainedStruct = ^WGPUChainedStruct;
  PWGPUChainedStructOut = ^WGPUChainedStructOut;
  PWGPUBufferMapCallbackInfo2 = ^WGPUBufferMapCallbackInfo2;
  PWGPUCompilationInfoCallbackInfo2 = ^WGPUCompilationInfoCallbackInfo2;
  PWGPUCreateComputePipelineAsyncCallbackInfo2 = ^WGPUCreateComputePipelineAsyncCallbackInfo2;
  PWGPUCreateRenderPipelineAsyncCallbackInfo2 = ^WGPUCreateRenderPipelineAsyncCallbackInfo2;
  PWGPUDeviceLostCallbackInfo2 = ^WGPUDeviceLostCallbackInfo2;
  PWGPUPopErrorScopeCallbackInfo2 = ^WGPUPopErrorScopeCallbackInfo2;
  PWGPUQueueWorkDoneCallbackInfo2 = ^WGPUQueueWorkDoneCallbackInfo2;
  PWGPURequestAdapterCallbackInfo2 = ^WGPURequestAdapterCallbackInfo2;
  PWGPURequestDeviceCallbackInfo2 = ^WGPURequestDeviceCallbackInfo2;
  PWGPUUncapturedErrorCallbackInfo2 = ^WGPUUncapturedErrorCallbackInfo2;
  PWGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER = ^WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER;
  PWGPUAdapterInfo = ^WGPUAdapterInfo;
  PWGPUAdapterProperties = ^WGPUAdapterProperties;
  PWGPUAdapterPropertiesD3D = ^WGPUAdapterPropertiesD3D;
  PWGPUAdapterPropertiesVk = ^WGPUAdapterPropertiesVk;
  PWGPUBindGroupEntry = ^WGPUBindGroupEntry;
  PWGPUBlendComponent = ^WGPUBlendComponent;
  PWGPUBufferBindingLayout = ^WGPUBufferBindingLayout;
  PWGPUBufferDescriptor = ^WGPUBufferDescriptor;
  PWGPUBufferHostMappedPointer = ^WGPUBufferHostMappedPointer;
  PWGPUBufferMapCallbackInfo = ^WGPUBufferMapCallbackInfo;
  PWGPUColor = ^WGPUColor;
  PWGPUColorTargetStateExpandResolveTextureDawn = ^WGPUColorTargetStateExpandResolveTextureDawn;
  PWGPUCommandBufferDescriptor = ^WGPUCommandBufferDescriptor;
  PWGPUCommandEncoderDescriptor = ^WGPUCommandEncoderDescriptor;
  PWGPUCompilationInfoCallbackInfo = ^WGPUCompilationInfoCallbackInfo;
  PWGPUCompilationMessage = ^WGPUCompilationMessage;
  PWGPUComputePassTimestampWrites = ^WGPUComputePassTimestampWrites;
  PWGPUConstantEntry = ^WGPUConstantEntry;
  PWGPUCopyTextureForBrowserOptions = ^WGPUCopyTextureForBrowserOptions;
  PWGPUCreateComputePipelineAsyncCallbackInfo = ^WGPUCreateComputePipelineAsyncCallbackInfo;
  PWGPUCreateRenderPipelineAsyncCallbackInfo = ^WGPUCreateRenderPipelineAsyncCallbackInfo;
  PWGPUDawnWGSLBlocklist = ^WGPUDawnWGSLBlocklist;
  PWGPUDawnAdapterPropertiesPowerPreference = ^WGPUDawnAdapterPropertiesPowerPreference;
  PWGPUDawnBufferDescriptorErrorInfoFromWireClient = ^WGPUDawnBufferDescriptorErrorInfoFromWireClient;
  PWGPUDawnCacheDeviceDescriptor = ^WGPUDawnCacheDeviceDescriptor;
  PWGPUDawnComputePipelineFullSubgroups = ^WGPUDawnComputePipelineFullSubgroups;
  PWGPUDawnEncoderInternalUsageDescriptor = ^WGPUDawnEncoderInternalUsageDescriptor;
  PWGPUDawnExperimentalSubgroupLimits = ^WGPUDawnExperimentalSubgroupLimits;
  PWGPUDawnRenderPassColorAttachmentRenderToSingleSampled = ^WGPUDawnRenderPassColorAttachmentRenderToSingleSampled;
  PWGPUDawnShaderModuleSPIRVOptionsDescriptor = ^WGPUDawnShaderModuleSPIRVOptionsDescriptor;
  PWGPUDawnTextureInternalUsageDescriptor = ^WGPUDawnTextureInternalUsageDescriptor;
  PWGPUDawnTogglesDescriptor = ^WGPUDawnTogglesDescriptor;
  PWGPUDawnWireWGSLControl = ^WGPUDawnWireWGSLControl;
  PWGPUDeviceLostCallbackInfo = ^WGPUDeviceLostCallbackInfo;
  PWGPUDrmFormatProperties = ^WGPUDrmFormatProperties;
  PWGPUExtent2D = ^WGPUExtent2D;
  PWGPUExtent3D = ^WGPUExtent3D;
  PWGPUExternalTextureBindingEntry = ^WGPUExternalTextureBindingEntry;
  PWGPUExternalTextureBindingLayout = ^WGPUExternalTextureBindingLayout;
  PWGPUFormatCapabilities = ^WGPUFormatCapabilities;
  PWGPUFuture = ^WGPUFuture;
  PWGPUInstanceFeatures = ^WGPUInstanceFeatures;
  PWGPULimits = ^WGPULimits;
  PWGPUMemoryHeapInfo = ^WGPUMemoryHeapInfo;
  PWGPUMultisampleState = ^WGPUMultisampleState;
  PWGPUOrigin2D = ^WGPUOrigin2D;
  PWGPUOrigin3D = ^WGPUOrigin3D;
  PWGPUPipelineLayoutDescriptor = ^WGPUPipelineLayoutDescriptor;
  PWGPUPipelineLayoutStorageAttachment = ^WGPUPipelineLayoutStorageAttachment;
  PWGPUPopErrorScopeCallbackInfo = ^WGPUPopErrorScopeCallbackInfo;
  PWGPUPrimitiveState = ^WGPUPrimitiveState;
  PWGPUQuerySetDescriptor = ^WGPUQuerySetDescriptor;
  PWGPUQueueDescriptor = ^WGPUQueueDescriptor;
  PWGPUQueueWorkDoneCallbackInfo = ^WGPUQueueWorkDoneCallbackInfo;
  PWGPURenderBundleDescriptor = ^WGPURenderBundleDescriptor;
  PWGPURenderBundleEncoderDescriptor = ^WGPURenderBundleEncoderDescriptor;
  PWGPURenderPassDepthStencilAttachment = ^WGPURenderPassDepthStencilAttachment;
  PWGPURenderPassDescriptorExpandResolveRect = ^WGPURenderPassDescriptorExpandResolveRect;
  PWGPURenderPassMaxDrawCount = ^WGPURenderPassMaxDrawCount;
  PWGPURenderPassTimestampWrites = ^WGPURenderPassTimestampWrites;
  PWGPURequestAdapterCallbackInfo = ^WGPURequestAdapterCallbackInfo;
  PWGPURequestAdapterOptions = ^WGPURequestAdapterOptions;
  PWGPURequestDeviceCallbackInfo = ^WGPURequestDeviceCallbackInfo;
  PWGPUSamplerBindingLayout = ^WGPUSamplerBindingLayout;
  PWGPUSamplerDescriptor = ^WGPUSamplerDescriptor;
  PWGPUShaderModuleCompilationOptions = ^WGPUShaderModuleCompilationOptions;
  PWGPUShaderModuleDescriptor = ^WGPUShaderModuleDescriptor;
  PWGPUShaderSourceSPIRV = ^WGPUShaderSourceSPIRV;
  PWGPUShaderSourceWGSL = ^WGPUShaderSourceWGSL;
  PWGPUSharedBufferMemoryBeginAccessDescriptor = ^WGPUSharedBufferMemoryBeginAccessDescriptor;
  PWGPUSharedBufferMemoryDescriptor = ^WGPUSharedBufferMemoryDescriptor;
  PWGPUSharedBufferMemoryEndAccessState = ^WGPUSharedBufferMemoryEndAccessState;
  PWGPUSharedBufferMemoryProperties = ^WGPUSharedBufferMemoryProperties;
  PWGPUSharedFenceDXGISharedHandleDescriptor = ^WGPUSharedFenceDXGISharedHandleDescriptor;
  PWGPUSharedFenceDXGISharedHandleExportInfo = ^WGPUSharedFenceDXGISharedHandleExportInfo;
  PWGPUSharedFenceMTLSharedEventDescriptor = ^WGPUSharedFenceMTLSharedEventDescriptor;
  PWGPUSharedFenceMTLSharedEventExportInfo = ^WGPUSharedFenceMTLSharedEventExportInfo;
  PWGPUSharedFenceDescriptor = ^WGPUSharedFenceDescriptor;
  PWGPUSharedFenceExportInfo = ^TWGPUSharedFenceExportInfo;
  PWGPUSharedFenceVkSemaphoreOpaqueFDDescriptor = ^WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor;
  PWGPUSharedFenceVkSemaphoreOpaqueFDExportInfo = ^WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo;
  PWGPUSharedFenceVkSemaphoreSyncFDDescriptor = ^WGPUSharedFenceVkSemaphoreSyncFDDescriptor;
  PWGPUSharedFenceVkSemaphoreSyncFDExportInfo = ^WGPUSharedFenceVkSemaphoreSyncFDExportInfo;
  PWGPUSharedFenceVkSemaphoreZirconHandleDescriptor = ^WGPUSharedFenceVkSemaphoreZirconHandleDescriptor;
  PWGPUSharedFenceVkSemaphoreZirconHandleExportInfo = ^WGPUSharedFenceVkSemaphoreZirconHandleExportInfo;
  PWGPUSharedTextureMemoryD3DSwapchainBeginState = ^WGPUSharedTextureMemoryD3DSwapchainBeginState;
  PWGPUSharedTextureMemoryDXGISharedHandleDescriptor = ^WGPUSharedTextureMemoryDXGISharedHandleDescriptor;
  PWGPUSharedTextureMemoryEGLImageDescriptor = ^WGPUSharedTextureMemoryEGLImageDescriptor;
  PWGPUSharedTextureMemoryIOSurfaceDescriptor = ^WGPUSharedTextureMemoryIOSurfaceDescriptor;
  PWGPUSharedTextureMemoryAHardwareBufferDescriptor = ^WGPUSharedTextureMemoryAHardwareBufferDescriptor;
  PWGPUSharedTextureMemoryBeginAccessDescriptor = ^WGPUSharedTextureMemoryBeginAccessDescriptor;
  PWGPUSharedTextureMemoryDescriptor = ^WGPUSharedTextureMemoryDescriptor;
  PWGPUSharedTextureMemoryDmaBufPlane = ^WGPUSharedTextureMemoryDmaBufPlane;
  PWGPUSharedTextureMemoryEndAccessState = ^WGPUSharedTextureMemoryEndAccessState;
  PWGPUSharedTextureMemoryOpaqueFDDescriptor = ^WGPUSharedTextureMemoryOpaqueFDDescriptor;
  PWGPUSharedTextureMemoryVkDedicatedAllocationDescriptor = ^WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor;
  PWGPUSharedTextureMemoryVkImageLayoutBeginState = ^WGPUSharedTextureMemoryVkImageLayoutBeginState;
  PWGPUSharedTextureMemoryVkImageLayoutEndState = ^WGPUSharedTextureMemoryVkImageLayoutEndState;
  PWGPUSharedTextureMemoryZirconHandleDescriptor = ^WGPUSharedTextureMemoryZirconHandleDescriptor;
  PWGPUStaticSamplerBindingLayout = ^WGPUStaticSamplerBindingLayout;
  PWGPUStencilFaceState = ^WGPUStencilFaceState;
  PWGPUStorageTextureBindingLayout = ^WGPUStorageTextureBindingLayout;
  PWGPUStringView = ^WGPUStringView;
  PWGPUSurfaceCapabilities = ^WGPUSurfaceCapabilities;
  PWGPUSurfaceConfiguration = ^WGPUSurfaceConfiguration;
  PWGPUSurfaceDescriptor = ^WGPUSurfaceDescriptor;
  PWGPUSurfaceDescriptorFromWindowsCoreWindow = ^WGPUSurfaceDescriptorFromWindowsCoreWindow;
  PWGPUSurfaceDescriptorFromWindowsSwapChainPanel = ^WGPUSurfaceDescriptorFromWindowsSwapChainPanel;
  PWGPUSurfaceSourceXCBWindow = ^WGPUSurfaceSourceXCBWindow;
  PWGPUSurfaceSourceAndroidNativeWindow = ^WGPUSurfaceSourceAndroidNativeWindow;
  PWGPUSurfaceSourceCanvasHTMLSelector_Emscripten = ^WGPUSurfaceSourceCanvasHTMLSelector_Emscripten;
  PWGPUSurfaceSourceMetalLayer = ^WGPUSurfaceSourceMetalLayer;
  PWGPUSurfaceSourceWaylandSurface = ^WGPUSurfaceSourceWaylandSurface;
  PWGPUSurfaceSourceWindowsHWND = ^WGPUSurfaceSourceWindowsHWND;
  PWGPUSurfaceSourceXlibWindow = ^WGPUSurfaceSourceXlibWindow;
  PWGPUSurfaceTexture = ^WGPUSurfaceTexture;
  PWGPUSwapChainDescriptor = ^WGPUSwapChainDescriptor;
  PWGPUTextureBindingLayout = ^WGPUTextureBindingLayout;
  PWGPUTextureBindingViewDimensionDescriptor = ^WGPUTextureBindingViewDimensionDescriptor;
  PWGPUTextureDataLayout = ^WGPUTextureDataLayout;
  PWGPUTextureViewDescriptor = ^WGPUTextureViewDescriptor;
  PWGPUUncapturedErrorCallbackInfo = ^WGPUUncapturedErrorCallbackInfo;
  PWGPUVertexAttribute = ^WGPUVertexAttribute;
  PWGPUYCbCrVkDescriptor = ^WGPUYCbCrVkDescriptor;
  PWGPUAHardwareBufferProperties = ^WGPUAHardwareBufferProperties;
  PWGPUAdapterPropertiesMemoryHeaps = ^WGPUAdapterPropertiesMemoryHeaps;
  PWGPUBindGroupDescriptor = ^WGPUBindGroupDescriptor;
  PWGPUBindGroupLayoutEntry = ^WGPUBindGroupLayoutEntry;
  PWGPUBlendState = ^WGPUBlendState;
  PWGPUCompilationInfo = ^WGPUCompilationInfo;
  PWGPUComputePassDescriptor = ^WGPUComputePassDescriptor;
  PWGPUDepthStencilState = ^WGPUDepthStencilState;
  PWGPUDrmFormatCapabilities = ^WGPUDrmFormatCapabilities;
  PWGPUExternalTextureDescriptor = ^WGPUExternalTextureDescriptor;
  PWGPUFutureWaitInfo = ^WGPUFutureWaitInfo;
  PWGPUImageCopyBuffer = ^WGPUImageCopyBuffer;
  PWGPUImageCopyExternalTexture = ^WGPUImageCopyExternalTexture;
  PWGPUImageCopyTexture = ^WGPUImageCopyTexture;
  PWGPUInstanceDescriptor = ^WGPUInstanceDescriptor;
  PWGPUPipelineLayoutPixelLocalStorage = ^WGPUPipelineLayoutPixelLocalStorage;
  PWGPUProgrammableStageDescriptor = ^WGPUProgrammableStageDescriptor;
  PWGPURenderPassColorAttachment = ^WGPURenderPassColorAttachment;
  PWGPURenderPassStorageAttachment = ^WGPURenderPassStorageAttachment;
  PWGPURequiredLimits = ^WGPURequiredLimits;
  PWGPUSharedTextureMemoryAHardwareBufferProperties = ^WGPUSharedTextureMemoryAHardwareBufferProperties;
  PWGPUSharedTextureMemoryDmaBufDescriptor = ^WGPUSharedTextureMemoryDmaBufDescriptor;
  PWGPUSharedTextureMemoryProperties = ^WGPUSharedTextureMemoryProperties;
  PWGPUSupportedLimits = ^WGPUSupportedLimits;
  PWGPUTextureDescriptor = ^WGPUTextureDescriptor;
  PWGPUVertexBufferLayout = ^WGPUVertexBufferLayout;
  PWGPUBindGroupLayoutDescriptor = ^WGPUBindGroupLayoutDescriptor;
  PWGPUColorTargetState = ^WGPUColorTargetState;
  PWGPUComputePipelineDescriptor = ^WGPUComputePipelineDescriptor;
  PWGPUDeviceDescriptor = ^WGPUDeviceDescriptor;
  PWGPURenderPassDescriptor = ^WGPURenderPassDescriptor;
  PWGPURenderPassPixelLocalStorage = ^WGPURenderPassPixelLocalStorage;
  PWGPUVertexState = ^WGPUVertexState;
  PWGPUFragmentState = ^WGPUFragmentState;
  PWGPURenderPipelineDescriptor = ^WGPURenderPipelineDescriptor;

  ptrdiff_t = Int64;
  size_t = UInt64;
  wchar_t = Word;
  wint_t = Word;
  int8_t = UTF8Char;
  uint8_t = Byte;
  Puint8_t = ^uint8_t;
  int16_t = Smallint;
  uint16_t = Word;
  int32_t = Integer;
  uint32_t = Cardinal;
  Puint32_t = ^uint32_t;
  int64_t = Int64;
  uint64_t = UInt64;
  Puint64_t = ^uint64_t;
  int_least8_t = UTF8Char;
  uint_least8_t = Byte;
  int_least16_t = Smallint;
  uint_least16_t = Word;
  int_least32_t = Integer;
  uint_least32_t = Cardinal;
  int_least64_t = Int64;
  uint_least64_t = UInt64;
  int_fast8_t = UTF8Char;
  uint_fast8_t = Byte;
  int_fast16_t = Smallint;
  uint_fast16_t = Word;
  int_fast32_t = Integer;
  uint_fast32_t = Cardinal;
  int_fast64_t = Int64;
  uint_fast64_t = UInt64;
  intptr_t = Integer;
  uintptr_t = Cardinal;
  intmax_t = Int64;
  uintmax_t = UInt64;
  WGPUFlags = UInt64;
  WGPUBool = UInt32;
  WGPUAdapter = Pointer;
  PWGPUAdapter = ^WGPUAdapter;
  WGPUBindGroup = Pointer;
  PWGPUBindGroup = ^WGPUBindGroup;
  WGPUBindGroupLayout = Pointer;
  PWGPUBindGroupLayout = ^WGPUBindGroupLayout;
  WGPUBuffer = Pointer;
  PWGPUBuffer = ^WGPUBuffer;
  WGPUCommandBuffer = Pointer;
  PWGPUCommandBuffer = ^WGPUCommandBuffer;
  WGPUCommandEncoder = Pointer;
  PWGPUCommandEncoder = ^WGPUCommandEncoder;
  WGPUComputePassEncoder = Pointer;
  PWGPUComputePassEncoder = ^WGPUComputePassEncoder;
  WGPUComputePipeline = Pointer;
  PWGPUComputePipeline = ^WGPUComputePipeline;
  WGPUDevice = Pointer;
  PWGPUDevice = ^WGPUDevice;
  WGPUExternalTexture = Pointer;
  PWGPUExternalTexture = ^WGPUExternalTexture;
  WGPUInstance = Pointer;
  PWGPUInstance = ^WGPUInstance;
  WGPUPipelineLayout = Pointer;
  PWGPUPipelineLayout = ^WGPUPipelineLayout;
  WGPUQuerySet = Pointer;
  PWGPUQuerySet = ^WGPUQuerySet;
  WGPUQueue = Pointer;
  PWGPUQueue = ^WGPUQueue;
  WGPURenderBundle = Pointer;
  PWGPURenderBundle = ^WGPURenderBundle;
  WGPURenderBundleEncoder = Pointer;
  PWGPURenderBundleEncoder = ^WGPURenderBundleEncoder;
  WGPURenderPassEncoder = Pointer;
  PWGPURenderPassEncoder = ^WGPURenderPassEncoder;
  WGPURenderPipeline = Pointer;
  PWGPURenderPipeline = ^WGPURenderPipeline;
  WGPUSampler = Pointer;
  PWGPUSampler = ^WGPUSampler;
  WGPUShaderModule = Pointer;
  PWGPUShaderModule = ^WGPUShaderModule;
  WGPUSharedBufferMemory = Pointer;
  PWGPUSharedBufferMemory = ^WGPUSharedBufferMemory;
  WGPUSharedFence = Pointer;
  PWGPUSharedFence = ^WGPUSharedFence;
  WGPUSharedTextureMemory = Pointer;
  PWGPUSharedTextureMemory = ^WGPUSharedTextureMemory;
  WGPUSurface = Pointer;
  PWGPUSurface = ^WGPUSurface;
  WGPUSwapChain = Pointer;
  PWGPUSwapChain = ^WGPUSwapChain;
  WGPUTexture = Pointer;
  PWGPUTexture = ^WGPUTexture;
  WGPUTextureView = Pointer;
  PWGPUTextureView = ^WGPUTextureView;

  WGPUWGSLFeatureName = (
    WGPUWGSLFeatureName_ReadonlyAndReadwriteStorageTextures = 1,
    WGPUWGSLFeatureName_Packed4x8IntegerDotProduct = 2,
    WGPUWGSLFeatureName_UnrestrictedPointerParameters = 3,
    WGPUWGSLFeatureName_PointerCompositeAccess = 4,
    WGPUWGSLFeatureName_ChromiumTestingUnimplemented = 327680,
    WGPUWGSLFeatureName_ChromiumTestingUnsafeExperimental = 327681,
    WGPUWGSLFeatureName_ChromiumTestingExperimental = 327682,
    WGPUWGSLFeatureName_ChromiumTestingShippedWithKillswitch = 327683,
    WGPUWGSLFeatureName_ChromiumTestingShipped = 327684,
    WGPUWGSLFeatureName_Force32 = 2147483647);
  PWGPUWGSLFeatureName = ^WGPUWGSLFeatureName;

  WGPUAdapterType = (
    WGPUAdapterType_DiscreteGPU = 1,
    WGPUAdapterType_IntegratedGPU = 2,
    WGPUAdapterType_CPU = 3,
    WGPUAdapterType_Unknown = 4,
    WGPUAdapterType_Force32 = 2147483647);
  PWGPUAdapterType = ^WGPUAdapterType;

  WGPUAddressMode = (
    WGPUAddressMode_Undefined = 0,
    WGPUAddressMode_ClampToEdge = 1,
    WGPUAddressMode_Repeat = 2,
    WGPUAddressMode_MirrorRepeat = 3,
    WGPUAddressMode_Force32 = 2147483647);
  PWGPUAddressMode = ^WGPUAddressMode;

  WGPUAlphaMode = (
    WGPUAlphaMode_Opaque = 1,
    WGPUAlphaMode_Premultiplied = 2,
    WGPUAlphaMode_Unpremultiplied = 3,
    WGPUAlphaMode_Force32 = 2147483647);
  PWGPUAlphaMode = ^WGPUAlphaMode;

  WGPUBackendType = (
    WGPUBackendType_Undefined = 0,
    WGPUBackendType_Null = 1,
    WGPUBackendType_WebGPU = 2,
    WGPUBackendType_D3D11 = 3,
    WGPUBackendType_D3D12 = 4,
    WGPUBackendType_Metal = 5,
    WGPUBackendType_Vulkan = 6,
    WGPUBackendType_OpenGL = 7,
    WGPUBackendType_OpenGLES = 8,
    WGPUBackendType_Force32 = 2147483647);
  PWGPUBackendType = ^WGPUBackendType;

  WGPUBlendFactor = (
    WGPUBlendFactor_Undefined = 0,
    WGPUBlendFactor_Zero = 1,
    WGPUBlendFactor_One = 2,
    WGPUBlendFactor_Src = 3,
    WGPUBlendFactor_OneMinusSrc = 4,
    WGPUBlendFactor_SrcAlpha = 5,
    WGPUBlendFactor_OneMinusSrcAlpha = 6,
    WGPUBlendFactor_Dst = 7,
    WGPUBlendFactor_OneMinusDst = 8,
    WGPUBlendFactor_DstAlpha = 9,
    WGPUBlendFactor_OneMinusDstAlpha = 10,
    WGPUBlendFactor_SrcAlphaSaturated = 11,
    WGPUBlendFactor_Constant = 12,
    WGPUBlendFactor_OneMinusConstant = 13,
    WGPUBlendFactor_Src1 = 14,
    WGPUBlendFactor_OneMinusSrc1 = 15,
    WGPUBlendFactor_Src1Alpha = 16,
    WGPUBlendFactor_OneMinusSrc1Alpha = 17,
    WGPUBlendFactor_Force32 = 2147483647);
  PWGPUBlendFactor = ^WGPUBlendFactor;

  WGPUBlendOperation = (
    WGPUBlendOperation_Undefined = 0,
    WGPUBlendOperation_Add = 1,
    WGPUBlendOperation_Subtract = 2,
    WGPUBlendOperation_ReverseSubtract = 3,
    WGPUBlendOperation_Min = 4,
    WGPUBlendOperation_Max = 5,
    WGPUBlendOperation_Force32 = 2147483647);
  PWGPUBlendOperation = ^WGPUBlendOperation;

  WGPUBufferBindingType = (
    WGPUBufferBindingType_Undefined = 0,
    WGPUBufferBindingType_Uniform = 1,
    WGPUBufferBindingType_Storage = 2,
    WGPUBufferBindingType_ReadOnlyStorage = 3,
    WGPUBufferBindingType_Force32 = 2147483647);
  PWGPUBufferBindingType = ^WGPUBufferBindingType;

  WGPUBufferMapAsyncStatus = (
    WGPUBufferMapAsyncStatus_Success = 1,
    WGPUBufferMapAsyncStatus_InstanceDropped = 2,
    WGPUBufferMapAsyncStatus_ValidationError = 3,
    WGPUBufferMapAsyncStatus_Unknown = 4,
    WGPUBufferMapAsyncStatus_DeviceLost = 5,
    WGPUBufferMapAsyncStatus_DestroyedBeforeCallback = 6,
    WGPUBufferMapAsyncStatus_UnmappedBeforeCallback = 7,
    WGPUBufferMapAsyncStatus_MappingAlreadyPending = 8,
    WGPUBufferMapAsyncStatus_OffsetOutOfRange = 9,
    WGPUBufferMapAsyncStatus_SizeOutOfRange = 10,
    WGPUBufferMapAsyncStatus_Force32 = 2147483647);
  PWGPUBufferMapAsyncStatus = ^WGPUBufferMapAsyncStatus;

  WGPUBufferMapState = (
    WGPUBufferMapState_Unmapped = 1,
    WGPUBufferMapState_Pending = 2,
    WGPUBufferMapState_Mapped = 3,
    WGPUBufferMapState_Force32 = 2147483647);
  PWGPUBufferMapState = ^WGPUBufferMapState;

  WGPUCallbackMode = (
    WGPUCallbackMode_WaitAnyOnly = 1,
    WGPUCallbackMode_AllowProcessEvents = 2,
    WGPUCallbackMode_AllowSpontaneous = 3,
    WGPUCallbackMode_Force32 = 2147483647);
  PWGPUCallbackMode = ^WGPUCallbackMode;

  WGPUCompareFunction = (
    WGPUCompareFunction_Undefined = 0,
    WGPUCompareFunction_Never = 1,
    WGPUCompareFunction_Less = 2,
    WGPUCompareFunction_Equal = 3,
    WGPUCompareFunction_LessEqual = 4,
    WGPUCompareFunction_Greater = 5,
    WGPUCompareFunction_NotEqual = 6,
    WGPUCompareFunction_GreaterEqual = 7,
    WGPUCompareFunction_Always = 8,
    WGPUCompareFunction_Force32 = 2147483647);
  PWGPUCompareFunction = ^WGPUCompareFunction;

  WGPUCompilationInfoRequestStatus = (
    WGPUCompilationInfoRequestStatus_Success = 1,
    WGPUCompilationInfoRequestStatus_InstanceDropped = 2,
    WGPUCompilationInfoRequestStatus_Error = 3,
    WGPUCompilationInfoRequestStatus_DeviceLost = 4,
    WGPUCompilationInfoRequestStatus_Unknown = 5,
    WGPUCompilationInfoRequestStatus_Force32 = 2147483647);
  PWGPUCompilationInfoRequestStatus = ^WGPUCompilationInfoRequestStatus;

  WGPUCompilationMessageType = (
    WGPUCompilationMessageType_Error = 1,
    WGPUCompilationMessageType_Warning = 2,
    WGPUCompilationMessageType_Info = 3,
    WGPUCompilationMessageType_Force32 = 2147483647);
  PWGPUCompilationMessageType = ^WGPUCompilationMessageType;

  WGPUCompositeAlphaMode = (
    WGPUCompositeAlphaMode_Auto = 0,
    WGPUCompositeAlphaMode_Opaque = 1,
    WGPUCompositeAlphaMode_Premultiplied = 2,
    WGPUCompositeAlphaMode_Unpremultiplied = 3,
    WGPUCompositeAlphaMode_Inherit = 4,
    WGPUCompositeAlphaMode_Force32 = 2147483647);
  PWGPUCompositeAlphaMode = ^WGPUCompositeAlphaMode;

  WGPUCreatePipelineAsyncStatus = (
    WGPUCreatePipelineAsyncStatus_Success = 1,
    WGPUCreatePipelineAsyncStatus_InstanceDropped = 2,
    WGPUCreatePipelineAsyncStatus_ValidationError = 3,
    WGPUCreatePipelineAsyncStatus_InternalError = 4,
    WGPUCreatePipelineAsyncStatus_DeviceLost = 5,
    WGPUCreatePipelineAsyncStatus_DeviceDestroyed = 6,
    WGPUCreatePipelineAsyncStatus_Unknown = 7,
    WGPUCreatePipelineAsyncStatus_Force32 = 2147483647);
  PWGPUCreatePipelineAsyncStatus = ^WGPUCreatePipelineAsyncStatus;

  WGPUCullMode = (
    WGPUCullMode_Undefined = 0,
    WGPUCullMode_None = 1,
    WGPUCullMode_Front = 2,
    WGPUCullMode_Back = 3,
    WGPUCullMode_Force32 = 2147483647);
  PWGPUCullMode = ^WGPUCullMode;

  WGPUDeviceLostReason = (
    WGPUDeviceLostReason_Unknown = 1,
    WGPUDeviceLostReason_Destroyed = 2,
    WGPUDeviceLostReason_InstanceDropped = 3,
    WGPUDeviceLostReason_FailedCreation = 4,
    WGPUDeviceLostReason_Force32 = 2147483647);
  PWGPUDeviceLostReason = ^WGPUDeviceLostReason;

  WGPUErrorFilter = (
    WGPUErrorFilter_Validation = 1,
    WGPUErrorFilter_OutOfMemory = 2,
    WGPUErrorFilter_Internal = 3,
    WGPUErrorFilter_Force32 = 2147483647);
  PWGPUErrorFilter = ^WGPUErrorFilter;

  WGPUErrorType = (
    WGPUErrorType_NoError = 1,
    WGPUErrorType_Validation = 2,
    WGPUErrorType_OutOfMemory = 3,
    WGPUErrorType_Internal = 4,
    WGPUErrorType_Unknown = 5,
    WGPUErrorType_DeviceLost = 6,
    WGPUErrorType_Force32 = 2147483647);
  PWGPUErrorType = ^WGPUErrorType;

  WGPUExternalTextureRotation = (
    WGPUExternalTextureRotation_Rotate0Degrees = 1,
    WGPUExternalTextureRotation_Rotate90Degrees = 2,
    WGPUExternalTextureRotation_Rotate180Degrees = 3,
    WGPUExternalTextureRotation_Rotate270Degrees = 4,
    WGPUExternalTextureRotation_Force32 = 2147483647);
  PWGPUExternalTextureRotation = ^WGPUExternalTextureRotation;

  WGPUFeatureName = (
    WGPUFeatureName_DepthClipControl = 1,
    WGPUFeatureName_Depth32FloatStencil8 = 2,
    WGPUFeatureName_TimestampQuery = 3,
    WGPUFeatureName_TextureCompressionBC = 4,
    WGPUFeatureName_TextureCompressionETC2 = 5,
    WGPUFeatureName_TextureCompressionASTC = 6,
    WGPUFeatureName_IndirectFirstInstance = 7,
    WGPUFeatureName_ShaderF16 = 8,
    WGPUFeatureName_RG11B10UfloatRenderable = 9,
    WGPUFeatureName_BGRA8UnormStorage = 10,
    WGPUFeatureName_Float32Filterable = 11,
    WGPUFeatureName_Subgroups = 12,
    WGPUFeatureName_SubgroupsF16 = 13,
    WGPUFeatureName_DawnInternalUsages = 327680,
    WGPUFeatureName_DawnMultiPlanarFormats = 327681,
    WGPUFeatureName_DawnNative = 327682,
    WGPUFeatureName_ChromiumExperimentalTimestampQueryInsidePasses = 327683,
    WGPUFeatureName_ImplicitDeviceSynchronization = 327684,
    WGPUFeatureName_SurfaceCapabilities = 327685,
    WGPUFeatureName_TransientAttachments = 327686,
    WGPUFeatureName_MSAARenderToSingleSampled = 327687,
    WGPUFeatureName_DualSourceBlending = 327688,
    WGPUFeatureName_D3D11MultithreadProtected = 327689,
    WGPUFeatureName_ANGLETextureSharing = 327690,
    WGPUFeatureName_ChromiumExperimentalSubgroups = 327691,
    WGPUFeatureName_ChromiumExperimentalSubgroupUniformControlFlow = 327692,
    WGPUFeatureName_PixelLocalStorageCoherent = 327693,
    WGPUFeatureName_PixelLocalStorageNonCoherent = 327694,
    WGPUFeatureName_Unorm16TextureFormats = 327695,
    WGPUFeatureName_Snorm16TextureFormats = 327696,
    WGPUFeatureName_MultiPlanarFormatExtendedUsages = 327697,
    WGPUFeatureName_MultiPlanarFormatP010 = 327698,
    WGPUFeatureName_HostMappedPointer = 327699,
    WGPUFeatureName_MultiPlanarRenderTargets = 327700,
    WGPUFeatureName_MultiPlanarFormatNv12a = 327701,
    WGPUFeatureName_FramebufferFetch = 327702,
    WGPUFeatureName_BufferMapExtendedUsages = 327703,
    WGPUFeatureName_AdapterPropertiesMemoryHeaps = 327704,
    WGPUFeatureName_AdapterPropertiesD3D = 327705,
    WGPUFeatureName_AdapterPropertiesVk = 327706,
    WGPUFeatureName_R8UnormStorage = 327707,
    WGPUFeatureName_FormatCapabilities = 327708,
    WGPUFeatureName_DrmFormatCapabilities = 327709,
    WGPUFeatureName_Norm16TextureFormats = 327710,
    WGPUFeatureName_MultiPlanarFormatNv16 = 327711,
    WGPUFeatureName_MultiPlanarFormatNv24 = 327712,
    WGPUFeatureName_MultiPlanarFormatP210 = 327713,
    WGPUFeatureName_MultiPlanarFormatP410 = 327714,
    WGPUFeatureName_SharedTextureMemoryVkDedicatedAllocation = 327715,
    WGPUFeatureName_SharedTextureMemoryAHardwareBuffer = 327716,
    WGPUFeatureName_SharedTextureMemoryDmaBuf = 327717,
    WGPUFeatureName_SharedTextureMemoryOpaqueFD = 327718,
    WGPUFeatureName_SharedTextureMemoryZirconHandle = 327719,
    WGPUFeatureName_SharedTextureMemoryDXGISharedHandle = 327720,
    WGPUFeatureName_SharedTextureMemoryD3D11Texture2D = 327721,
    WGPUFeatureName_SharedTextureMemoryIOSurface = 327722,
    WGPUFeatureName_SharedTextureMemoryEGLImage = 327723,
    WGPUFeatureName_SharedFenceVkSemaphoreOpaqueFD = 327724,
    WGPUFeatureName_SharedFenceVkSemaphoreSyncFD = 327725,
    WGPUFeatureName_SharedFenceVkSemaphoreZirconHandle = 327726,
    WGPUFeatureName_SharedFenceDXGISharedHandle = 327727,
    WGPUFeatureName_SharedFenceMTLSharedEvent = 327728,
    WGPUFeatureName_SharedBufferMemoryD3D12Resource = 327729,
    WGPUFeatureName_StaticSamplers = 327730,
    WGPUFeatureName_YCbCrVulkanSamplers = 327731,
    WGPUFeatureName_ShaderModuleCompilationOptions = 327732,
    WGPUFeatureName_DawnLoadResolveTexture = 327733,
    WGPUFeatureName_DawnPartialLoadResolveTexture = 327734,
    WGPUFeatureName_MultiDrawIndirect = 327735,
    WGPUFeatureName_ClipDistances = 327736,
    WGPUFeatureName_Force32 = 2147483647);
  PWGPUFeatureName = ^WGPUFeatureName;

  WGPUFilterMode = (
    WGPUFilterMode_Undefined = 0,
    WGPUFilterMode_Nearest = 1,
    WGPUFilterMode_Linear = 2,
    WGPUFilterMode_Force32 = 2147483647);
  PWGPUFilterMode = ^WGPUFilterMode;

  WGPUFrontFace = (
    WGPUFrontFace_Undefined = 0,
    WGPUFrontFace_CCW = 1,
    WGPUFrontFace_CW = 2,
    WGPUFrontFace_Force32 = 2147483647);
  PWGPUFrontFace = ^WGPUFrontFace;

  WGPUIndexFormat = (
    WGPUIndexFormat_Undefined = 0,
    WGPUIndexFormat_Uint16 = 1,
    WGPUIndexFormat_Uint32 = 2,
    WGPUIndexFormat_Force32 = 2147483647);
  PWGPUIndexFormat = ^WGPUIndexFormat;

  WGPULoadOp = (
    WGPULoadOp_Undefined = 0,
    WGPULoadOp_Load = 1,
    WGPULoadOp_Clear = 2,
    WGPULoadOp_ExpandResolveTexture = 327683,
    WGPULoadOp_Force32 = 2147483647);
  PWGPULoadOp = ^WGPULoadOp;

  WGPULoggingType = (
    WGPULoggingType_Verbose = 1,
    WGPULoggingType_Info = 2,
    WGPULoggingType_Warning = 3,
    WGPULoggingType_Error = 4,
    WGPULoggingType_Force32 = 2147483647);
  PWGPULoggingType = ^WGPULoggingType;

  WGPUMapAsyncStatus = (
    WGPUMapAsyncStatus_Success = 1,
    WGPUMapAsyncStatus_InstanceDropped = 2,
    WGPUMapAsyncStatus_Error = 3,
    WGPUMapAsyncStatus_Aborted = 4,
    WGPUMapAsyncStatus_Unknown = 5,
    WGPUMapAsyncStatus_Force32 = 2147483647);
  PWGPUMapAsyncStatus = ^WGPUMapAsyncStatus;

  WGPUMipmapFilterMode = (
    WGPUMipmapFilterMode_Undefined = 0,
    WGPUMipmapFilterMode_Nearest = 1,
    WGPUMipmapFilterMode_Linear = 2,
    WGPUMipmapFilterMode_Force32 = 2147483647);
  PWGPUMipmapFilterMode = ^WGPUMipmapFilterMode;

  WGPUOptionalBool = (
    WGPUOptionalBool_False = 0,
    WGPUOptionalBool_True = 1,
    WGPUOptionalBool_Undefined = 2,
    WGPUOptionalBool_Force32 = 2147483647);
  PWGPUOptionalBool = ^WGPUOptionalBool;

  WGPUPopErrorScopeStatus = (
    WGPUPopErrorScopeStatus_Success = 1,
    WGPUPopErrorScopeStatus_InstanceDropped = 2,
    WGPUPopErrorScopeStatus_Force32 = 2147483647);
  PWGPUPopErrorScopeStatus = ^WGPUPopErrorScopeStatus;

  WGPUPowerPreference = (
    WGPUPowerPreference_Undefined = 0,
    WGPUPowerPreference_LowPower = 1,
    WGPUPowerPreference_HighPerformance = 2,
    WGPUPowerPreference_Force32 = 2147483647);
  PWGPUPowerPreference = ^WGPUPowerPreference;

  WGPUPresentMode = (
    WGPUPresentMode_Fifo = 1,
    WGPUPresentMode_FifoRelaxed = 2,
    WGPUPresentMode_Immediate = 3,
    WGPUPresentMode_Mailbox = 4,
    WGPUPresentMode_Force32 = 2147483647);
  PWGPUPresentMode = ^WGPUPresentMode;

  WGPUPrimitiveTopology = (
    WGPUPrimitiveTopology_Undefined = 0,
    WGPUPrimitiveTopology_PointList = 1,
    WGPUPrimitiveTopology_LineList = 2,
    WGPUPrimitiveTopology_LineStrip = 3,
    WGPUPrimitiveTopology_TriangleList = 4,
    WGPUPrimitiveTopology_TriangleStrip = 5,
    WGPUPrimitiveTopology_Force32 = 2147483647);
  PWGPUPrimitiveTopology = ^WGPUPrimitiveTopology;

  WGPUQueryType = (
    WGPUQueryType_Occlusion = 1,
    WGPUQueryType_Timestamp = 2,
    WGPUQueryType_Force32 = 2147483647);
  PWGPUQueryType = ^WGPUQueryType;

  WGPUQueueWorkDoneStatus = (
    WGPUQueueWorkDoneStatus_Success = 1,
    WGPUQueueWorkDoneStatus_InstanceDropped = 2,
    WGPUQueueWorkDoneStatus_Error = 3,
    WGPUQueueWorkDoneStatus_Unknown = 4,
    WGPUQueueWorkDoneStatus_DeviceLost = 5,
    WGPUQueueWorkDoneStatus_Force32 = 2147483647);
  PWGPUQueueWorkDoneStatus = ^WGPUQueueWorkDoneStatus;

  WGPURequestAdapterStatus = (
    WGPURequestAdapterStatus_Success = 1,
    WGPURequestAdapterStatus_InstanceDropped = 2,
    WGPURequestAdapterStatus_Unavailable = 3,
    WGPURequestAdapterStatus_Error = 4,
    WGPURequestAdapterStatus_Unknown = 5,
    WGPURequestAdapterStatus_Force32 = 2147483647);
  PWGPURequestAdapterStatus = ^WGPURequestAdapterStatus;

  WGPURequestDeviceStatus = (
    WGPURequestDeviceStatus_Success = 1,
    WGPURequestDeviceStatus_InstanceDropped = 2,
    WGPURequestDeviceStatus_Error = 3,
    WGPURequestDeviceStatus_Unknown = 4,
    WGPURequestDeviceStatus_Force32 = 2147483647);
  PWGPURequestDeviceStatus = ^WGPURequestDeviceStatus;

  WGPUSType = (
    WGPUSType_ShaderSourceSPIRV = 1,
    WGPUSType_ShaderSourceWGSL = 2,
    WGPUSType_RenderPassMaxDrawCount = 3,
    WGPUSType_SurfaceSourceMetalLayer = 4,
    WGPUSType_SurfaceSourceWindowsHWND = 5,
    WGPUSType_SurfaceSourceXlibWindow = 6,
    WGPUSType_SurfaceSourceWaylandSurface = 7,
    WGPUSType_SurfaceSourceAndroidNativeWindow = 8,
    WGPUSType_SurfaceSourceXCBWindow = 9,
    WGPUSType_TextureBindingViewDimensionDescriptor = 131072,
    WGPUSType_SurfaceSourceCanvasHTMLSelector_Emscripten = 262144,
    WGPUSType_SurfaceDescriptorFromWindowsCoreWindow = 327680,
    WGPUSType_ExternalTextureBindingEntry = 327681,
    WGPUSType_ExternalTextureBindingLayout = 327682,
    WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel = 327683,
    WGPUSType_DawnTextureInternalUsageDescriptor = 327684,
    WGPUSType_DawnEncoderInternalUsageDescriptor = 327685,
    WGPUSType_DawnInstanceDescriptor = 327686,
    WGPUSType_DawnCacheDeviceDescriptor = 327687,
    WGPUSType_DawnAdapterPropertiesPowerPreference = 327688,
    WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient = 327689,
    WGPUSType_DawnTogglesDescriptor = 327690,
    WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor = 327691,
    WGPUSType_RequestAdapterOptionsLUID = 327692,
    WGPUSType_RequestAdapterOptionsGetGLProc = 327693,
    WGPUSType_RequestAdapterOptionsD3D11Device = 327694,
    WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled = 327695,
    WGPUSType_RenderPassPixelLocalStorage = 327696,
    WGPUSType_PipelineLayoutPixelLocalStorage = 327697,
    WGPUSType_BufferHostMappedPointer = 327698,
    WGPUSType_DawnExperimentalSubgroupLimits = 327699,
    WGPUSType_AdapterPropertiesMemoryHeaps = 327700,
    WGPUSType_AdapterPropertiesD3D = 327701,
    WGPUSType_AdapterPropertiesVk = 327702,
    WGPUSType_DawnComputePipelineFullSubgroups = 327703,
    WGPUSType_DawnWireWGSLControl = 327704,
    WGPUSType_DawnWGSLBlocklist = 327705,
    WGPUSType_DrmFormatCapabilities = 327706,
    WGPUSType_ShaderModuleCompilationOptions = 327707,
    WGPUSType_ColorTargetStateExpandResolveTextureDawn = 327708,
    WGPUSType_RenderPassDescriptorExpandResolveRect = 327709,
    WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor = 327710,
    WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor = 327711,
    WGPUSType_SharedTextureMemoryDmaBufDescriptor = 327712,
    WGPUSType_SharedTextureMemoryOpaqueFDDescriptor = 327713,
    WGPUSType_SharedTextureMemoryZirconHandleDescriptor = 327714,
    WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor = 327715,
    WGPUSType_SharedTextureMemoryD3D11Texture2DDescriptor = 327716,
    WGPUSType_SharedTextureMemoryIOSurfaceDescriptor = 327717,
    WGPUSType_SharedTextureMemoryEGLImageDescriptor = 327718,
    WGPUSType_SharedTextureMemoryInitializedBeginState = 327719,
    WGPUSType_SharedTextureMemoryInitializedEndState = 327720,
    WGPUSType_SharedTextureMemoryVkImageLayoutBeginState = 327721,
    WGPUSType_SharedTextureMemoryVkImageLayoutEndState = 327722,
    WGPUSType_SharedTextureMemoryD3DSwapchainBeginState = 327723,
    WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor = 327724,
    WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo = 327725,
    WGPUSType_SharedFenceVkSemaphoreSyncFDDescriptor = 327726,
    WGPUSType_SharedFenceVkSemaphoreSyncFDExportInfo = 327727,
    WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor = 327728,
    WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo = 327729,
    WGPUSType_SharedFenceDXGISharedHandleDescriptor = 327730,
    WGPUSType_SharedFenceDXGISharedHandleExportInfo = 327731,
    WGPUSType_SharedFenceMTLSharedEventDescriptor = 327732,
    WGPUSType_SharedFenceMTLSharedEventExportInfo = 327733,
    WGPUSType_SharedBufferMemoryD3D12ResourceDescriptor = 327734,
    WGPUSType_StaticSamplerBindingLayout = 327735,
    WGPUSType_YCbCrVkDescriptor = 327736,
    WGPUSType_SharedTextureMemoryAHardwareBufferProperties = 327737,
    WGPUSType_AHardwareBufferProperties = 327738,
    WGPUSType_Force32 = 2147483647);
  PWGPUSType = ^WGPUSType;

  WGPUSamplerBindingType = (
    WGPUSamplerBindingType_Undefined = 0,
    WGPUSamplerBindingType_Filtering = 1,
    WGPUSamplerBindingType_NonFiltering = 2,
    WGPUSamplerBindingType_Comparison = 3,
    WGPUSamplerBindingType_Force32 = 2147483647);
  PWGPUSamplerBindingType = ^WGPUSamplerBindingType;

  WGPUSharedFenceType = (
    WGPUSharedFenceType_VkSemaphoreOpaqueFD = 1,
    WGPUSharedFenceType_VkSemaphoreSyncFD = 2,
    WGPUSharedFenceType_VkSemaphoreZirconHandle = 3,
    WGPUSharedFenceType_DXGISharedHandle = 4,
    WGPUSharedFenceType_MTLSharedEvent = 5,
    WGPUSharedFenceType_Force32 = 2147483647);
  PWGPUSharedFenceType = ^WGPUSharedFenceType;

  WGPUStatus = (
    WGPUStatus_Success = 1,
    WGPUStatus_Error = 2,
    WGPUStatus_Force32 = 2147483647);
  PWGPUStatus = ^WGPUStatus;

  WGPUStencilOperation = (
    WGPUStencilOperation_Undefined = 0,
    WGPUStencilOperation_Keep = 1,
    WGPUStencilOperation_Zero = 2,
    WGPUStencilOperation_Replace = 3,
    WGPUStencilOperation_Invert = 4,
    WGPUStencilOperation_IncrementClamp = 5,
    WGPUStencilOperation_DecrementClamp = 6,
    WGPUStencilOperation_IncrementWrap = 7,
    WGPUStencilOperation_DecrementWrap = 8,
    WGPUStencilOperation_Force32 = 2147483647);
  PWGPUStencilOperation = ^WGPUStencilOperation;

  WGPUStorageTextureAccess = (
    WGPUStorageTextureAccess_Undefined = 0,
    WGPUStorageTextureAccess_WriteOnly = 1,
    WGPUStorageTextureAccess_ReadOnly = 2,
    WGPUStorageTextureAccess_ReadWrite = 3,
    WGPUStorageTextureAccess_Force32 = 2147483647);
  PWGPUStorageTextureAccess = ^WGPUStorageTextureAccess;

  WGPUStoreOp = (
    WGPUStoreOp_Undefined = 0,
    WGPUStoreOp_Store = 1,
    WGPUStoreOp_Discard = 2,
    WGPUStoreOp_Force32 = 2147483647);
  PWGPUStoreOp = ^WGPUStoreOp;

  WGPUSurfaceGetCurrentTextureStatus = (
    WGPUSurfaceGetCurrentTextureStatus_Success = 1,
    WGPUSurfaceGetCurrentTextureStatus_Timeout = 2,
    WGPUSurfaceGetCurrentTextureStatus_Outdated = 3,
    WGPUSurfaceGetCurrentTextureStatus_Lost = 4,
    WGPUSurfaceGetCurrentTextureStatus_OutOfMemory = 5,
    WGPUSurfaceGetCurrentTextureStatus_DeviceLost = 6,
    WGPUSurfaceGetCurrentTextureStatus_Error = 7,
    WGPUSurfaceGetCurrentTextureStatus_Force32 = 2147483647);
  PWGPUSurfaceGetCurrentTextureStatus = ^WGPUSurfaceGetCurrentTextureStatus;

  WGPUTextureAspect = (
    WGPUTextureAspect_Undefined = 0,
    WGPUTextureAspect_All = 1,
    WGPUTextureAspect_StencilOnly = 2,
    WGPUTextureAspect_DepthOnly = 3,
    WGPUTextureAspect_Plane0Only = 327680,
    WGPUTextureAspect_Plane1Only = 327681,
    WGPUTextureAspect_Plane2Only = 327682,
    WGPUTextureAspect_Force32 = 2147483647);
  PWGPUTextureAspect = ^WGPUTextureAspect;

  WGPUTextureDimension = (
    WGPUTextureDimension_Undefined = 0,
    WGPUTextureDimension_1D = 1,
    WGPUTextureDimension_2D = 2,
    WGPUTextureDimension_3D = 3,
    WGPUTextureDimension_Force32 = 2147483647);
  PWGPUTextureDimension = ^WGPUTextureDimension;

  WGPUTextureFormat = (
    WGPUTextureFormat_Undefined = 0,
    WGPUTextureFormat_R8Unorm = 1,
    WGPUTextureFormat_R8Snorm = 2,
    WGPUTextureFormat_R8Uint = 3,
    WGPUTextureFormat_R8Sint = 4,
    WGPUTextureFormat_R16Uint = 5,
    WGPUTextureFormat_R16Sint = 6,
    WGPUTextureFormat_R16Float = 7,
    WGPUTextureFormat_RG8Unorm = 8,
    WGPUTextureFormat_RG8Snorm = 9,
    WGPUTextureFormat_RG8Uint = 10,
    WGPUTextureFormat_RG8Sint = 11,
    WGPUTextureFormat_R32Float = 12,
    WGPUTextureFormat_R32Uint = 13,
    WGPUTextureFormat_R32Sint = 14,
    WGPUTextureFormat_RG16Uint = 15,
    WGPUTextureFormat_RG16Sint = 16,
    WGPUTextureFormat_RG16Float = 17,
    WGPUTextureFormat_RGBA8Unorm = 18,
    WGPUTextureFormat_RGBA8UnormSrgb = 19,
    WGPUTextureFormat_RGBA8Snorm = 20,
    WGPUTextureFormat_RGBA8Uint = 21,
    WGPUTextureFormat_RGBA8Sint = 22,
    WGPUTextureFormat_BGRA8Unorm = 23,
    WGPUTextureFormat_BGRA8UnormSrgb = 24,
    WGPUTextureFormat_RGB10A2Uint = 25,
    WGPUTextureFormat_RGB10A2Unorm = 26,
    WGPUTextureFormat_RG11B10Ufloat = 27,
    WGPUTextureFormat_RGB9E5Ufloat = 28,
    WGPUTextureFormat_RG32Float = 29,
    WGPUTextureFormat_RG32Uint = 30,
    WGPUTextureFormat_RG32Sint = 31,
    WGPUTextureFormat_RGBA16Uint = 32,
    WGPUTextureFormat_RGBA16Sint = 33,
    WGPUTextureFormat_RGBA16Float = 34,
    WGPUTextureFormat_RGBA32Float = 35,
    WGPUTextureFormat_RGBA32Uint = 36,
    WGPUTextureFormat_RGBA32Sint = 37,
    WGPUTextureFormat_Stencil8 = 38,
    WGPUTextureFormat_Depth16Unorm = 39,
    WGPUTextureFormat_Depth24Plus = 40,
    WGPUTextureFormat_Depth24PlusStencil8 = 41,
    WGPUTextureFormat_Depth32Float = 42,
    WGPUTextureFormat_Depth32FloatStencil8 = 43,
    WGPUTextureFormat_BC1RGBAUnorm = 44,
    WGPUTextureFormat_BC1RGBAUnormSrgb = 45,
    WGPUTextureFormat_BC2RGBAUnorm = 46,
    WGPUTextureFormat_BC2RGBAUnormSrgb = 47,
    WGPUTextureFormat_BC3RGBAUnorm = 48,
    WGPUTextureFormat_BC3RGBAUnormSrgb = 49,
    WGPUTextureFormat_BC4RUnorm = 50,
    WGPUTextureFormat_BC4RSnorm = 51,
    WGPUTextureFormat_BC5RGUnorm = 52,
    WGPUTextureFormat_BC5RGSnorm = 53,
    WGPUTextureFormat_BC6HRGBUfloat = 54,
    WGPUTextureFormat_BC6HRGBFloat = 55,
    WGPUTextureFormat_BC7RGBAUnorm = 56,
    WGPUTextureFormat_BC7RGBAUnormSrgb = 57,
    WGPUTextureFormat_ETC2RGB8Unorm = 58,
    WGPUTextureFormat_ETC2RGB8UnormSrgb = 59,
    WGPUTextureFormat_ETC2RGB8A1Unorm = 60,
    WGPUTextureFormat_ETC2RGB8A1UnormSrgb = 61,
    WGPUTextureFormat_ETC2RGBA8Unorm = 62,
    WGPUTextureFormat_ETC2RGBA8UnormSrgb = 63,
    WGPUTextureFormat_EACR11Unorm = 64,
    WGPUTextureFormat_EACR11Snorm = 65,
    WGPUTextureFormat_EACRG11Unorm = 66,
    WGPUTextureFormat_EACRG11Snorm = 67,
    WGPUTextureFormat_ASTC4x4Unorm = 68,
    WGPUTextureFormat_ASTC4x4UnormSrgb = 69,
    WGPUTextureFormat_ASTC5x4Unorm = 70,
    WGPUTextureFormat_ASTC5x4UnormSrgb = 71,
    WGPUTextureFormat_ASTC5x5Unorm = 72,
    WGPUTextureFormat_ASTC5x5UnormSrgb = 73,
    WGPUTextureFormat_ASTC6x5Unorm = 74,
    WGPUTextureFormat_ASTC6x5UnormSrgb = 75,
    WGPUTextureFormat_ASTC6x6Unorm = 76,
    WGPUTextureFormat_ASTC6x6UnormSrgb = 77,
    WGPUTextureFormat_ASTC8x5Unorm = 78,
    WGPUTextureFormat_ASTC8x5UnormSrgb = 79,
    WGPUTextureFormat_ASTC8x6Unorm = 80,
    WGPUTextureFormat_ASTC8x6UnormSrgb = 81,
    WGPUTextureFormat_ASTC8x8Unorm = 82,
    WGPUTextureFormat_ASTC8x8UnormSrgb = 83,
    WGPUTextureFormat_ASTC10x5Unorm = 84,
    WGPUTextureFormat_ASTC10x5UnormSrgb = 85,
    WGPUTextureFormat_ASTC10x6Unorm = 86,
    WGPUTextureFormat_ASTC10x6UnormSrgb = 87,
    WGPUTextureFormat_ASTC10x8Unorm = 88,
    WGPUTextureFormat_ASTC10x8UnormSrgb = 89,
    WGPUTextureFormat_ASTC10x10Unorm = 90,
    WGPUTextureFormat_ASTC10x10UnormSrgb = 91,
    WGPUTextureFormat_ASTC12x10Unorm = 92,
    WGPUTextureFormat_ASTC12x10UnormSrgb = 93,
    WGPUTextureFormat_ASTC12x12Unorm = 94,
    WGPUTextureFormat_ASTC12x12UnormSrgb = 95,
    WGPUTextureFormat_R16Unorm = 327680,
    WGPUTextureFormat_RG16Unorm = 327681,
    WGPUTextureFormat_RGBA16Unorm = 327682,
    WGPUTextureFormat_R16Snorm = 327683,
    WGPUTextureFormat_RG16Snorm = 327684,
    WGPUTextureFormat_RGBA16Snorm = 327685,
    WGPUTextureFormat_R8BG8Biplanar420Unorm = 327686,
    WGPUTextureFormat_R10X6BG10X6Biplanar420Unorm = 327687,
    WGPUTextureFormat_R8BG8A8Triplanar420Unorm = 327688,
    WGPUTextureFormat_R8BG8Biplanar422Unorm = 327689,
    WGPUTextureFormat_R8BG8Biplanar444Unorm = 327690,
    WGPUTextureFormat_R10X6BG10X6Biplanar422Unorm = 327691,
    WGPUTextureFormat_R10X6BG10X6Biplanar444Unorm = 327692,
    WGPUTextureFormat_External = 327693,
    WGPUTextureFormat_Force32 = 2147483647);
  PWGPUTextureFormat = ^WGPUTextureFormat;

  WGPUTextureSampleType = (
    WGPUTextureSampleType_Undefined = 0,
    WGPUTextureSampleType_Float = 1,
    WGPUTextureSampleType_UnfilterableFloat = 2,
    WGPUTextureSampleType_Depth = 3,
    WGPUTextureSampleType_Sint = 4,
    WGPUTextureSampleType_Uint = 5,
    WGPUTextureSampleType_Force32 = 2147483647);
  PWGPUTextureSampleType = ^WGPUTextureSampleType;

  WGPUTextureViewDimension = (
    WGPUTextureViewDimension_Undefined = 0,
    WGPUTextureViewDimension_1D = 1,
    WGPUTextureViewDimension_2D = 2,
    WGPUTextureViewDimension_2DArray = 3,
    WGPUTextureViewDimension_Cube = 4,
    WGPUTextureViewDimension_CubeArray = 5,
    WGPUTextureViewDimension_3D = 6,
    WGPUTextureViewDimension_Force32 = 2147483647);
  PWGPUTextureViewDimension = ^WGPUTextureViewDimension;

  WGPUVertexFormat = (
    WGPUVertexFormat_Uint8x2 = 1,
    WGPUVertexFormat_Uint8x4 = 2,
    WGPUVertexFormat_Sint8x2 = 3,
    WGPUVertexFormat_Sint8x4 = 4,
    WGPUVertexFormat_Unorm8x2 = 5,
    WGPUVertexFormat_Unorm8x4 = 6,
    WGPUVertexFormat_Snorm8x2 = 7,
    WGPUVertexFormat_Snorm8x4 = 8,
    WGPUVertexFormat_Uint16x2 = 9,
    WGPUVertexFormat_Uint16x4 = 10,
    WGPUVertexFormat_Sint16x2 = 11,
    WGPUVertexFormat_Sint16x4 = 12,
    WGPUVertexFormat_Unorm16x2 = 13,
    WGPUVertexFormat_Unorm16x4 = 14,
    WGPUVertexFormat_Snorm16x2 = 15,
    WGPUVertexFormat_Snorm16x4 = 16,
    WGPUVertexFormat_Float16x2 = 17,
    WGPUVertexFormat_Float16x4 = 18,
    WGPUVertexFormat_Float32 = 19,
    WGPUVertexFormat_Float32x2 = 20,
    WGPUVertexFormat_Float32x3 = 21,
    WGPUVertexFormat_Float32x4 = 22,
    WGPUVertexFormat_Uint32 = 23,
    WGPUVertexFormat_Uint32x2 = 24,
    WGPUVertexFormat_Uint32x3 = 25,
    WGPUVertexFormat_Uint32x4 = 26,
    WGPUVertexFormat_Sint32 = 27,
    WGPUVertexFormat_Sint32x2 = 28,
    WGPUVertexFormat_Sint32x3 = 29,
    WGPUVertexFormat_Sint32x4 = 30,
    WGPUVertexFormat_Unorm10_10_10_2 = 31,
    WGPUVertexFormat_Force32 = 2147483647);
  PWGPUVertexFormat = ^WGPUVertexFormat;

  WGPUVertexStepMode = (
    WGPUVertexStepMode_Undefined = 0,
    WGPUVertexStepMode_VertexBufferNotUsed = 1,
    WGPUVertexStepMode_Vertex = 2,
    WGPUVertexStepMode_Instance = 3,
    WGPUVertexStepMode_Force32 = 2147483647);
  PWGPUVertexStepMode = ^WGPUVertexStepMode;

  WGPUWaitStatus = (
    WGPUWaitStatus_Success = 1,
    WGPUWaitStatus_TimedOut = 2,
    WGPUWaitStatus_UnsupportedTimeout = 3,
    WGPUWaitStatus_UnsupportedCount = 4,
    WGPUWaitStatus_UnsupportedMixedSources = 5,
    WGPUWaitStatus_Unknown = 6,
    WGPUWaitStatus_Force32 = 2147483647);
  PWGPUWaitStatus = ^WGPUWaitStatus;
  WGPUBufferUsage = WGPUFlags;
  WGPUColorWriteMask = WGPUFlags;
  WGPUHeapProperty = WGPUFlags;
  WGPUMapMode = WGPUFlags;
  WGPUShaderStage = WGPUFlags;
  WGPUTextureUsage = WGPUFlags;

  WGPUBufferMapCallback = procedure(status: WGPUBufferMapAsyncStatus; userdata: Pointer); cdecl;

  WGPUCallback = procedure(userdata: Pointer); cdecl;

  WGPUCompilationInfoCallback = procedure(status: WGPUCompilationInfoRequestStatus; const compilationInfo: PWGPUCompilationInfo; userdata: Pointer); cdecl;

  WGPUCreateComputePipelineAsyncCallback = procedure(status: WGPUCreatePipelineAsyncStatus; pipeline: WGPUComputePipeline; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPUCreateRenderPipelineAsyncCallback = procedure(status: WGPUCreatePipelineAsyncStatus; pipeline: WGPURenderPipeline; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPUDawnLoadCacheDataFunction = function(const key: Pointer; keySize: NativeUInt; value: Pointer; valueSize: NativeUInt; userdata: Pointer): NativeUInt; cdecl;

  WGPUDawnStoreCacheDataFunction = procedure(const key: Pointer; keySize: NativeUInt; const value: Pointer; valueSize: NativeUInt; userdata: Pointer); cdecl;

  WGPUDeviceLostCallback = procedure(reason: WGPUDeviceLostReason; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPUDeviceLostCallbackNew = procedure(const device: PWGPUDevice; reason: WGPUDeviceLostReason; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPUErrorCallback = procedure(&type: WGPUErrorType; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPULoggingCallback = procedure(&type: WGPULoggingType; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPUPopErrorScopeCallback = procedure(status: WGPUPopErrorScopeStatus; &type: WGPUErrorType; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPUProc = procedure(); cdecl;

  WGPUQueueWorkDoneCallback = procedure(status: WGPUQueueWorkDoneStatus; userdata: Pointer); cdecl;

  WGPURequestAdapterCallback = procedure(status: WGPURequestAdapterStatus; adapter: WGPUAdapter; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPURequestDeviceCallback = procedure(status: WGPURequestDeviceStatus; device: WGPUDevice; const &message: PUTF8Char; userdata: Pointer); cdecl;

  WGPUBufferMapCallback2 = procedure(status: WGPUMapAsyncStatus; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPUCompilationInfoCallback2 = procedure(status: WGPUCompilationInfoRequestStatus; const compilationInfo: PWGPUCompilationInfo; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPUCreateComputePipelineAsyncCallback2 = procedure(status: WGPUCreatePipelineAsyncStatus; pipeline: WGPUComputePipeline; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPUCreateRenderPipelineAsyncCallback2 = procedure(status: WGPUCreatePipelineAsyncStatus; pipeline: WGPURenderPipeline; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPUDeviceLostCallback2 = procedure(const device: PWGPUDevice; reason: WGPUDeviceLostReason; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPUPopErrorScopeCallback2 = procedure(status: WGPUPopErrorScopeStatus; &type: WGPUErrorType; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPUQueueWorkDoneCallback2 = procedure(status: WGPUQueueWorkDoneStatus; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPURequestAdapterCallback2 = procedure(status: WGPURequestAdapterStatus; adapter: WGPUAdapter; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPURequestDeviceCallback2 = procedure(status: WGPURequestDeviceStatus; device: WGPUDevice; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPUUncapturedErrorCallback = procedure(const device: PWGPUDevice; &type: WGPUErrorType; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;

  WGPUChainedStruct = record
    next: PWGPUChainedStruct;
    sType: WGPUSType;
  end;

  WGPUChainedStructOut = record
    next: PWGPUChainedStructOut;
    sType: WGPUSType;
  end;

  WGPUBufferMapCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUBufferMapCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUCompilationInfoCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCompilationInfoCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUCreateComputePipelineAsyncCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCreateComputePipelineAsyncCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUCreateRenderPipelineAsyncCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCreateRenderPipelineAsyncCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUDeviceLostCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUDeviceLostCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUPopErrorScopeCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUPopErrorScopeCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUQueueWorkDoneCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUQueueWorkDoneCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPURequestAdapterCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPURequestAdapterCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPURequestDeviceCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPURequestDeviceCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUUncapturedErrorCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    callback: WGPUUncapturedErrorCallback;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER = record
  end;

  WGPUAdapterInfo = record
    nextInChain: PWGPUChainedStructOut;
    vendor: PUTF8Char;
    architecture: PUTF8Char;
    device: PUTF8Char;
    description: PUTF8Char;
    backendType: WGPUBackendType;
    adapterType: WGPUAdapterType;
    vendorID: UInt32;
    deviceID: UInt32;
    compatibilityMode: WGPUBool;
  end;

  WGPUAdapterProperties = record
    nextInChain: PWGPUChainedStructOut;
    vendorID: UInt32;
    vendorName: PUTF8Char;
    architecture: PUTF8Char;
    deviceID: UInt32;
    name: PUTF8Char;
    driverDescription: PUTF8Char;
    adapterType: WGPUAdapterType;
    backendType: WGPUBackendType;
    compatibilityMode: WGPUBool;
  end;

  WGPUAdapterPropertiesD3D = record
    chain: WGPUChainedStructOut;
    shaderModel: UInt32;
  end;

  WGPUAdapterPropertiesVk = record
    chain: WGPUChainedStructOut;
    driverVersion: UInt32;
  end;

  WGPUBindGroupEntry = record
    nextInChain: PWGPUChainedStruct;
    binding: UInt32;
    buffer: WGPUBuffer;
    offset: UInt64;
    size: UInt64;
    sampler: WGPUSampler;
    textureView: WGPUTextureView;
  end;

  WGPUBlendComponent = record
    operation: WGPUBlendOperation;
    srcFactor: WGPUBlendFactor;
    dstFactor: WGPUBlendFactor;
  end;

  WGPUBufferBindingLayout = record
    nextInChain: PWGPUChainedStruct;
    &type: WGPUBufferBindingType;
    hasDynamicOffset: WGPUBool;
    minBindingSize: UInt64;
  end;

  WGPUBufferDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    usage: WGPUBufferUsage;
    size: UInt64;
    mappedAtCreation: WGPUBool;
  end;

  WGPUBufferHostMappedPointer = record
    chain: WGPUChainedStruct;
    pointer: Pointer;
    disposeCallback: WGPUCallback;
    userdata: Pointer;
  end;

  WGPUBufferMapCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUBufferMapCallback;
    userdata: Pointer;
  end;

  WGPUColor = record
    r: Double;
    g: Double;
    b: Double;
    a: Double;
  end;

  WGPUColorTargetStateExpandResolveTextureDawn = record
    chain: WGPUChainedStruct;
    enabled: WGPUBool;
  end;

  WGPUCommandBufferDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUCommandEncoderDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUCompilationInfoCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCompilationInfoCallback;
    userdata: Pointer;
  end;

  WGPUCompilationMessage = record
    nextInChain: PWGPUChainedStruct;
    &message: PUTF8Char;
    &type: WGPUCompilationMessageType;
    lineNum: UInt64;
    linePos: UInt64;
    offset: UInt64;
    length: UInt64;
    utf16LinePos: UInt64;
    utf16Offset: UInt64;
    utf16Length: UInt64;
  end;

  WGPUComputePassTimestampWrites = record
    querySet: WGPUQuerySet;
    beginningOfPassWriteIndex: UInt32;
    endOfPassWriteIndex: UInt32;
  end;

  WGPUConstantEntry = record
    nextInChain: PWGPUChainedStruct;
    key: PUTF8Char;
    value: Double;
  end;

  WGPUCopyTextureForBrowserOptions = record
    nextInChain: PWGPUChainedStruct;
    flipY: WGPUBool;
    needsColorSpaceConversion: WGPUBool;
    srcAlphaMode: WGPUAlphaMode;
    srcTransferFunctionParameters: PSingle;
    conversionMatrix: PSingle;
    dstTransferFunctionParameters: PSingle;
    dstAlphaMode: WGPUAlphaMode;
    internalUsage: WGPUBool;
  end;

  WGPUCreateComputePipelineAsyncCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCreateComputePipelineAsyncCallback;
    userdata: Pointer;
  end;

  WGPUCreateRenderPipelineAsyncCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCreateRenderPipelineAsyncCallback;
    userdata: Pointer;
  end;

  WGPUDawnWGSLBlocklist = record
    chain: WGPUChainedStruct;
    blocklistedFeatureCount: NativeUInt;
    blocklistedFeatures: PPUTF8Char;
  end;

  WGPUDawnAdapterPropertiesPowerPreference = record
    chain: WGPUChainedStructOut;
    powerPreference: WGPUPowerPreference;
  end;

  WGPUDawnBufferDescriptorErrorInfoFromWireClient = record
    chain: WGPUChainedStruct;
    outOfMemory: WGPUBool;
  end;

  WGPUDawnCacheDeviceDescriptor = record
    chain: WGPUChainedStruct;
    isolationKey: PUTF8Char;
    loadDataFunction: WGPUDawnLoadCacheDataFunction;
    storeDataFunction: WGPUDawnStoreCacheDataFunction;
    functionUserdata: Pointer;
  end;

  WGPUDawnComputePipelineFullSubgroups = record
    chain: WGPUChainedStruct;
    requiresFullSubgroups: WGPUBool;
  end;

  WGPUDawnEncoderInternalUsageDescriptor = record
    chain: WGPUChainedStruct;
    useInternalUsages: WGPUBool;
  end;

  WGPUDawnExperimentalSubgroupLimits = record
    chain: WGPUChainedStructOut;
    minSubgroupSize: UInt32;
    maxSubgroupSize: UInt32;
  end;

  WGPUDawnRenderPassColorAttachmentRenderToSingleSampled = record
    chain: WGPUChainedStruct;
    implicitSampleCount: UInt32;
  end;

  WGPUDawnShaderModuleSPIRVOptionsDescriptor = record
    chain: WGPUChainedStruct;
    allowNonUniformDerivatives: WGPUBool;
  end;

  WGPUDawnTextureInternalUsageDescriptor = record
    chain: WGPUChainedStruct;
    internalUsage: WGPUTextureUsage;
  end;

  WGPUDawnTogglesDescriptor = record
    chain: WGPUChainedStruct;
    enabledToggleCount: NativeUInt;
    enabledToggles: PPUTF8Char;
    disabledToggleCount: NativeUInt;
    disabledToggles: PPUTF8Char;
  end;

  WGPUDawnWireWGSLControl = record
    chain: WGPUChainedStruct;
    enableExperimental: WGPUBool;
    enableUnsafe: WGPUBool;
    enableTesting: WGPUBool;
  end;

  WGPUDeviceLostCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUDeviceLostCallbackNew;
    userdata: Pointer;
  end;

  WGPUDrmFormatProperties = record
    modifier: UInt64;
    modifierPlaneCount: UInt32;
  end;

  WGPUExtent2D = record
    width: UInt32;
    height: UInt32;
  end;

  WGPUExtent3D = record
    width: UInt32;
    height: UInt32;
    depthOrArrayLayers: UInt32;
  end;

  WGPUExternalTextureBindingEntry = record
    chain: WGPUChainedStruct;
    externalTexture: WGPUExternalTexture;
  end;

  WGPUExternalTextureBindingLayout = record
    chain: WGPUChainedStruct;
  end;

  WGPUFormatCapabilities = record
    nextInChain: PWGPUChainedStructOut;
  end;

  WGPUFuture = record
    id: UInt64;
  end;

  WGPUInstanceFeatures = record
    nextInChain: PWGPUChainedStruct;
    timedWaitAnyEnable: WGPUBool;
    timedWaitAnyMaxCount: NativeUInt;
  end;

  WGPULimits = record
    maxTextureDimension1D: UInt32;
    maxTextureDimension2D: UInt32;
    maxTextureDimension3D: UInt32;
    maxTextureArrayLayers: UInt32;
    maxBindGroups: UInt32;
    maxBindGroupsPlusVertexBuffers: UInt32;
    maxBindingsPerBindGroup: UInt32;
    maxDynamicUniformBuffersPerPipelineLayout: UInt32;
    maxDynamicStorageBuffersPerPipelineLayout: UInt32;
    maxSampledTexturesPerShaderStage: UInt32;
    maxSamplersPerShaderStage: UInt32;
    maxStorageBuffersPerShaderStage: UInt32;
    maxStorageTexturesPerShaderStage: UInt32;
    maxUniformBuffersPerShaderStage: UInt32;
    maxUniformBufferBindingSize: UInt64;
    maxStorageBufferBindingSize: UInt64;
    minUniformBufferOffsetAlignment: UInt32;
    minStorageBufferOffsetAlignment: UInt32;
    maxVertexBuffers: UInt32;
    maxBufferSize: UInt64;
    maxVertexAttributes: UInt32;
    maxVertexBufferArrayStride: UInt32;
    maxInterStageShaderComponents: UInt32;
    maxInterStageShaderVariables: UInt32;
    maxColorAttachments: UInt32;
    maxColorAttachmentBytesPerSample: UInt32;
    maxComputeWorkgroupStorageSize: UInt32;
    maxComputeInvocationsPerWorkgroup: UInt32;
    maxComputeWorkgroupSizeX: UInt32;
    maxComputeWorkgroupSizeY: UInt32;
    maxComputeWorkgroupSizeZ: UInt32;
    maxComputeWorkgroupsPerDimension: UInt32;
  end;

  WGPUMemoryHeapInfo = record
    properties: WGPUHeapProperty;
    size: UInt64;
  end;

  WGPUMultisampleState = record
    nextInChain: PWGPUChainedStruct;
    count: UInt32;
    mask: UInt32;
    alphaToCoverageEnabled: WGPUBool;
  end;

  WGPUOrigin2D = record
    x: UInt32;
    y: UInt32;
  end;

  WGPUOrigin3D = record
    x: UInt32;
    y: UInt32;
    z: UInt32;
  end;

  WGPUPipelineLayoutDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    bindGroupLayoutCount: NativeUInt;
    bindGroupLayouts: PWGPUBindGroupLayout;
  end;

  WGPUPipelineLayoutStorageAttachment = record
    nextInChain: PWGPUChainedStruct;
    offset: UInt64;
    format: WGPUTextureFormat;
  end;

  WGPUPopErrorScopeCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUPopErrorScopeCallback;
    oldCallback: WGPUErrorCallback;
    userdata: Pointer;
  end;

  WGPUPrimitiveState = record
    nextInChain: PWGPUChainedStruct;
    topology: WGPUPrimitiveTopology;
    stripIndexFormat: WGPUIndexFormat;
    frontFace: WGPUFrontFace;
    cullMode: WGPUCullMode;
    unclippedDepth: WGPUBool;
  end;

  WGPUQuerySetDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    &type: WGPUQueryType;
    count: UInt32;
  end;

  WGPUQueueDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUQueueWorkDoneCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUQueueWorkDoneCallback;
    userdata: Pointer;
  end;

  WGPURenderBundleDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPURenderBundleEncoderDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    colorFormatCount: NativeUInt;
    colorFormats: PWGPUTextureFormat;
    depthStencilFormat: WGPUTextureFormat;
    sampleCount: UInt32;
    depthReadOnly: WGPUBool;
    stencilReadOnly: WGPUBool;
  end;

  WGPURenderPassDepthStencilAttachment = record
    view: WGPUTextureView;
    depthLoadOp: WGPULoadOp;
    depthStoreOp: WGPUStoreOp;
    depthClearValue: Single;
    depthReadOnly: WGPUBool;
    stencilLoadOp: WGPULoadOp;
    stencilStoreOp: WGPUStoreOp;
    stencilClearValue: UInt32;
    stencilReadOnly: WGPUBool;
  end;

  WGPURenderPassDescriptorExpandResolveRect = record
    chain: WGPUChainedStruct;
    x: UInt32;
    y: UInt32;
    width: UInt32;
    height: UInt32;
  end;

  WGPURenderPassMaxDrawCount = record
    chain: WGPUChainedStruct;
    maxDrawCount: UInt64;
  end;

  WGPURenderPassTimestampWrites = record
    querySet: WGPUQuerySet;
    beginningOfPassWriteIndex: UInt32;
    endOfPassWriteIndex: UInt32;
  end;

  WGPURequestAdapterCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPURequestAdapterCallback;
    userdata: Pointer;
  end;

  WGPURequestAdapterOptions = record
    nextInChain: PWGPUChainedStruct;
    compatibleSurface: WGPUSurface;
    powerPreference: WGPUPowerPreference;
    backendType: WGPUBackendType;
    forceFallbackAdapter: WGPUBool;
    compatibilityMode: WGPUBool;
  end;

  WGPURequestDeviceCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPURequestDeviceCallback;
    userdata: Pointer;
  end;

  WGPUSamplerBindingLayout = record
    nextInChain: PWGPUChainedStruct;
    &type: WGPUSamplerBindingType;
  end;

  WGPUSamplerDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    addressModeU: WGPUAddressMode;
    addressModeV: WGPUAddressMode;
    addressModeW: WGPUAddressMode;
    magFilter: WGPUFilterMode;
    minFilter: WGPUFilterMode;
    mipmapFilter: WGPUMipmapFilterMode;
    lodMinClamp: Single;
    lodMaxClamp: Single;
    compare: WGPUCompareFunction;
    maxAnisotropy: UInt16;
  end;

  WGPUShaderModuleCompilationOptions = record
    chain: WGPUChainedStruct;
    strictMath: WGPUBool;
  end;

  WGPUShaderModuleDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUShaderSourceSPIRV = record
    chain: WGPUChainedStruct;
    codeSize: UInt32;
    code: PUInt32;
  end;

  WGPUShaderSourceWGSL = record
    chain: WGPUChainedStruct;
    code: PUTF8Char;
  end;

  WGPUSharedBufferMemoryBeginAccessDescriptor = record
    nextInChain: PWGPUChainedStruct;
    initialized: WGPUBool;
    fenceCount: NativeUInt;
    fences: PWGPUSharedFence;
    signaledValues: PUInt64;
  end;

  WGPUSharedBufferMemoryDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUSharedBufferMemoryEndAccessState = record
    nextInChain: PWGPUChainedStructOut;
    initialized: WGPUBool;
    fenceCount: NativeUInt;
    fences: PWGPUSharedFence;
    signaledValues: PUInt64;
  end;

  WGPUSharedBufferMemoryProperties = record
    nextInChain: PWGPUChainedStructOut;
    usage: WGPUBufferUsage;
    size: UInt64;
  end;

  WGPUSharedFenceDXGISharedHandleDescriptor = record
    chain: WGPUChainedStruct;
    handle: Pointer;
  end;

  WGPUSharedFenceDXGISharedHandleExportInfo = record
    chain: WGPUChainedStructOut;
    handle: Pointer;
  end;

  WGPUSharedFenceMTLSharedEventDescriptor = record
    chain: WGPUChainedStruct;
    sharedEvent: Pointer;
  end;

  WGPUSharedFenceMTLSharedEventExportInfo = record
    chain: WGPUChainedStructOut;
    sharedEvent: Pointer;
  end;

  WGPUSharedFenceDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  TWGPUSharedFenceExportInfo = record
    nextInChain: PWGPUChainedStructOut;
    &type: WGPUSharedFenceType;
  end;

  WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor = record
    chain: WGPUChainedStruct;
    handle: Integer;
  end;

  WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo = record
    chain: WGPUChainedStructOut;
    handle: Integer;
  end;

  WGPUSharedFenceVkSemaphoreSyncFDDescriptor = record
    chain: WGPUChainedStruct;
    handle: Integer;
  end;

  WGPUSharedFenceVkSemaphoreSyncFDExportInfo = record
    chain: WGPUChainedStructOut;
    handle: Integer;
  end;

  WGPUSharedFenceVkSemaphoreZirconHandleDescriptor = record
    chain: WGPUChainedStruct;
    handle: UInt32;
  end;

  WGPUSharedFenceVkSemaphoreZirconHandleExportInfo = record
    chain: WGPUChainedStructOut;
    handle: UInt32;
  end;

  WGPUSharedTextureMemoryD3DSwapchainBeginState = record
    chain: WGPUChainedStruct;
    isSwapchain: WGPUBool;
  end;

  WGPUSharedTextureMemoryDXGISharedHandleDescriptor = record
    chain: WGPUChainedStruct;
    handle: Pointer;
    useKeyedMutex: WGPUBool;
  end;

  WGPUSharedTextureMemoryEGLImageDescriptor = record
    chain: WGPUChainedStruct;
    image: Pointer;
  end;

  WGPUSharedTextureMemoryIOSurfaceDescriptor = record
    chain: WGPUChainedStruct;
    ioSurface: Pointer;
  end;

  WGPUSharedTextureMemoryAHardwareBufferDescriptor = record
    chain: WGPUChainedStruct;
    handle: Pointer;
    useExternalFormat: WGPUBool;
  end;

  WGPUSharedTextureMemoryBeginAccessDescriptor = record
    nextInChain: PWGPUChainedStruct;
    concurrentRead: WGPUBool;
    initialized: WGPUBool;
    fenceCount: NativeUInt;
    fences: PWGPUSharedFence;
    signaledValues: PUInt64;
  end;

  WGPUSharedTextureMemoryDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUSharedTextureMemoryDmaBufPlane = record
    fd: Integer;
    offset: UInt64;
    stride: UInt32;
  end;

  WGPUSharedTextureMemoryEndAccessState = record
    nextInChain: PWGPUChainedStructOut;
    initialized: WGPUBool;
    fenceCount: NativeUInt;
    fences: PWGPUSharedFence;
    signaledValues: PUInt64;
  end;

  WGPUSharedTextureMemoryOpaqueFDDescriptor = record
    chain: WGPUChainedStruct;
    vkImageCreateInfo: Pointer;
    memoryFD: Integer;
    memoryTypeIndex: UInt32;
    allocationSize: UInt64;
    dedicatedAllocation: WGPUBool;
  end;

  WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor = record
    chain: WGPUChainedStruct;
    dedicatedAllocation: WGPUBool;
  end;

  WGPUSharedTextureMemoryVkImageLayoutBeginState = record
    chain: WGPUChainedStruct;
    oldLayout: Int32;
    newLayout: Int32;
  end;

  WGPUSharedTextureMemoryVkImageLayoutEndState = record
    chain: WGPUChainedStructOut;
    oldLayout: Int32;
    newLayout: Int32;
  end;

  WGPUSharedTextureMemoryZirconHandleDescriptor = record
    chain: WGPUChainedStruct;
    memoryFD: UInt32;
    allocationSize: UInt64;
  end;

  WGPUStaticSamplerBindingLayout = record
    chain: WGPUChainedStruct;
    sampler: WGPUSampler;
    sampledTextureBinding: UInt32;
  end;

  WGPUStencilFaceState = record
    compare: WGPUCompareFunction;
    failOp: WGPUStencilOperation;
    depthFailOp: WGPUStencilOperation;
    passOp: WGPUStencilOperation;
  end;

  WGPUStorageTextureBindingLayout = record
    nextInChain: PWGPUChainedStruct;
    access: WGPUStorageTextureAccess;
    format: WGPUTextureFormat;
    viewDimension: WGPUTextureViewDimension;
  end;

  WGPUStringView = record
    data: PUTF8Char;
    length: NativeUInt;
  end;

  WGPUSurfaceCapabilities = record
    nextInChain: PWGPUChainedStructOut;
    usages: WGPUTextureUsage;
    formatCount: NativeUInt;
    formats: PWGPUTextureFormat;
    presentModeCount: NativeUInt;
    presentModes: PWGPUPresentMode;
    alphaModeCount: NativeUInt;
    alphaModes: PWGPUCompositeAlphaMode;
  end;

  WGPUSurfaceConfiguration = record
    nextInChain: PWGPUChainedStruct;
    device: WGPUDevice;
    format: WGPUTextureFormat;
    usage: WGPUTextureUsage;
    viewFormatCount: NativeUInt;
    viewFormats: PWGPUTextureFormat;
    alphaMode: WGPUCompositeAlphaMode;
    width: UInt32;
    height: UInt32;
    presentMode: WGPUPresentMode;
  end;

  WGPUSurfaceDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUSurfaceDescriptorFromWindowsCoreWindow = record
    chain: WGPUChainedStruct;
    coreWindow: Pointer;
  end;

  WGPUSurfaceDescriptorFromWindowsSwapChainPanel = record
    chain: WGPUChainedStruct;
    swapChainPanel: Pointer;
  end;

  WGPUSurfaceSourceXCBWindow = record
    chain: WGPUChainedStruct;
    connection: Pointer;
    window: UInt32;
  end;

  WGPUSurfaceSourceAndroidNativeWindow = record
    chain: WGPUChainedStruct;
    window: Pointer;
  end;

  WGPUSurfaceSourceCanvasHTMLSelector_Emscripten = record
    chain: WGPUChainedStruct;
    selector: PUTF8Char;
  end;

  WGPUSurfaceSourceMetalLayer = record
    chain: WGPUChainedStruct;
    layer: Pointer;
  end;

  WGPUSurfaceSourceWaylandSurface = record
    chain: WGPUChainedStruct;
    display: Pointer;
    surface: Pointer;
  end;

  WGPUSurfaceSourceWindowsHWND = record
    chain: WGPUChainedStruct;
    hinstance: Pointer;
    hwnd: Pointer;
  end;

  WGPUSurfaceSourceXlibWindow = record
    chain: WGPUChainedStruct;
    display: Pointer;
    window: UInt64;
  end;

  WGPUSurfaceTexture = record
    texture: WGPUTexture;
    suboptimal: WGPUBool;
    status: WGPUSurfaceGetCurrentTextureStatus;
  end;

  WGPUSwapChainDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    usage: WGPUTextureUsage;
    format: WGPUTextureFormat;
    width: UInt32;
    height: UInt32;
    presentMode: WGPUPresentMode;
  end;

  WGPUTextureBindingLayout = record
    nextInChain: PWGPUChainedStruct;
    sampleType: WGPUTextureSampleType;
    viewDimension: WGPUTextureViewDimension;
    multisampled: WGPUBool;
  end;

  WGPUTextureBindingViewDimensionDescriptor = record
    chain: WGPUChainedStruct;
    textureBindingViewDimension: WGPUTextureViewDimension;
  end;

  WGPUTextureDataLayout = record
    nextInChain: PWGPUChainedStruct;
    offset: UInt64;
    bytesPerRow: UInt32;
    rowsPerImage: UInt32;
  end;

  WGPUTextureViewDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    format: WGPUTextureFormat;
    dimension: WGPUTextureViewDimension;
    baseMipLevel: UInt32;
    mipLevelCount: UInt32;
    baseArrayLayer: UInt32;
    arrayLayerCount: UInt32;
    aspect: WGPUTextureAspect;
  end;

  WGPUUncapturedErrorCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    callback: WGPUErrorCallback;
    userdata: Pointer;
  end;

  WGPUVertexAttribute = record
    format: WGPUVertexFormat;
    offset: UInt64;
    shaderLocation: UInt32;
  end;

  WGPUYCbCrVkDescriptor = record
    chain: WGPUChainedStruct;
    vkFormat: UInt32;
    vkYCbCrModel: UInt32;
    vkYCbCrRange: UInt32;
    vkComponentSwizzleRed: UInt32;
    vkComponentSwizzleGreen: UInt32;
    vkComponentSwizzleBlue: UInt32;
    vkComponentSwizzleAlpha: UInt32;
    vkXChromaOffset: UInt32;
    vkYChromaOffset: UInt32;
    vkChromaFilter: WGPUFilterMode;
    forceExplicitReconstruction: WGPUBool;
    externalFormat: UInt64;
  end;

  WGPUAHardwareBufferProperties = record
    yCbCrInfo: WGPUYCbCrVkDescriptor;
  end;

  WGPUAdapterPropertiesMemoryHeaps = record
    chain: WGPUChainedStructOut;
    heapCount: NativeUInt;
    heapInfo: PWGPUMemoryHeapInfo;
  end;

  WGPUBindGroupDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    layout: WGPUBindGroupLayout;
    entryCount: NativeUInt;
    entries: PWGPUBindGroupEntry;
  end;

  WGPUBindGroupLayoutEntry = record
    nextInChain: PWGPUChainedStruct;
    binding: UInt32;
    visibility: WGPUShaderStage;
    buffer: WGPUBufferBindingLayout;
    sampler: WGPUSamplerBindingLayout;
    texture: WGPUTextureBindingLayout;
    storageTexture: WGPUStorageTextureBindingLayout;
  end;

  WGPUBlendState = record
    color: WGPUBlendComponent;
    alpha: WGPUBlendComponent;
  end;

  WGPUCompilationInfo = record
    nextInChain: PWGPUChainedStruct;
    messageCount: NativeUInt;
    messages: PWGPUCompilationMessage;
  end;

  WGPUComputePassDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    timestampWrites: PWGPUComputePassTimestampWrites;
  end;

  WGPUDepthStencilState = record
    nextInChain: PWGPUChainedStruct;
    format: WGPUTextureFormat;
    depthWriteEnabled: WGPUOptionalBool;
    depthCompare: WGPUCompareFunction;
    stencilFront: WGPUStencilFaceState;
    stencilBack: WGPUStencilFaceState;
    stencilReadMask: UInt32;
    stencilWriteMask: UInt32;
    depthBias: Int32;
    depthBiasSlopeScale: Single;
    depthBiasClamp: Single;
  end;

  WGPUDrmFormatCapabilities = record
    chain: WGPUChainedStructOut;
    propertiesCount: NativeUInt;
    properties: PWGPUDrmFormatProperties;
  end;

  WGPUExternalTextureDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    plane0: WGPUTextureView;
    plane1: WGPUTextureView;
    visibleOrigin: WGPUOrigin2D;
    visibleSize: WGPUExtent2D;
    doYuvToRgbConversionOnly: WGPUBool;
    yuvToRgbConversionMatrix: PSingle;
    srcTransferFunctionParameters: PSingle;
    dstTransferFunctionParameters: PSingle;
    gamutConversionMatrix: PSingle;
    mirrored: WGPUBool;
    rotation: WGPUExternalTextureRotation;
  end;

  WGPUFutureWaitInfo = record
    future: WGPUFuture;
    completed: WGPUBool;
  end;

  WGPUImageCopyBuffer = record
    layout: WGPUTextureDataLayout;
    buffer: WGPUBuffer;
  end;

  WGPUImageCopyExternalTexture = record
    nextInChain: PWGPUChainedStruct;
    externalTexture: WGPUExternalTexture;
    origin: WGPUOrigin3D;
    naturalSize: WGPUExtent2D;
  end;

  WGPUImageCopyTexture = record
    texture: WGPUTexture;
    mipLevel: UInt32;
    origin: WGPUOrigin3D;
    aspect: WGPUTextureAspect;
  end;

  WGPUInstanceDescriptor = record
    nextInChain: PWGPUChainedStruct;
    features: WGPUInstanceFeatures;
  end;

  WGPUPipelineLayoutPixelLocalStorage = record
    chain: WGPUChainedStruct;
    totalPixelLocalStorageSize: UInt64;
    storageAttachmentCount: NativeUInt;
    storageAttachments: PWGPUPipelineLayoutStorageAttachment;
  end;

  WGPUProgrammableStageDescriptor = record
    nextInChain: PWGPUChainedStruct;
    module: WGPUShaderModule;
    entryPoint: PUTF8Char;
    constantCount: NativeUInt;
    constants: PWGPUConstantEntry;
  end;

  WGPURenderPassColorAttachment = record
    nextInChain: PWGPUChainedStruct;
    view: WGPUTextureView;
    depthSlice: UInt32;
    resolveTarget: WGPUTextureView;
    loadOp: WGPULoadOp;
    storeOp: WGPUStoreOp;
    clearValue: WGPUColor;
  end;

  WGPURenderPassStorageAttachment = record
    nextInChain: PWGPUChainedStruct;
    offset: UInt64;
    storage: WGPUTextureView;
    loadOp: WGPULoadOp;
    storeOp: WGPUStoreOp;
    clearValue: WGPUColor;
  end;

  WGPURequiredLimits = record
    nextInChain: PWGPUChainedStruct;
    limits: WGPULimits;
  end;

  WGPUSharedTextureMemoryAHardwareBufferProperties = record
    chain: WGPUChainedStructOut;
    yCbCrInfo: WGPUYCbCrVkDescriptor;
  end;

  WGPUSharedTextureMemoryDmaBufDescriptor = record
    chain: WGPUChainedStruct;
    size: WGPUExtent3D;
    drmFormat: UInt32;
    drmModifier: UInt64;
    planeCount: NativeUInt;
    planes: PWGPUSharedTextureMemoryDmaBufPlane;
  end;

  WGPUSharedTextureMemoryProperties = record
    nextInChain: PWGPUChainedStructOut;
    usage: WGPUTextureUsage;
    size: WGPUExtent3D;
    format: WGPUTextureFormat;
  end;

  WGPUSupportedLimits = record
    nextInChain: PWGPUChainedStructOut;
    limits: WGPULimits;
  end;

  WGPUTextureDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    usage: WGPUTextureUsage;
    dimension: WGPUTextureDimension;
    size: WGPUExtent3D;
    format: WGPUTextureFormat;
    mipLevelCount: UInt32;
    sampleCount: UInt32;
    viewFormatCount: NativeUInt;
    viewFormats: PWGPUTextureFormat;
  end;

  WGPUVertexBufferLayout = record
    arrayStride: UInt64;
    stepMode: WGPUVertexStepMode;
    attributeCount: NativeUInt;
    attributes: PWGPUVertexAttribute;
  end;

  WGPUBindGroupLayoutDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    entryCount: NativeUInt;
    entries: PWGPUBindGroupLayoutEntry;
  end;

  WGPUColorTargetState = record
    nextInChain: PWGPUChainedStruct;
    format: WGPUTextureFormat;
    blend: PWGPUBlendState;
    writeMask: WGPUColorWriteMask;
  end;

  WGPUComputePipelineDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    layout: WGPUPipelineLayout;
    compute: WGPUProgrammableStageDescriptor;
  end;

  WGPUDeviceDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    requiredFeatureCount: NativeUInt;
    requiredFeatures: PWGPUFeatureName;
    requiredLimits: PWGPURequiredLimits;
    defaultQueue: WGPUQueueDescriptor;
    deviceLostCallback: WGPUDeviceLostCallback;
    deviceLostUserdata: Pointer;
    deviceLostCallbackInfo: WGPUDeviceLostCallbackInfo;
    uncapturedErrorCallbackInfo: WGPUUncapturedErrorCallbackInfo;
    deviceLostCallbackInfo2: WGPUDeviceLostCallbackInfo2;
    uncapturedErrorCallbackInfo2: WGPUUncapturedErrorCallbackInfo2;
  end;

  WGPURenderPassDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    colorAttachmentCount: NativeUInt;
    colorAttachments: PWGPURenderPassColorAttachment;
    depthStencilAttachment: PWGPURenderPassDepthStencilAttachment;
    occlusionQuerySet: WGPUQuerySet;
    timestampWrites: PWGPURenderPassTimestampWrites;
  end;

  WGPURenderPassPixelLocalStorage = record
    chain: WGPUChainedStruct;
    totalPixelLocalStorageSize: UInt64;
    storageAttachmentCount: NativeUInt;
    storageAttachments: PWGPURenderPassStorageAttachment;
  end;

  WGPUVertexState = record
    nextInChain: PWGPUChainedStruct;
    module: WGPUShaderModule;
    entryPoint: PUTF8Char;
    constantCount: NativeUInt;
    constants: PWGPUConstantEntry;
    bufferCount: NativeUInt;
    buffers: PWGPUVertexBufferLayout;
  end;

  WGPUFragmentState = record
    nextInChain: PWGPUChainedStruct;
    module: WGPUShaderModule;
    entryPoint: PUTF8Char;
    constantCount: NativeUInt;
    constants: PWGPUConstantEntry;
    targetCount: NativeUInt;
    targets: PWGPUColorTargetState;
  end;

  WGPURenderPipelineDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    layout: WGPUPipelineLayout;
    vertex: WGPUVertexState;
    primitive: WGPUPrimitiveState;
    depthStencil: PWGPUDepthStencilState;
    multisample: WGPUMultisampleState;
    fragment: PWGPUFragmentState;
  end;

  WGPURenderPassDescriptorMaxDrawCount = WGPURenderPassMaxDrawCount;
  WGPUShaderModuleSPIRVDescriptor = WGPUShaderSourceSPIRV;
  WGPUShaderModuleWGSLDescriptor = WGPUShaderSourceWGSL;
  WGPUSurfaceDescriptorFromAndroidNativeWindow = WGPUSurfaceSourceAndroidNativeWindow;
  WGPUSurfaceDescriptorFromCanvasHTMLSelector = WGPUSurfaceSourceCanvasHTMLSelector_Emscripten;
  WGPUSurfaceDescriptorFromMetalLayer = WGPUSurfaceSourceMetalLayer;
  WGPUSurfaceDescriptorFromWaylandSurface = WGPUSurfaceSourceWaylandSurface;
  WGPUSurfaceDescriptorFromWindowsHWND = WGPUSurfaceSourceWindowsHWND;
  WGPUSurfaceDescriptorFromXcbWindow = WGPUSurfaceSourceXCBWindow;
  WGPUSurfaceDescriptorFromXlibWindow = WGPUSurfaceSourceXlibWindow;

  WGPUProcAdapterInfoFreeMembers = procedure(value: WGPUAdapterInfo); cdecl;

  WGPUProcAdapterPropertiesFreeMembers = procedure(value: WGPUAdapterProperties); cdecl;

  WGPUProcAdapterPropertiesMemoryHeapsFreeMembers = procedure(value: WGPUAdapterPropertiesMemoryHeaps); cdecl;

  WGPUProcCreateInstance = function(const descriptor: PWGPUInstanceDescriptor): WGPUInstance; cdecl;

  WGPUProcDrmFormatCapabilitiesFreeMembers = procedure(value: WGPUDrmFormatCapabilities); cdecl;

  WGPUProcGetInstanceFeatures = function(features: PWGPUInstanceFeatures): WGPUStatus; cdecl;

  WGPUProcGetProcAddress = function(device: WGPUDevice; const procName: PUTF8Char): WGPUProc; cdecl;

  WGPUProcGetProcAddress2 = function(device: WGPUDevice; procName: WGPUStringView): WGPUProc; cdecl;

  WGPUProcSharedBufferMemoryEndAccessStateFreeMembers = procedure(value: WGPUSharedBufferMemoryEndAccessState); cdecl;

  WGPUProcSharedTextureMemoryEndAccessStateFreeMembers = procedure(value: WGPUSharedTextureMemoryEndAccessState); cdecl;

  WGPUProcSurfaceCapabilitiesFreeMembers = procedure(value: WGPUSurfaceCapabilities); cdecl;

  WGPUProcAdapterCreateDevice = function(adapter: WGPUAdapter; const descriptor: PWGPUDeviceDescriptor): WGPUDevice; cdecl;

  WGPUProcAdapterEnumerateFeatures = function(adapter: WGPUAdapter; features: PWGPUFeatureName): NativeUInt; cdecl;

  WGPUProcAdapterGetFormatCapabilities = function(adapter: WGPUAdapter; format: WGPUTextureFormat; capabilities: PWGPUFormatCapabilities): WGPUStatus; cdecl;

  WGPUProcAdapterGetInfo = function(adapter: WGPUAdapter; info: PWGPUAdapterInfo): WGPUStatus; cdecl;

  WGPUProcAdapterGetInstance = function(adapter: WGPUAdapter): WGPUInstance; cdecl;

  WGPUProcAdapterGetLimits = function(adapter: WGPUAdapter; limits: PWGPUSupportedLimits): WGPUStatus; cdecl;

  WGPUProcAdapterGetProperties = function(adapter: WGPUAdapter; properties: PWGPUAdapterProperties): WGPUStatus; cdecl;

  WGPUProcAdapterHasFeature = function(adapter: WGPUAdapter; feature: WGPUFeatureName): WGPUBool; cdecl;

  WGPUProcAdapterRequestDevice = procedure(adapter: WGPUAdapter; const descriptor: PWGPUDeviceDescriptor; callback: WGPURequestDeviceCallback; userdata: Pointer); cdecl;

  WGPUProcAdapterRequestDevice2 = function(adapter: WGPUAdapter; const options: PWGPUDeviceDescriptor; callbackInfo: WGPURequestDeviceCallbackInfo2): WGPUFuture; cdecl;

  WGPUProcAdapterRequestDeviceF = function(adapter: WGPUAdapter; const options: PWGPUDeviceDescriptor; callbackInfo: WGPURequestDeviceCallbackInfo): WGPUFuture; cdecl;

  WGPUProcAdapterAddRef = procedure(adapter: WGPUAdapter); cdecl;

  WGPUProcAdapterRelease = procedure(adapter: WGPUAdapter); cdecl;

  WGPUProcBindGroupSetLabel = procedure(bindGroup: WGPUBindGroup; const &label: PUTF8Char); cdecl;

  WGPUProcBindGroupSetLabel2 = procedure(bindGroup: WGPUBindGroup; &label: WGPUStringView); cdecl;

  WGPUProcBindGroupAddRef = procedure(bindGroup: WGPUBindGroup); cdecl;

  WGPUProcBindGroupRelease = procedure(bindGroup: WGPUBindGroup); cdecl;

  WGPUProcBindGroupLayoutSetLabel = procedure(bindGroupLayout: WGPUBindGroupLayout; const &label: PUTF8Char); cdecl;

  WGPUProcBindGroupLayoutSetLabel2 = procedure(bindGroupLayout: WGPUBindGroupLayout; &label: WGPUStringView); cdecl;

  WGPUProcBindGroupLayoutAddRef = procedure(bindGroupLayout: WGPUBindGroupLayout); cdecl;

  WGPUProcBindGroupLayoutRelease = procedure(bindGroupLayout: WGPUBindGroupLayout); cdecl;

  WGPUProcBufferDestroy = procedure(buffer: WGPUBuffer); cdecl;

  WGPUProcBufferGetConstMappedRange = function(buffer: WGPUBuffer; offset: NativeUInt; size: NativeUInt): Pointer; cdecl;

  WGPUProcBufferGetMapState = function(buffer: WGPUBuffer): WGPUBufferMapState; cdecl;

  WGPUProcBufferGetMappedRange = function(buffer: WGPUBuffer; offset: NativeUInt; size: NativeUInt): Pointer; cdecl;

  WGPUProcBufferGetSize = function(buffer: WGPUBuffer): UInt64; cdecl;

  WGPUProcBufferGetUsage = function(buffer: WGPUBuffer): WGPUBufferUsage; cdecl;

  WGPUProcBufferMapAsync = procedure(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callback: WGPUBufferMapCallback; userdata: Pointer); cdecl;

  WGPUProcBufferMapAsync2 = function(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callbackInfo: WGPUBufferMapCallbackInfo2): WGPUFuture; cdecl;

  WGPUProcBufferMapAsyncF = function(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callbackInfo: WGPUBufferMapCallbackInfo): WGPUFuture; cdecl;

  WGPUProcBufferSetLabel = procedure(buffer: WGPUBuffer; const &label: PUTF8Char); cdecl;

  WGPUProcBufferSetLabel2 = procedure(buffer: WGPUBuffer; &label: WGPUStringView); cdecl;

  WGPUProcBufferUnmap = procedure(buffer: WGPUBuffer); cdecl;

  WGPUProcBufferAddRef = procedure(buffer: WGPUBuffer); cdecl;

  WGPUProcBufferRelease = procedure(buffer: WGPUBuffer); cdecl;

  WGPUProcCommandBufferSetLabel = procedure(commandBuffer: WGPUCommandBuffer; const &label: PUTF8Char); cdecl;

  WGPUProcCommandBufferSetLabel2 = procedure(commandBuffer: WGPUCommandBuffer; &label: WGPUStringView); cdecl;

  WGPUProcCommandBufferAddRef = procedure(commandBuffer: WGPUCommandBuffer); cdecl;

  WGPUProcCommandBufferRelease = procedure(commandBuffer: WGPUCommandBuffer); cdecl;

  WGPUProcCommandEncoderBeginComputePass = function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPUComputePassDescriptor): WGPUComputePassEncoder; cdecl;

  WGPUProcCommandEncoderBeginRenderPass = function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPURenderPassDescriptor): WGPURenderPassEncoder; cdecl;

  WGPUProcCommandEncoderClearBuffer = procedure(commandEncoder: WGPUCommandEncoder; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;

  WGPUProcCommandEncoderCopyBufferToBuffer = procedure(commandEncoder: WGPUCommandEncoder; source: WGPUBuffer; sourceOffset: UInt64; destination: WGPUBuffer; destinationOffset: UInt64; size: UInt64); cdecl;

  WGPUProcCommandEncoderCopyBufferToTexture = procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyBuffer; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D); cdecl;

  WGPUProcCommandEncoderCopyTextureToBuffer = procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyBuffer; const copySize: PWGPUExtent3D); cdecl;

  WGPUProcCommandEncoderCopyTextureToTexture = procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D); cdecl;

  WGPUProcCommandEncoderFinish = function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPUCommandBufferDescriptor): WGPUCommandBuffer; cdecl;

  WGPUProcCommandEncoderInjectValidationError = procedure(commandEncoder: WGPUCommandEncoder; const &message: PUTF8Char); cdecl;

  WGPUProcCommandEncoderInjectValidationError2 = procedure(commandEncoder: WGPUCommandEncoder; &message: WGPUStringView); cdecl;

  WGPUProcCommandEncoderInsertDebugMarker = procedure(commandEncoder: WGPUCommandEncoder; const markerLabel: PUTF8Char); cdecl;

  WGPUProcCommandEncoderInsertDebugMarker2 = procedure(commandEncoder: WGPUCommandEncoder; markerLabel: WGPUStringView); cdecl;

  WGPUProcCommandEncoderPopDebugGroup = procedure(commandEncoder: WGPUCommandEncoder); cdecl;

  WGPUProcCommandEncoderPushDebugGroup = procedure(commandEncoder: WGPUCommandEncoder; const groupLabel: PUTF8Char); cdecl;

  WGPUProcCommandEncoderPushDebugGroup2 = procedure(commandEncoder: WGPUCommandEncoder; groupLabel: WGPUStringView); cdecl;

  WGPUProcCommandEncoderResolveQuerySet = procedure(commandEncoder: WGPUCommandEncoder; querySet: WGPUQuerySet; firstQuery: UInt32; queryCount: UInt32; destination: WGPUBuffer; destinationOffset: UInt64); cdecl;

  WGPUProcCommandEncoderSetLabel = procedure(commandEncoder: WGPUCommandEncoder; const &label: PUTF8Char); cdecl;

  WGPUProcCommandEncoderSetLabel2 = procedure(commandEncoder: WGPUCommandEncoder; &label: WGPUStringView); cdecl;

  WGPUProcCommandEncoderWriteBuffer = procedure(commandEncoder: WGPUCommandEncoder; buffer: WGPUBuffer; bufferOffset: UInt64; const data: PUInt8; size: UInt64); cdecl;

  WGPUProcCommandEncoderWriteTimestamp = procedure(commandEncoder: WGPUCommandEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;

  WGPUProcCommandEncoderAddRef = procedure(commandEncoder: WGPUCommandEncoder); cdecl;

  WGPUProcCommandEncoderRelease = procedure(commandEncoder: WGPUCommandEncoder); cdecl;

  WGPUProcComputePassEncoderDispatchWorkgroups = procedure(computePassEncoder: WGPUComputePassEncoder; workgroupCountX: UInt32; workgroupCountY: UInt32; workgroupCountZ: UInt32); cdecl;

  WGPUProcComputePassEncoderDispatchWorkgroupsIndirect = procedure(computePassEncoder: WGPUComputePassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;

  WGPUProcComputePassEncoderEnd = procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;

  WGPUProcComputePassEncoderInsertDebugMarker = procedure(computePassEncoder: WGPUComputePassEncoder; const markerLabel: PUTF8Char); cdecl;

  WGPUProcComputePassEncoderInsertDebugMarker2 = procedure(computePassEncoder: WGPUComputePassEncoder; markerLabel: WGPUStringView); cdecl;

  WGPUProcComputePassEncoderPopDebugGroup = procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;

  WGPUProcComputePassEncoderPushDebugGroup = procedure(computePassEncoder: WGPUComputePassEncoder; const groupLabel: PUTF8Char); cdecl;

  WGPUProcComputePassEncoderPushDebugGroup2 = procedure(computePassEncoder: WGPUComputePassEncoder; groupLabel: WGPUStringView); cdecl;

  WGPUProcComputePassEncoderSetBindGroup = procedure(computePassEncoder: WGPUComputePassEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;

  WGPUProcComputePassEncoderSetLabel = procedure(computePassEncoder: WGPUComputePassEncoder; const &label: PUTF8Char); cdecl;

  WGPUProcComputePassEncoderSetLabel2 = procedure(computePassEncoder: WGPUComputePassEncoder; &label: WGPUStringView); cdecl;

  WGPUProcComputePassEncoderSetPipeline = procedure(computePassEncoder: WGPUComputePassEncoder; pipeline: WGPUComputePipeline); cdecl;

  WGPUProcComputePassEncoderWriteTimestamp = procedure(computePassEncoder: WGPUComputePassEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;

  WGPUProcComputePassEncoderAddRef = procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;

  WGPUProcComputePassEncoderRelease = procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;

  WGPUProcComputePipelineGetBindGroupLayout = function(computePipeline: WGPUComputePipeline; groupIndex: UInt32): WGPUBindGroupLayout; cdecl;

  WGPUProcComputePipelineSetLabel = procedure(computePipeline: WGPUComputePipeline; const &label: PUTF8Char); cdecl;

  WGPUProcComputePipelineSetLabel2 = procedure(computePipeline: WGPUComputePipeline; &label: WGPUStringView); cdecl;

  WGPUProcComputePipelineAddRef = procedure(computePipeline: WGPUComputePipeline); cdecl;

  WGPUProcComputePipelineRelease = procedure(computePipeline: WGPUComputePipeline); cdecl;

  WGPUProcDeviceCreateBindGroup = function(device: WGPUDevice; const descriptor: PWGPUBindGroupDescriptor): WGPUBindGroup; cdecl;

  WGPUProcDeviceCreateBindGroupLayout = function(device: WGPUDevice; const descriptor: PWGPUBindGroupLayoutDescriptor): WGPUBindGroupLayout; cdecl;

  WGPUProcDeviceCreateBuffer = function(device: WGPUDevice; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;

  WGPUProcDeviceCreateCommandEncoder = function(device: WGPUDevice; const descriptor: PWGPUCommandEncoderDescriptor): WGPUCommandEncoder; cdecl;

  WGPUProcDeviceCreateComputePipeline = function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor): WGPUComputePipeline; cdecl;

  WGPUProcDeviceCreateComputePipelineAsync = procedure(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callback: WGPUCreateComputePipelineAsyncCallback; userdata: Pointer); cdecl;

  WGPUProcDeviceCreateComputePipelineAsync2 = function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo2): WGPUFuture; cdecl;

  WGPUProcDeviceCreateComputePipelineAsyncF = function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo): WGPUFuture; cdecl;

  WGPUProcDeviceCreateErrorBuffer = function(device: WGPUDevice; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;

  WGPUProcDeviceCreateErrorExternalTexture = function(device: WGPUDevice): WGPUExternalTexture; cdecl;

  WGPUProcDeviceCreateErrorShaderModule = function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor; const errorMessage: PUTF8Char): WGPUShaderModule; cdecl;

  WGPUProcDeviceCreateErrorShaderModule2 = function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor; errorMessage: WGPUStringView): WGPUShaderModule; cdecl;

  WGPUProcDeviceCreateErrorTexture = function(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;

  WGPUProcDeviceCreateExternalTexture = function(device: WGPUDevice; const externalTextureDescriptor: PWGPUExternalTextureDescriptor): WGPUExternalTexture; cdecl;

  WGPUProcDeviceCreatePipelineLayout = function(device: WGPUDevice; const descriptor: PWGPUPipelineLayoutDescriptor): WGPUPipelineLayout; cdecl;

  WGPUProcDeviceCreateQuerySet = function(device: WGPUDevice; const descriptor: PWGPUQuerySetDescriptor): WGPUQuerySet; cdecl;

  WGPUProcDeviceCreateRenderBundleEncoder = function(device: WGPUDevice; const descriptor: PWGPURenderBundleEncoderDescriptor): WGPURenderBundleEncoder; cdecl;

  WGPUProcDeviceCreateRenderPipeline = function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor): WGPURenderPipeline; cdecl;

  WGPUProcDeviceCreateRenderPipelineAsync = procedure(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callback: WGPUCreateRenderPipelineAsyncCallback; userdata: Pointer); cdecl;

  WGPUProcDeviceCreateRenderPipelineAsync2 = function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo2): WGPUFuture; cdecl;

  WGPUProcDeviceCreateRenderPipelineAsyncF = function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo): WGPUFuture; cdecl;

  WGPUProcDeviceCreateSampler = function(device: WGPUDevice; const descriptor: PWGPUSamplerDescriptor): WGPUSampler; cdecl;

  WGPUProcDeviceCreateShaderModule = function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor): WGPUShaderModule; cdecl;

  WGPUProcDeviceCreateSwapChain = function(device: WGPUDevice; surface: WGPUSurface; const descriptor: PWGPUSwapChainDescriptor): WGPUSwapChain; cdecl;

  WGPUProcDeviceCreateTexture = function(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;

  WGPUProcDeviceDestroy = procedure(device: WGPUDevice); cdecl;

  WGPUProcDeviceEnumerateFeatures = function(device: WGPUDevice; features: PWGPUFeatureName): NativeUInt; cdecl;

  WGPUProcDeviceForceLoss = procedure(device: WGPUDevice; &type: WGPUDeviceLostReason; const &message: PUTF8Char); cdecl;

  WGPUProcDeviceForceLoss2 = procedure(device: WGPUDevice; &type: WGPUDeviceLostReason; &message: WGPUStringView); cdecl;

  WGPUProcDeviceGetAHardwareBufferProperties = function(device: WGPUDevice; handle: Pointer; properties: PWGPUAHardwareBufferProperties): WGPUStatus; cdecl;

  WGPUProcDeviceGetAdapter = function(device: WGPUDevice): WGPUAdapter; cdecl;

  WGPUProcDeviceGetLimits = function(device: WGPUDevice; limits: PWGPUSupportedLimits): WGPUStatus; cdecl;

  WGPUProcDeviceGetQueue = function(device: WGPUDevice): WGPUQueue; cdecl;

  WGPUProcDeviceGetSupportedSurfaceUsage = function(device: WGPUDevice; surface: WGPUSurface): WGPUTextureUsage; cdecl;

  WGPUProcDeviceHasFeature = function(device: WGPUDevice; feature: WGPUFeatureName): WGPUBool; cdecl;

  WGPUProcDeviceImportSharedBufferMemory = function(device: WGPUDevice; const descriptor: PWGPUSharedBufferMemoryDescriptor): WGPUSharedBufferMemory; cdecl;

  WGPUProcDeviceImportSharedFence = function(device: WGPUDevice; const descriptor: PWGPUSharedFenceDescriptor): WGPUSharedFence; cdecl;

  WGPUProcDeviceImportSharedTextureMemory = function(device: WGPUDevice; const descriptor: PWGPUSharedTextureMemoryDescriptor): WGPUSharedTextureMemory; cdecl;

  WGPUProcDeviceInjectError = procedure(device: WGPUDevice; &type: WGPUErrorType; const &message: PUTF8Char); cdecl;

  WGPUProcDeviceInjectError2 = procedure(device: WGPUDevice; &type: WGPUErrorType; &message: WGPUStringView); cdecl;

  WGPUProcDevicePopErrorScope = procedure(device: WGPUDevice; oldCallback: WGPUErrorCallback; userdata: Pointer); cdecl;

  WGPUProcDevicePopErrorScope2 = function(device: WGPUDevice; callbackInfo: WGPUPopErrorScopeCallbackInfo2): WGPUFuture; cdecl;

  WGPUProcDevicePopErrorScopeF = function(device: WGPUDevice; callbackInfo: WGPUPopErrorScopeCallbackInfo): WGPUFuture; cdecl;

  WGPUProcDevicePushErrorScope = procedure(device: WGPUDevice; filter: WGPUErrorFilter); cdecl;

  WGPUProcDeviceSetDeviceLostCallback = procedure(device: WGPUDevice; callback: WGPUDeviceLostCallback; userdata: Pointer); cdecl;

  WGPUProcDeviceSetLabel = procedure(device: WGPUDevice; const &label: PUTF8Char); cdecl;

  WGPUProcDeviceSetLabel2 = procedure(device: WGPUDevice; &label: WGPUStringView); cdecl;

  WGPUProcDeviceSetLoggingCallback = procedure(device: WGPUDevice; callback: WGPULoggingCallback; userdata: Pointer); cdecl;

  WGPUProcDeviceSetUncapturedErrorCallback = procedure(device: WGPUDevice; callback: WGPUErrorCallback; userdata: Pointer); cdecl;

  WGPUProcDeviceTick = procedure(device: WGPUDevice); cdecl;

  WGPUProcDeviceValidateTextureDescriptor = procedure(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor); cdecl;

  WGPUProcDeviceAddRef = procedure(device: WGPUDevice); cdecl;

  WGPUProcDeviceRelease = procedure(device: WGPUDevice); cdecl;

  WGPUProcExternalTextureDestroy = procedure(externalTexture: WGPUExternalTexture); cdecl;

  WGPUProcExternalTextureExpire = procedure(externalTexture: WGPUExternalTexture); cdecl;

  WGPUProcExternalTextureRefresh = procedure(externalTexture: WGPUExternalTexture); cdecl;

  WGPUProcExternalTextureSetLabel = procedure(externalTexture: WGPUExternalTexture; const &label: PUTF8Char); cdecl;

  WGPUProcExternalTextureSetLabel2 = procedure(externalTexture: WGPUExternalTexture; &label: WGPUStringView); cdecl;

  WGPUProcExternalTextureAddRef = procedure(externalTexture: WGPUExternalTexture); cdecl;

  WGPUProcExternalTextureRelease = procedure(externalTexture: WGPUExternalTexture); cdecl;

  WGPUProcInstanceCreateSurface = function(instance: WGPUInstance; const descriptor: PWGPUSurfaceDescriptor): WGPUSurface; cdecl;

  WGPUProcInstanceEnumerateWGSLLanguageFeatures = function(instance: WGPUInstance; features: PWGPUWGSLFeatureName): NativeUInt; cdecl;

  WGPUProcInstanceHasWGSLLanguageFeature = function(instance: WGPUInstance; feature: WGPUWGSLFeatureName): WGPUBool; cdecl;

  WGPUProcInstanceProcessEvents = procedure(instance: WGPUInstance); cdecl;

  WGPUProcInstanceRequestAdapter = procedure(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callback: WGPURequestAdapterCallback; userdata: Pointer); cdecl;

  WGPUProcInstanceRequestAdapter2 = function(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callbackInfo: WGPURequestAdapterCallbackInfo2): WGPUFuture; cdecl;

  WGPUProcInstanceRequestAdapterF = function(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callbackInfo: WGPURequestAdapterCallbackInfo): WGPUFuture; cdecl;

  WGPUProcInstanceWaitAny = function(instance: WGPUInstance; futureCount: NativeUInt; futures: PWGPUFutureWaitInfo; timeoutNS: UInt64): WGPUWaitStatus; cdecl;

  WGPUProcInstanceAddRef = procedure(instance: WGPUInstance); cdecl;

  WGPUProcInstanceRelease = procedure(instance: WGPUInstance); cdecl;

  WGPUProcPipelineLayoutSetLabel = procedure(pipelineLayout: WGPUPipelineLayout; const &label: PUTF8Char); cdecl;

  WGPUProcPipelineLayoutSetLabel2 = procedure(pipelineLayout: WGPUPipelineLayout; &label: WGPUStringView); cdecl;

  WGPUProcPipelineLayoutAddRef = procedure(pipelineLayout: WGPUPipelineLayout); cdecl;

  WGPUProcPipelineLayoutRelease = procedure(pipelineLayout: WGPUPipelineLayout); cdecl;

  WGPUProcQuerySetDestroy = procedure(querySet: WGPUQuerySet); cdecl;

  WGPUProcQuerySetGetCount = function(querySet: WGPUQuerySet): UInt32; cdecl;

  WGPUProcQuerySetGetType = function(querySet: WGPUQuerySet): WGPUQueryType; cdecl;

  WGPUProcQuerySetSetLabel = procedure(querySet: WGPUQuerySet; const &label: PUTF8Char); cdecl;

  WGPUProcQuerySetSetLabel2 = procedure(querySet: WGPUQuerySet; &label: WGPUStringView); cdecl;

  WGPUProcQuerySetAddRef = procedure(querySet: WGPUQuerySet); cdecl;

  WGPUProcQuerySetRelease = procedure(querySet: WGPUQuerySet); cdecl;

  WGPUProcQueueCopyExternalTextureForBrowser = procedure(queue: WGPUQueue; const source: PWGPUImageCopyExternalTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D; const options: PWGPUCopyTextureForBrowserOptions); cdecl;

  WGPUProcQueueCopyTextureForBrowser = procedure(queue: WGPUQueue; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D; const options: PWGPUCopyTextureForBrowserOptions); cdecl;

  WGPUProcQueueOnSubmittedWorkDone = procedure(queue: WGPUQueue; callback: WGPUQueueWorkDoneCallback; userdata: Pointer); cdecl;

  WGPUProcQueueOnSubmittedWorkDone2 = function(queue: WGPUQueue; callbackInfo: WGPUQueueWorkDoneCallbackInfo2): WGPUFuture; cdecl;

  WGPUProcQueueOnSubmittedWorkDoneF = function(queue: WGPUQueue; callbackInfo: WGPUQueueWorkDoneCallbackInfo): WGPUFuture; cdecl;

  WGPUProcQueueSetLabel = procedure(queue: WGPUQueue; const &label: PUTF8Char); cdecl;

  WGPUProcQueueSetLabel2 = procedure(queue: WGPUQueue; &label: WGPUStringView); cdecl;

  WGPUProcQueueSubmit = procedure(queue: WGPUQueue; commandCount: NativeUInt; const commands: PWGPUCommandBuffer); cdecl;

  WGPUProcQueueWriteBuffer = procedure(queue: WGPUQueue; buffer: WGPUBuffer; bufferOffset: UInt64; const data: Pointer; size: NativeUInt); cdecl;

  WGPUProcQueueWriteTexture = procedure(queue: WGPUQueue; const destination: PWGPUImageCopyTexture; const data: Pointer; dataSize: NativeUInt; const dataLayout: PWGPUTextureDataLayout; const writeSize: PWGPUExtent3D); cdecl;

  WGPUProcQueueAddRef = procedure(queue: WGPUQueue); cdecl;

  WGPUProcQueueRelease = procedure(queue: WGPUQueue); cdecl;

  WGPUProcRenderBundleSetLabel = procedure(renderBundle: WGPURenderBundle; const &label: PUTF8Char); cdecl;

  WGPUProcRenderBundleSetLabel2 = procedure(renderBundle: WGPURenderBundle; &label: WGPUStringView); cdecl;

  WGPUProcRenderBundleAddRef = procedure(renderBundle: WGPURenderBundle); cdecl;

  WGPUProcRenderBundleRelease = procedure(renderBundle: WGPURenderBundle); cdecl;

  WGPUProcRenderBundleEncoderDraw = procedure(renderBundleEncoder: WGPURenderBundleEncoder; vertexCount: UInt32; instanceCount: UInt32; firstVertex: UInt32; firstInstance: UInt32); cdecl;

  WGPUProcRenderBundleEncoderDrawIndexed = procedure(renderBundleEncoder: WGPURenderBundleEncoder; indexCount: UInt32; instanceCount: UInt32; firstIndex: UInt32; baseVertex: Int32; firstInstance: UInt32); cdecl;

  WGPUProcRenderBundleEncoderDrawIndexedIndirect = procedure(renderBundleEncoder: WGPURenderBundleEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;

  WGPUProcRenderBundleEncoderDrawIndirect = procedure(renderBundleEncoder: WGPURenderBundleEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;

  WGPUProcRenderBundleEncoderFinish = function(renderBundleEncoder: WGPURenderBundleEncoder; const descriptor: PWGPURenderBundleDescriptor): WGPURenderBundle; cdecl;

  WGPUProcRenderBundleEncoderInsertDebugMarker = procedure(renderBundleEncoder: WGPURenderBundleEncoder; const markerLabel: PUTF8Char); cdecl;

  WGPUProcRenderBundleEncoderInsertDebugMarker2 = procedure(renderBundleEncoder: WGPURenderBundleEncoder; markerLabel: WGPUStringView); cdecl;

  WGPUProcRenderBundleEncoderPopDebugGroup = procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;

  WGPUProcRenderBundleEncoderPushDebugGroup = procedure(renderBundleEncoder: WGPURenderBundleEncoder; const groupLabel: PUTF8Char); cdecl;

  WGPUProcRenderBundleEncoderPushDebugGroup2 = procedure(renderBundleEncoder: WGPURenderBundleEncoder; groupLabel: WGPUStringView); cdecl;

  WGPUProcRenderBundleEncoderSetBindGroup = procedure(renderBundleEncoder: WGPURenderBundleEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;

  WGPUProcRenderBundleEncoderSetIndexBuffer = procedure(renderBundleEncoder: WGPURenderBundleEncoder; buffer: WGPUBuffer; format: WGPUIndexFormat; offset: UInt64; size: UInt64); cdecl;

  WGPUProcRenderBundleEncoderSetLabel = procedure(renderBundleEncoder: WGPURenderBundleEncoder; const &label: PUTF8Char); cdecl;

  WGPUProcRenderBundleEncoderSetLabel2 = procedure(renderBundleEncoder: WGPURenderBundleEncoder; &label: WGPUStringView); cdecl;

  WGPUProcRenderBundleEncoderSetPipeline = procedure(renderBundleEncoder: WGPURenderBundleEncoder; pipeline: WGPURenderPipeline); cdecl;

  WGPUProcRenderBundleEncoderSetVertexBuffer = procedure(renderBundleEncoder: WGPURenderBundleEncoder; slot: UInt32; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;

  WGPUProcRenderBundleEncoderAddRef = procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;

  WGPUProcRenderBundleEncoderRelease = procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;

  WGPUProcRenderPassEncoderBeginOcclusionQuery = procedure(renderPassEncoder: WGPURenderPassEncoder; queryIndex: UInt32); cdecl;

  WGPUProcRenderPassEncoderDraw = procedure(renderPassEncoder: WGPURenderPassEncoder; vertexCount: UInt32; instanceCount: UInt32; firstVertex: UInt32; firstInstance: UInt32); cdecl;

  WGPUProcRenderPassEncoderDrawIndexed = procedure(renderPassEncoder: WGPURenderPassEncoder; indexCount: UInt32; instanceCount: UInt32; firstIndex: UInt32; baseVertex: Int32; firstInstance: UInt32); cdecl;

  WGPUProcRenderPassEncoderDrawIndexedIndirect = procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;

  WGPUProcRenderPassEncoderDrawIndirect = procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;

  WGPUProcRenderPassEncoderEnd = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;

  WGPUProcRenderPassEncoderEndOcclusionQuery = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;

  WGPUProcRenderPassEncoderExecuteBundles = procedure(renderPassEncoder: WGPURenderPassEncoder; bundleCount: NativeUInt; const bundles: PWGPURenderBundle); cdecl;

  WGPUProcRenderPassEncoderInsertDebugMarker = procedure(renderPassEncoder: WGPURenderPassEncoder; const markerLabel: PUTF8Char); cdecl;

  WGPUProcRenderPassEncoderInsertDebugMarker2 = procedure(renderPassEncoder: WGPURenderPassEncoder; markerLabel: WGPUStringView); cdecl;

  WGPUProcRenderPassEncoderMultiDrawIndexedIndirect = procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64; maxDrawCount: UInt32; drawCountBuffer: WGPUBuffer; drawCountBufferOffset: UInt64); cdecl;

  WGPUProcRenderPassEncoderMultiDrawIndirect = procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64; maxDrawCount: UInt32; drawCountBuffer: WGPUBuffer; drawCountBufferOffset: UInt64); cdecl;

  WGPUProcRenderPassEncoderPixelLocalStorageBarrier = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;

  WGPUProcRenderPassEncoderPopDebugGroup = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;

  WGPUProcRenderPassEncoderPushDebugGroup = procedure(renderPassEncoder: WGPURenderPassEncoder; const groupLabel: PUTF8Char); cdecl;

  WGPUProcRenderPassEncoderPushDebugGroup2 = procedure(renderPassEncoder: WGPURenderPassEncoder; groupLabel: WGPUStringView); cdecl;

  WGPUProcRenderPassEncoderSetBindGroup = procedure(renderPassEncoder: WGPURenderPassEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;

  WGPUProcRenderPassEncoderSetBlendConstant = procedure(renderPassEncoder: WGPURenderPassEncoder; const color: PWGPUColor); cdecl;

  WGPUProcRenderPassEncoderSetIndexBuffer = procedure(renderPassEncoder: WGPURenderPassEncoder; buffer: WGPUBuffer; format: WGPUIndexFormat; offset: UInt64; size: UInt64); cdecl;

  WGPUProcRenderPassEncoderSetLabel = procedure(renderPassEncoder: WGPURenderPassEncoder; const &label: PUTF8Char); cdecl;

  WGPUProcRenderPassEncoderSetLabel2 = procedure(renderPassEncoder: WGPURenderPassEncoder; &label: WGPUStringView); cdecl;

  WGPUProcRenderPassEncoderSetPipeline = procedure(renderPassEncoder: WGPURenderPassEncoder; pipeline: WGPURenderPipeline); cdecl;

  WGPUProcRenderPassEncoderSetScissorRect = procedure(renderPassEncoder: WGPURenderPassEncoder; x: UInt32; y: UInt32; width: UInt32; height: UInt32); cdecl;

  WGPUProcRenderPassEncoderSetStencilReference = procedure(renderPassEncoder: WGPURenderPassEncoder; reference: UInt32); cdecl;

  WGPUProcRenderPassEncoderSetVertexBuffer = procedure(renderPassEncoder: WGPURenderPassEncoder; slot: UInt32; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;

  WGPUProcRenderPassEncoderSetViewport = procedure(renderPassEncoder: WGPURenderPassEncoder; x: Single; y: Single; width: Single; height: Single; minDepth: Single; maxDepth: Single); cdecl;

  WGPUProcRenderPassEncoderWriteTimestamp = procedure(renderPassEncoder: WGPURenderPassEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;

  WGPUProcRenderPassEncoderAddRef = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;

  WGPUProcRenderPassEncoderRelease = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;

  WGPUProcRenderPipelineGetBindGroupLayout = function(renderPipeline: WGPURenderPipeline; groupIndex: UInt32): WGPUBindGroupLayout; cdecl;

  WGPUProcRenderPipelineSetLabel = procedure(renderPipeline: WGPURenderPipeline; const &label: PUTF8Char); cdecl;

  WGPUProcRenderPipelineSetLabel2 = procedure(renderPipeline: WGPURenderPipeline; &label: WGPUStringView); cdecl;

  WGPUProcRenderPipelineAddRef = procedure(renderPipeline: WGPURenderPipeline); cdecl;

  WGPUProcRenderPipelineRelease = procedure(renderPipeline: WGPURenderPipeline); cdecl;

  WGPUProcSamplerSetLabel = procedure(sampler: WGPUSampler; const &label: PUTF8Char); cdecl;

  WGPUProcSamplerSetLabel2 = procedure(sampler: WGPUSampler; &label: WGPUStringView); cdecl;

  WGPUProcSamplerAddRef = procedure(sampler: WGPUSampler); cdecl;

  WGPUProcSamplerRelease = procedure(sampler: WGPUSampler); cdecl;

  WGPUProcShaderModuleGetCompilationInfo = procedure(shaderModule: WGPUShaderModule; callback: WGPUCompilationInfoCallback; userdata: Pointer); cdecl;

  WGPUProcShaderModuleGetCompilationInfo2 = function(shaderModule: WGPUShaderModule; callbackInfo: WGPUCompilationInfoCallbackInfo2): WGPUFuture; cdecl;

  WGPUProcShaderModuleGetCompilationInfoF = function(shaderModule: WGPUShaderModule; callbackInfo: WGPUCompilationInfoCallbackInfo): WGPUFuture; cdecl;

  WGPUProcShaderModuleSetLabel = procedure(shaderModule: WGPUShaderModule; const &label: PUTF8Char); cdecl;

  WGPUProcShaderModuleSetLabel2 = procedure(shaderModule: WGPUShaderModule; &label: WGPUStringView); cdecl;

  WGPUProcShaderModuleAddRef = procedure(shaderModule: WGPUShaderModule); cdecl;

  WGPUProcShaderModuleRelease = procedure(shaderModule: WGPUShaderModule); cdecl;

  WGPUProcSharedBufferMemoryBeginAccess = function(sharedBufferMemory: WGPUSharedBufferMemory; buffer: WGPUBuffer; const descriptor: PWGPUSharedBufferMemoryBeginAccessDescriptor): WGPUStatus; cdecl;

  WGPUProcSharedBufferMemoryCreateBuffer = function(sharedBufferMemory: WGPUSharedBufferMemory; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;

  WGPUProcSharedBufferMemoryEndAccess = function(sharedBufferMemory: WGPUSharedBufferMemory; buffer: WGPUBuffer; descriptor: PWGPUSharedBufferMemoryEndAccessState): WGPUStatus; cdecl;

  WGPUProcSharedBufferMemoryGetProperties = function(sharedBufferMemory: WGPUSharedBufferMemory; properties: PWGPUSharedBufferMemoryProperties): WGPUStatus; cdecl;

  WGPUProcSharedBufferMemoryIsDeviceLost = function(sharedBufferMemory: WGPUSharedBufferMemory): WGPUBool; cdecl;

  WGPUProcSharedBufferMemorySetLabel = procedure(sharedBufferMemory: WGPUSharedBufferMemory; const &label: PUTF8Char); cdecl;

  WGPUProcSharedBufferMemorySetLabel2 = procedure(sharedBufferMemory: WGPUSharedBufferMemory; &label: WGPUStringView); cdecl;

  WGPUProcSharedBufferMemoryAddRef = procedure(sharedBufferMemory: WGPUSharedBufferMemory); cdecl;

  WGPUProcSharedBufferMemoryRelease = procedure(sharedBufferMemory: WGPUSharedBufferMemory); cdecl;

  WGPUProcSharedFenceExportInfo = procedure(sharedFence: WGPUSharedFence; info: PWGPUSharedFenceExportInfo); cdecl;

  WGPUProcSharedFenceAddRef = procedure(sharedFence: WGPUSharedFence); cdecl;

  WGPUProcSharedFenceRelease = procedure(sharedFence: WGPUSharedFence); cdecl;

  WGPUProcSharedTextureMemoryBeginAccess = function(sharedTextureMemory: WGPUSharedTextureMemory; texture: WGPUTexture; const descriptor: PWGPUSharedTextureMemoryBeginAccessDescriptor): WGPUStatus; cdecl;

  WGPUProcSharedTextureMemoryCreateTexture = function(sharedTextureMemory: WGPUSharedTextureMemory; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;

  WGPUProcSharedTextureMemoryEndAccess = function(sharedTextureMemory: WGPUSharedTextureMemory; texture: WGPUTexture; descriptor: PWGPUSharedTextureMemoryEndAccessState): WGPUStatus; cdecl;

  WGPUProcSharedTextureMemoryGetProperties = function(sharedTextureMemory: WGPUSharedTextureMemory; properties: PWGPUSharedTextureMemoryProperties): WGPUStatus; cdecl;

  WGPUProcSharedTextureMemoryIsDeviceLost = function(sharedTextureMemory: WGPUSharedTextureMemory): WGPUBool; cdecl;

  WGPUProcSharedTextureMemorySetLabel = procedure(sharedTextureMemory: WGPUSharedTextureMemory; const &label: PUTF8Char); cdecl;

  WGPUProcSharedTextureMemorySetLabel2 = procedure(sharedTextureMemory: WGPUSharedTextureMemory; &label: WGPUStringView); cdecl;

  WGPUProcSharedTextureMemoryAddRef = procedure(sharedTextureMemory: WGPUSharedTextureMemory); cdecl;

  WGPUProcSharedTextureMemoryRelease = procedure(sharedTextureMemory: WGPUSharedTextureMemory); cdecl;

  WGPUProcSurfaceConfigure = procedure(surface: WGPUSurface; const config: PWGPUSurfaceConfiguration); cdecl;

  WGPUProcSurfaceGetCapabilities = function(surface: WGPUSurface; adapter: WGPUAdapter; capabilities: PWGPUSurfaceCapabilities): WGPUStatus; cdecl;

  WGPUProcSurfaceGetCurrentTexture = procedure(surface: WGPUSurface; surfaceTexture: PWGPUSurfaceTexture); cdecl;

  WGPUProcSurfaceGetPreferredFormat = function(surface: WGPUSurface; adapter: WGPUAdapter): WGPUTextureFormat; cdecl;

  WGPUProcSurfacePresent = procedure(surface: WGPUSurface); cdecl;

  WGPUProcSurfaceSetLabel = procedure(surface: WGPUSurface; const &label: PUTF8Char); cdecl;

  WGPUProcSurfaceSetLabel2 = procedure(surface: WGPUSurface; &label: WGPUStringView); cdecl;

  WGPUProcSurfaceUnconfigure = procedure(surface: WGPUSurface); cdecl;

  WGPUProcSurfaceAddRef = procedure(surface: WGPUSurface); cdecl;

  WGPUProcSurfaceRelease = procedure(surface: WGPUSurface); cdecl;

  WGPUProcSwapChainGetCurrentTexture = function(swapChain: WGPUSwapChain): WGPUTexture; cdecl;

  WGPUProcSwapChainGetCurrentTextureView = function(swapChain: WGPUSwapChain): WGPUTextureView; cdecl;

  WGPUProcSwapChainPresent = procedure(swapChain: WGPUSwapChain); cdecl;

  WGPUProcSwapChainAddRef = procedure(swapChain: WGPUSwapChain); cdecl;

  WGPUProcSwapChainRelease = procedure(swapChain: WGPUSwapChain); cdecl;

  WGPUProcTextureCreateErrorView = function(texture: WGPUTexture; const descriptor: PWGPUTextureViewDescriptor): WGPUTextureView; cdecl;

  WGPUProcTextureCreateView = function(texture: WGPUTexture; const descriptor: PWGPUTextureViewDescriptor): WGPUTextureView; cdecl;

  WGPUProcTextureDestroy = procedure(texture: WGPUTexture); cdecl;

  WGPUProcTextureGetDepthOrArrayLayers = function(texture: WGPUTexture): UInt32; cdecl;

  WGPUProcTextureGetDimension = function(texture: WGPUTexture): WGPUTextureDimension; cdecl;

  WGPUProcTextureGetFormat = function(texture: WGPUTexture): WGPUTextureFormat; cdecl;

  WGPUProcTextureGetHeight = function(texture: WGPUTexture): UInt32; cdecl;

  WGPUProcTextureGetMipLevelCount = function(texture: WGPUTexture): UInt32; cdecl;

  WGPUProcTextureGetSampleCount = function(texture: WGPUTexture): UInt32; cdecl;

  WGPUProcTextureGetUsage = function(texture: WGPUTexture): WGPUTextureUsage; cdecl;

  WGPUProcTextureGetWidth = function(texture: WGPUTexture): UInt32; cdecl;

  WGPUProcTextureSetLabel = procedure(texture: WGPUTexture; const &label: PUTF8Char); cdecl;

  WGPUProcTextureSetLabel2 = procedure(texture: WGPUTexture; &label: WGPUStringView); cdecl;

  WGPUProcTextureAddRef = procedure(texture: WGPUTexture); cdecl;

  WGPUProcTextureRelease = procedure(texture: WGPUTexture); cdecl;

  WGPUProcTextureViewSetLabel = procedure(textureView: WGPUTextureView; const &label: PUTF8Char); cdecl;

  WGPUProcTextureViewSetLabel2 = procedure(textureView: WGPUTextureView; &label: WGPUStringView); cdecl;

  WGPUProcTextureViewAddRef = procedure(textureView: WGPUTextureView); cdecl;

  WGPUProcTextureViewRelease = procedure(textureView: WGPUTextureView); cdecl;

const
  WGPUBufferUsage_None: WGPUBufferUsage = $0000000000000000;
  WGPUBufferUsage_MapRead: WGPUBufferUsage = $0000000000000001;
  WGPUBufferUsage_MapWrite: WGPUBufferUsage = $0000000000000002;
  WGPUBufferUsage_CopySrc: WGPUBufferUsage = $0000000000000004;
  WGPUBufferUsage_CopyDst: WGPUBufferUsage = $0000000000000008;
  WGPUBufferUsage_Index: WGPUBufferUsage = $0000000000000010;
  WGPUBufferUsage_Vertex: WGPUBufferUsage = $0000000000000020;
  WGPUBufferUsage_Uniform: WGPUBufferUsage = $0000000000000040;
  WGPUBufferUsage_Storage: WGPUBufferUsage = $0000000000000080;
  WGPUBufferUsage_Indirect: WGPUBufferUsage = $0000000000000100;
  WGPUBufferUsage_QueryResolve: WGPUBufferUsage = $0000000000000200;
  WGPUColorWriteMask_None: WGPUColorWriteMask = $0000000000000000;
  WGPUColorWriteMask_Red: WGPUColorWriteMask = $0000000000000001;
  WGPUColorWriteMask_Green: WGPUColorWriteMask = $0000000000000002;
  WGPUColorWriteMask_Blue: WGPUColorWriteMask = $0000000000000004;
  WGPUColorWriteMask_Alpha: WGPUColorWriteMask = $0000000000000008;
  WGPUColorWriteMask_All: WGPUColorWriteMask = $000000000000000F;
  WGPUHeapProperty_DeviceLocal: WGPUHeapProperty = $0000000000000001;
  WGPUHeapProperty_HostVisible: WGPUHeapProperty = $0000000000000002;
  WGPUHeapProperty_HostCoherent: WGPUHeapProperty = $0000000000000004;
  WGPUHeapProperty_HostUncached: WGPUHeapProperty = $0000000000000008;
  WGPUHeapProperty_HostCached: WGPUHeapProperty = $0000000000000010;
  WGPUMapMode_None: WGPUMapMode = $0000000000000000;
  WGPUMapMode_Read: WGPUMapMode = $0000000000000001;
  WGPUMapMode_Write: WGPUMapMode = $0000000000000002;
  WGPUShaderStage_None: WGPUShaderStage = $0000000000000000;
  WGPUShaderStage_Vertex: WGPUShaderStage = $0000000000000001;
  WGPUShaderStage_Fragment: WGPUShaderStage = $0000000000000002;
  WGPUShaderStage_Compute: WGPUShaderStage = $0000000000000004;
  WGPUTextureUsage_None: WGPUTextureUsage = $0000000000000000;
  WGPUTextureUsage_CopySrc: WGPUTextureUsage = $0000000000000001;
  WGPUTextureUsage_CopyDst: WGPUTextureUsage = $0000000000000002;
  WGPUTextureUsage_TextureBinding: WGPUTextureUsage = $0000000000000004;
  WGPUTextureUsage_StorageBinding: WGPUTextureUsage = $0000000000000008;
  WGPUTextureUsage_RenderAttachment: WGPUTextureUsage = $0000000000000010;
  WGPUTextureUsage_TransientAttachment: WGPUTextureUsage = $0000000000000020;
  WGPUTextureUsage_StorageAttachment: WGPUTextureUsage = $0000000000000040;

procedure wgpuAdapterInfoFreeMembers(value: WGPUAdapterInfo); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterInfoFreeMembers';

procedure wgpuAdapterPropertiesFreeMembers(value: WGPUAdapterProperties); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterPropertiesFreeMembers';

procedure wgpuAdapterPropertiesMemoryHeapsFreeMembers(value: WGPUAdapterPropertiesMemoryHeaps); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterPropertiesMemoryHeapsFreeMembers';

function wgpuCreateInstance(const descriptor: PWGPUInstanceDescriptor): WGPUInstance; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCreateInstance';

procedure wgpuDrmFormatCapabilitiesFreeMembers(value: WGPUDrmFormatCapabilities); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDrmFormatCapabilitiesFreeMembers';

function wgpuGetInstanceFeatures(features: PWGPUInstanceFeatures): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuGetInstanceFeatures';

function wgpuGetProcAddress(device: WGPUDevice; const procName: PUTF8Char): WGPUProc; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuGetProcAddress';

function wgpuGetProcAddress2(device: WGPUDevice; procName: WGPUStringView): WGPUProc; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuGetProcAddress2';

procedure wgpuSharedBufferMemoryEndAccessStateFreeMembers(value: WGPUSharedBufferMemoryEndAccessState); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemoryEndAccessStateFreeMembers';

procedure wgpuSharedTextureMemoryEndAccessStateFreeMembers(value: WGPUSharedTextureMemoryEndAccessState); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemoryEndAccessStateFreeMembers';

procedure wgpuSurfaceCapabilitiesFreeMembers(value: WGPUSurfaceCapabilities); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceCapabilitiesFreeMembers';

function wgpuAdapterCreateDevice(adapter: WGPUAdapter; const descriptor: PWGPUDeviceDescriptor): WGPUDevice; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterCreateDevice';

function wgpuAdapterEnumerateFeatures(adapter: WGPUAdapter; features: PWGPUFeatureName): NativeUInt; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterEnumerateFeatures';

function wgpuAdapterGetFormatCapabilities(adapter: WGPUAdapter; format: WGPUTextureFormat; capabilities: PWGPUFormatCapabilities): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterGetFormatCapabilities';

function wgpuAdapterGetInfo(adapter: WGPUAdapter; info: PWGPUAdapterInfo): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterGetInfo';

function wgpuAdapterGetInstance(adapter: WGPUAdapter): WGPUInstance; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterGetInstance';

function wgpuAdapterGetLimits(adapter: WGPUAdapter; limits: PWGPUSupportedLimits): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterGetLimits';

function wgpuAdapterGetProperties(adapter: WGPUAdapter; properties: PWGPUAdapterProperties): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterGetProperties';

function wgpuAdapterHasFeature(adapter: WGPUAdapter; feature: WGPUFeatureName): WGPUBool; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterHasFeature';

procedure wgpuAdapterRequestDevice(adapter: WGPUAdapter; const descriptor: PWGPUDeviceDescriptor; callback: WGPURequestDeviceCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterRequestDevice';

function wgpuAdapterRequestDevice2(adapter: WGPUAdapter; const options: PWGPUDeviceDescriptor; callbackInfo: WGPURequestDeviceCallbackInfo2): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterRequestDevice2';

function wgpuAdapterRequestDeviceF(adapter: WGPUAdapter; const options: PWGPUDeviceDescriptor; callbackInfo: WGPURequestDeviceCallbackInfo): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterRequestDeviceF';

procedure wgpuAdapterAddRef(adapter: WGPUAdapter); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterAddRef';

procedure wgpuAdapterRelease(adapter: WGPUAdapter); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuAdapterRelease';

procedure wgpuBindGroupSetLabel(bindGroup: WGPUBindGroup; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBindGroupSetLabel';

procedure wgpuBindGroupSetLabel2(bindGroup: WGPUBindGroup; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBindGroupSetLabel2';

procedure wgpuBindGroupAddRef(bindGroup: WGPUBindGroup); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBindGroupAddRef';

procedure wgpuBindGroupRelease(bindGroup: WGPUBindGroup); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBindGroupRelease';

procedure wgpuBindGroupLayoutSetLabel(bindGroupLayout: WGPUBindGroupLayout; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBindGroupLayoutSetLabel';

procedure wgpuBindGroupLayoutSetLabel2(bindGroupLayout: WGPUBindGroupLayout; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBindGroupLayoutSetLabel2';

procedure wgpuBindGroupLayoutAddRef(bindGroupLayout: WGPUBindGroupLayout); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBindGroupLayoutAddRef';

procedure wgpuBindGroupLayoutRelease(bindGroupLayout: WGPUBindGroupLayout); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBindGroupLayoutRelease';

procedure wgpuBufferDestroy(buffer: WGPUBuffer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferDestroy';

function wgpuBufferGetConstMappedRange(buffer: WGPUBuffer; offset: NativeUInt; size: NativeUInt): Pointer; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferGetConstMappedRange';

function wgpuBufferGetMapState(buffer: WGPUBuffer): WGPUBufferMapState; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferGetMapState';

function wgpuBufferGetMappedRange(buffer: WGPUBuffer; offset: NativeUInt; size: NativeUInt): Pointer; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferGetMappedRange';

function wgpuBufferGetSize(buffer: WGPUBuffer): UInt64; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferGetSize';

function wgpuBufferGetUsage(buffer: WGPUBuffer): WGPUBufferUsage; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferGetUsage';

procedure wgpuBufferMapAsync(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callback: WGPUBufferMapCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferMapAsync';

function wgpuBufferMapAsync2(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callbackInfo: WGPUBufferMapCallbackInfo2): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferMapAsync2';

function wgpuBufferMapAsyncF(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callbackInfo: WGPUBufferMapCallbackInfo): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferMapAsyncF';

procedure wgpuBufferSetLabel(buffer: WGPUBuffer; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferSetLabel';

procedure wgpuBufferSetLabel2(buffer: WGPUBuffer; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferSetLabel2';

procedure wgpuBufferUnmap(buffer: WGPUBuffer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferUnmap';

procedure wgpuBufferAddRef(buffer: WGPUBuffer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferAddRef';

procedure wgpuBufferRelease(buffer: WGPUBuffer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuBufferRelease';

procedure wgpuCommandBufferSetLabel(commandBuffer: WGPUCommandBuffer; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandBufferSetLabel';

procedure wgpuCommandBufferSetLabel2(commandBuffer: WGPUCommandBuffer; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandBufferSetLabel2';

procedure wgpuCommandBufferAddRef(commandBuffer: WGPUCommandBuffer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandBufferAddRef';

procedure wgpuCommandBufferRelease(commandBuffer: WGPUCommandBuffer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandBufferRelease';

function wgpuCommandEncoderBeginComputePass(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPUComputePassDescriptor): WGPUComputePassEncoder; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderBeginComputePass';

function wgpuCommandEncoderBeginRenderPass(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPURenderPassDescriptor): WGPURenderPassEncoder; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderBeginRenderPass';

procedure wgpuCommandEncoderClearBuffer(commandEncoder: WGPUCommandEncoder; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderClearBuffer';

procedure wgpuCommandEncoderCopyBufferToBuffer(commandEncoder: WGPUCommandEncoder; source: WGPUBuffer; sourceOffset: UInt64; destination: WGPUBuffer; destinationOffset: UInt64; size: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderCopyBufferToBuffer';

procedure wgpuCommandEncoderCopyBufferToTexture(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyBuffer; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderCopyBufferToTexture';

procedure wgpuCommandEncoderCopyTextureToBuffer(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyBuffer; const copySize: PWGPUExtent3D); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderCopyTextureToBuffer';

procedure wgpuCommandEncoderCopyTextureToTexture(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderCopyTextureToTexture';

function wgpuCommandEncoderFinish(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPUCommandBufferDescriptor): WGPUCommandBuffer; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderFinish';

procedure wgpuCommandEncoderInjectValidationError(commandEncoder: WGPUCommandEncoder; const &message: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderInjectValidationError';

procedure wgpuCommandEncoderInjectValidationError2(commandEncoder: WGPUCommandEncoder; &message: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderInjectValidationError2';

procedure wgpuCommandEncoderInsertDebugMarker(commandEncoder: WGPUCommandEncoder; const markerLabel: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderInsertDebugMarker';

procedure wgpuCommandEncoderInsertDebugMarker2(commandEncoder: WGPUCommandEncoder; markerLabel: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderInsertDebugMarker2';

procedure wgpuCommandEncoderPopDebugGroup(commandEncoder: WGPUCommandEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderPopDebugGroup';

procedure wgpuCommandEncoderPushDebugGroup(commandEncoder: WGPUCommandEncoder; const groupLabel: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderPushDebugGroup';

procedure wgpuCommandEncoderPushDebugGroup2(commandEncoder: WGPUCommandEncoder; groupLabel: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderPushDebugGroup2';

procedure wgpuCommandEncoderResolveQuerySet(commandEncoder: WGPUCommandEncoder; querySet: WGPUQuerySet; firstQuery: UInt32; queryCount: UInt32; destination: WGPUBuffer; destinationOffset: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderResolveQuerySet';

procedure wgpuCommandEncoderSetLabel(commandEncoder: WGPUCommandEncoder; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderSetLabel';

procedure wgpuCommandEncoderSetLabel2(commandEncoder: WGPUCommandEncoder; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderSetLabel2';

procedure wgpuCommandEncoderWriteBuffer(commandEncoder: WGPUCommandEncoder; buffer: WGPUBuffer; bufferOffset: UInt64; const data: PUInt8; size: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderWriteBuffer';

procedure wgpuCommandEncoderWriteTimestamp(commandEncoder: WGPUCommandEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderWriteTimestamp';

procedure wgpuCommandEncoderAddRef(commandEncoder: WGPUCommandEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderAddRef';

procedure wgpuCommandEncoderRelease(commandEncoder: WGPUCommandEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuCommandEncoderRelease';

procedure wgpuComputePassEncoderDispatchWorkgroups(computePassEncoder: WGPUComputePassEncoder; workgroupCountX: UInt32; workgroupCountY: UInt32; workgroupCountZ: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderDispatchWorkgroups';

procedure wgpuComputePassEncoderDispatchWorkgroupsIndirect(computePassEncoder: WGPUComputePassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderDispatchWorkgroupsIndirect';

procedure wgpuComputePassEncoderEnd(computePassEncoder: WGPUComputePassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderEnd';

procedure wgpuComputePassEncoderInsertDebugMarker(computePassEncoder: WGPUComputePassEncoder; const markerLabel: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderInsertDebugMarker';

procedure wgpuComputePassEncoderInsertDebugMarker2(computePassEncoder: WGPUComputePassEncoder; markerLabel: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderInsertDebugMarker2';

procedure wgpuComputePassEncoderPopDebugGroup(computePassEncoder: WGPUComputePassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderPopDebugGroup';

procedure wgpuComputePassEncoderPushDebugGroup(computePassEncoder: WGPUComputePassEncoder; const groupLabel: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderPushDebugGroup';

procedure wgpuComputePassEncoderPushDebugGroup2(computePassEncoder: WGPUComputePassEncoder; groupLabel: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderPushDebugGroup2';

procedure wgpuComputePassEncoderSetBindGroup(computePassEncoder: WGPUComputePassEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderSetBindGroup';

procedure wgpuComputePassEncoderSetLabel(computePassEncoder: WGPUComputePassEncoder; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderSetLabel';

procedure wgpuComputePassEncoderSetLabel2(computePassEncoder: WGPUComputePassEncoder; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderSetLabel2';

procedure wgpuComputePassEncoderSetPipeline(computePassEncoder: WGPUComputePassEncoder; pipeline: WGPUComputePipeline); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderSetPipeline';

procedure wgpuComputePassEncoderWriteTimestamp(computePassEncoder: WGPUComputePassEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderWriteTimestamp';

procedure wgpuComputePassEncoderAddRef(computePassEncoder: WGPUComputePassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderAddRef';

procedure wgpuComputePassEncoderRelease(computePassEncoder: WGPUComputePassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePassEncoderRelease';

function wgpuComputePipelineGetBindGroupLayout(computePipeline: WGPUComputePipeline; groupIndex: UInt32): WGPUBindGroupLayout; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePipelineGetBindGroupLayout';

procedure wgpuComputePipelineSetLabel(computePipeline: WGPUComputePipeline; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePipelineSetLabel';

procedure wgpuComputePipelineSetLabel2(computePipeline: WGPUComputePipeline; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePipelineSetLabel2';

procedure wgpuComputePipelineAddRef(computePipeline: WGPUComputePipeline); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePipelineAddRef';

procedure wgpuComputePipelineRelease(computePipeline: WGPUComputePipeline); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuComputePipelineRelease';

function wgpuDeviceCreateBindGroup(device: WGPUDevice; const descriptor: PWGPUBindGroupDescriptor): WGPUBindGroup; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateBindGroup';

function wgpuDeviceCreateBindGroupLayout(device: WGPUDevice; const descriptor: PWGPUBindGroupLayoutDescriptor): WGPUBindGroupLayout; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateBindGroupLayout';

function wgpuDeviceCreateBuffer(device: WGPUDevice; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateBuffer';

function wgpuDeviceCreateCommandEncoder(device: WGPUDevice; const descriptor: PWGPUCommandEncoderDescriptor): WGPUCommandEncoder; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateCommandEncoder';

function wgpuDeviceCreateComputePipeline(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor): WGPUComputePipeline; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateComputePipeline';

procedure wgpuDeviceCreateComputePipelineAsync(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callback: WGPUCreateComputePipelineAsyncCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateComputePipelineAsync';

function wgpuDeviceCreateComputePipelineAsync2(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo2): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateComputePipelineAsync2';

function wgpuDeviceCreateComputePipelineAsyncF(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateComputePipelineAsyncF';

function wgpuDeviceCreateErrorBuffer(device: WGPUDevice; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateErrorBuffer';

function wgpuDeviceCreateErrorExternalTexture(device: WGPUDevice): WGPUExternalTexture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateErrorExternalTexture';

function wgpuDeviceCreateErrorShaderModule(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor; const errorMessage: PUTF8Char): WGPUShaderModule; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateErrorShaderModule';

function wgpuDeviceCreateErrorShaderModule2(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor; errorMessage: WGPUStringView): WGPUShaderModule; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateErrorShaderModule2';

function wgpuDeviceCreateErrorTexture(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateErrorTexture';

function wgpuDeviceCreateExternalTexture(device: WGPUDevice; const externalTextureDescriptor: PWGPUExternalTextureDescriptor): WGPUExternalTexture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateExternalTexture';

function wgpuDeviceCreatePipelineLayout(device: WGPUDevice; const descriptor: PWGPUPipelineLayoutDescriptor): WGPUPipelineLayout; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreatePipelineLayout';

function wgpuDeviceCreateQuerySet(device: WGPUDevice; const descriptor: PWGPUQuerySetDescriptor): WGPUQuerySet; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateQuerySet';

function wgpuDeviceCreateRenderBundleEncoder(device: WGPUDevice; const descriptor: PWGPURenderBundleEncoderDescriptor): WGPURenderBundleEncoder; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateRenderBundleEncoder';

function wgpuDeviceCreateRenderPipeline(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor): WGPURenderPipeline; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateRenderPipeline';

procedure wgpuDeviceCreateRenderPipelineAsync(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callback: WGPUCreateRenderPipelineAsyncCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateRenderPipelineAsync';

function wgpuDeviceCreateRenderPipelineAsync2(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo2): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateRenderPipelineAsync2';

function wgpuDeviceCreateRenderPipelineAsyncF(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateRenderPipelineAsyncF';

function wgpuDeviceCreateSampler(device: WGPUDevice; const descriptor: PWGPUSamplerDescriptor): WGPUSampler; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateSampler';

function wgpuDeviceCreateShaderModule(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor): WGPUShaderModule; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateShaderModule';

function wgpuDeviceCreateSwapChain(device: WGPUDevice; surface: WGPUSurface; const descriptor: PWGPUSwapChainDescriptor): WGPUSwapChain; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateSwapChain';

function wgpuDeviceCreateTexture(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceCreateTexture';

procedure wgpuDeviceDestroy(device: WGPUDevice); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceDestroy';

function wgpuDeviceEnumerateFeatures(device: WGPUDevice; features: PWGPUFeatureName): NativeUInt; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceEnumerateFeatures';

procedure wgpuDeviceForceLoss(device: WGPUDevice; &type: WGPUDeviceLostReason; const &message: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceForceLoss';

procedure wgpuDeviceForceLoss2(device: WGPUDevice; &type: WGPUDeviceLostReason; &message: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceForceLoss2';

function wgpuDeviceGetAHardwareBufferProperties(device: WGPUDevice; handle: Pointer; properties: PWGPUAHardwareBufferProperties): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceGetAHardwareBufferProperties';

function wgpuDeviceGetAdapter(device: WGPUDevice): WGPUAdapter; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceGetAdapter';

function wgpuDeviceGetLimits(device: WGPUDevice; limits: PWGPUSupportedLimits): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceGetLimits';

function wgpuDeviceGetQueue(device: WGPUDevice): WGPUQueue; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceGetQueue';

function wgpuDeviceGetSupportedSurfaceUsage(device: WGPUDevice; surface: WGPUSurface): WGPUTextureUsage; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceGetSupportedSurfaceUsage';

function wgpuDeviceHasFeature(device: WGPUDevice; feature: WGPUFeatureName): WGPUBool; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceHasFeature';

function wgpuDeviceImportSharedBufferMemory(device: WGPUDevice; const descriptor: PWGPUSharedBufferMemoryDescriptor): WGPUSharedBufferMemory; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceImportSharedBufferMemory';

function wgpuDeviceImportSharedFence(device: WGPUDevice; const descriptor: PWGPUSharedFenceDescriptor): WGPUSharedFence; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceImportSharedFence';

function wgpuDeviceImportSharedTextureMemory(device: WGPUDevice; const descriptor: PWGPUSharedTextureMemoryDescriptor): WGPUSharedTextureMemory; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceImportSharedTextureMemory';

procedure wgpuDeviceInjectError(device: WGPUDevice; &type: WGPUErrorType; const &message: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceInjectError';

procedure wgpuDeviceInjectError2(device: WGPUDevice; &type: WGPUErrorType; &message: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceInjectError2';

procedure wgpuDevicePopErrorScope(device: WGPUDevice; oldCallback: WGPUErrorCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDevicePopErrorScope';

function wgpuDevicePopErrorScope2(device: WGPUDevice; callbackInfo: WGPUPopErrorScopeCallbackInfo2): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDevicePopErrorScope2';

function wgpuDevicePopErrorScopeF(device: WGPUDevice; callbackInfo: WGPUPopErrorScopeCallbackInfo): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDevicePopErrorScopeF';

procedure wgpuDevicePushErrorScope(device: WGPUDevice; filter: WGPUErrorFilter); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDevicePushErrorScope';

procedure wgpuDeviceSetDeviceLostCallback(device: WGPUDevice; callback: WGPUDeviceLostCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceSetDeviceLostCallback';

procedure wgpuDeviceSetLabel(device: WGPUDevice; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceSetLabel';

procedure wgpuDeviceSetLabel2(device: WGPUDevice; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceSetLabel2';

procedure wgpuDeviceSetLoggingCallback(device: WGPUDevice; callback: WGPULoggingCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceSetLoggingCallback';

procedure wgpuDeviceSetUncapturedErrorCallback(device: WGPUDevice; callback: WGPUErrorCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceSetUncapturedErrorCallback';

procedure wgpuDeviceTick(device: WGPUDevice); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceTick';

procedure wgpuDeviceValidateTextureDescriptor(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceValidateTextureDescriptor';

procedure wgpuDeviceAddRef(device: WGPUDevice); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceAddRef';

procedure wgpuDeviceRelease(device: WGPUDevice); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuDeviceRelease';

procedure wgpuExternalTextureDestroy(externalTexture: WGPUExternalTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuExternalTextureDestroy';

procedure wgpuExternalTextureExpire(externalTexture: WGPUExternalTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuExternalTextureExpire';

procedure wgpuExternalTextureRefresh(externalTexture: WGPUExternalTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuExternalTextureRefresh';

procedure wgpuExternalTextureSetLabel(externalTexture: WGPUExternalTexture; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuExternalTextureSetLabel';

procedure wgpuExternalTextureSetLabel2(externalTexture: WGPUExternalTexture; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuExternalTextureSetLabel2';

procedure wgpuExternalTextureAddRef(externalTexture: WGPUExternalTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuExternalTextureAddRef';

procedure wgpuExternalTextureRelease(externalTexture: WGPUExternalTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuExternalTextureRelease';

function wgpuInstanceCreateSurface(instance: WGPUInstance; const descriptor: PWGPUSurfaceDescriptor): WGPUSurface; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceCreateSurface';

function wgpuInstanceEnumerateWGSLLanguageFeatures(instance: WGPUInstance; features: PWGPUWGSLFeatureName): NativeUInt; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceEnumerateWGSLLanguageFeatures';

function wgpuInstanceHasWGSLLanguageFeature(instance: WGPUInstance; feature: WGPUWGSLFeatureName): WGPUBool; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceHasWGSLLanguageFeature';

procedure wgpuInstanceProcessEvents(instance: WGPUInstance); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceProcessEvents';

procedure wgpuInstanceRequestAdapter(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callback: WGPURequestAdapterCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceRequestAdapter';

function wgpuInstanceRequestAdapter2(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callbackInfo: WGPURequestAdapterCallbackInfo2): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceRequestAdapter2';

function wgpuInstanceRequestAdapterF(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callbackInfo: WGPURequestAdapterCallbackInfo): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceRequestAdapterF';

function wgpuInstanceWaitAny(instance: WGPUInstance; futureCount: NativeUInt; futures: PWGPUFutureWaitInfo; timeoutNS: UInt64): WGPUWaitStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceWaitAny';

procedure wgpuInstanceAddRef(instance: WGPUInstance); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceAddRef';

procedure wgpuInstanceRelease(instance: WGPUInstance); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuInstanceRelease';

procedure wgpuPipelineLayoutSetLabel(pipelineLayout: WGPUPipelineLayout; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuPipelineLayoutSetLabel';

procedure wgpuPipelineLayoutSetLabel2(pipelineLayout: WGPUPipelineLayout; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuPipelineLayoutSetLabel2';

procedure wgpuPipelineLayoutAddRef(pipelineLayout: WGPUPipelineLayout); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuPipelineLayoutAddRef';

procedure wgpuPipelineLayoutRelease(pipelineLayout: WGPUPipelineLayout); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuPipelineLayoutRelease';

procedure wgpuQuerySetDestroy(querySet: WGPUQuerySet); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQuerySetDestroy';

function wgpuQuerySetGetCount(querySet: WGPUQuerySet): UInt32; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQuerySetGetCount';

function wgpuQuerySetGetType(querySet: WGPUQuerySet): WGPUQueryType; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQuerySetGetType';

procedure wgpuQuerySetSetLabel(querySet: WGPUQuerySet; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQuerySetSetLabel';

procedure wgpuQuerySetSetLabel2(querySet: WGPUQuerySet; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQuerySetSetLabel2';

procedure wgpuQuerySetAddRef(querySet: WGPUQuerySet); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQuerySetAddRef';

procedure wgpuQuerySetRelease(querySet: WGPUQuerySet); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQuerySetRelease';

procedure wgpuQueueCopyExternalTextureForBrowser(queue: WGPUQueue; const source: PWGPUImageCopyExternalTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D; const options: PWGPUCopyTextureForBrowserOptions); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueCopyExternalTextureForBrowser';

procedure wgpuQueueCopyTextureForBrowser(queue: WGPUQueue; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D; const options: PWGPUCopyTextureForBrowserOptions); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueCopyTextureForBrowser';

procedure wgpuQueueOnSubmittedWorkDone(queue: WGPUQueue; callback: WGPUQueueWorkDoneCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueOnSubmittedWorkDone';

function wgpuQueueOnSubmittedWorkDone2(queue: WGPUQueue; callbackInfo: WGPUQueueWorkDoneCallbackInfo2): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueOnSubmittedWorkDone2';

function wgpuQueueOnSubmittedWorkDoneF(queue: WGPUQueue; callbackInfo: WGPUQueueWorkDoneCallbackInfo): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueOnSubmittedWorkDoneF';

procedure wgpuQueueSetLabel(queue: WGPUQueue; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueSetLabel';

procedure wgpuQueueSetLabel2(queue: WGPUQueue; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueSetLabel2';

procedure wgpuQueueSubmit(queue: WGPUQueue; commandCount: NativeUInt; const commands: PWGPUCommandBuffer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueSubmit';

procedure wgpuQueueWriteBuffer(queue: WGPUQueue; buffer: WGPUBuffer; bufferOffset: UInt64; const data: Pointer; size: NativeUInt); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueWriteBuffer';

procedure wgpuQueueWriteTexture(queue: WGPUQueue; const destination: PWGPUImageCopyTexture; const data: Pointer; dataSize: NativeUInt; const dataLayout: PWGPUTextureDataLayout; const writeSize: PWGPUExtent3D); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueWriteTexture';

procedure wgpuQueueAddRef(queue: WGPUQueue); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueAddRef';

procedure wgpuQueueRelease(queue: WGPUQueue); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuQueueRelease';

procedure wgpuRenderBundleSetLabel(renderBundle: WGPURenderBundle; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleSetLabel';

procedure wgpuRenderBundleSetLabel2(renderBundle: WGPURenderBundle; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleSetLabel2';

procedure wgpuRenderBundleAddRef(renderBundle: WGPURenderBundle); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleAddRef';

procedure wgpuRenderBundleRelease(renderBundle: WGPURenderBundle); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleRelease';

procedure wgpuRenderBundleEncoderDraw(renderBundleEncoder: WGPURenderBundleEncoder; vertexCount: UInt32; instanceCount: UInt32; firstVertex: UInt32; firstInstance: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderDraw';

procedure wgpuRenderBundleEncoderDrawIndexed(renderBundleEncoder: WGPURenderBundleEncoder; indexCount: UInt32; instanceCount: UInt32; firstIndex: UInt32; baseVertex: Int32; firstInstance: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderDrawIndexed';

procedure wgpuRenderBundleEncoderDrawIndexedIndirect(renderBundleEncoder: WGPURenderBundleEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderDrawIndexedIndirect';

procedure wgpuRenderBundleEncoderDrawIndirect(renderBundleEncoder: WGPURenderBundleEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderDrawIndirect';

function wgpuRenderBundleEncoderFinish(renderBundleEncoder: WGPURenderBundleEncoder; const descriptor: PWGPURenderBundleDescriptor): WGPURenderBundle; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderFinish';

procedure wgpuRenderBundleEncoderInsertDebugMarker(renderBundleEncoder: WGPURenderBundleEncoder; const markerLabel: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderInsertDebugMarker';

procedure wgpuRenderBundleEncoderInsertDebugMarker2(renderBundleEncoder: WGPURenderBundleEncoder; markerLabel: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderInsertDebugMarker2';

procedure wgpuRenderBundleEncoderPopDebugGroup(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderPopDebugGroup';

procedure wgpuRenderBundleEncoderPushDebugGroup(renderBundleEncoder: WGPURenderBundleEncoder; const groupLabel: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderPushDebugGroup';

procedure wgpuRenderBundleEncoderPushDebugGroup2(renderBundleEncoder: WGPURenderBundleEncoder; groupLabel: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderPushDebugGroup2';

procedure wgpuRenderBundleEncoderSetBindGroup(renderBundleEncoder: WGPURenderBundleEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderSetBindGroup';

procedure wgpuRenderBundleEncoderSetIndexBuffer(renderBundleEncoder: WGPURenderBundleEncoder; buffer: WGPUBuffer; format: WGPUIndexFormat; offset: UInt64; size: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderSetIndexBuffer';

procedure wgpuRenderBundleEncoderSetLabel(renderBundleEncoder: WGPURenderBundleEncoder; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderSetLabel';

procedure wgpuRenderBundleEncoderSetLabel2(renderBundleEncoder: WGPURenderBundleEncoder; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderSetLabel2';

procedure wgpuRenderBundleEncoderSetPipeline(renderBundleEncoder: WGPURenderBundleEncoder; pipeline: WGPURenderPipeline); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderSetPipeline';

procedure wgpuRenderBundleEncoderSetVertexBuffer(renderBundleEncoder: WGPURenderBundleEncoder; slot: UInt32; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderSetVertexBuffer';

procedure wgpuRenderBundleEncoderAddRef(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderAddRef';

procedure wgpuRenderBundleEncoderRelease(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderBundleEncoderRelease';

procedure wgpuRenderPassEncoderBeginOcclusionQuery(renderPassEncoder: WGPURenderPassEncoder; queryIndex: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderBeginOcclusionQuery';

procedure wgpuRenderPassEncoderDraw(renderPassEncoder: WGPURenderPassEncoder; vertexCount: UInt32; instanceCount: UInt32; firstVertex: UInt32; firstInstance: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderDraw';

procedure wgpuRenderPassEncoderDrawIndexed(renderPassEncoder: WGPURenderPassEncoder; indexCount: UInt32; instanceCount: UInt32; firstIndex: UInt32; baseVertex: Int32; firstInstance: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderDrawIndexed';

procedure wgpuRenderPassEncoderDrawIndexedIndirect(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderDrawIndexedIndirect';

procedure wgpuRenderPassEncoderDrawIndirect(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderDrawIndirect';

procedure wgpuRenderPassEncoderEnd(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderEnd';

procedure wgpuRenderPassEncoderEndOcclusionQuery(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderEndOcclusionQuery';

procedure wgpuRenderPassEncoderExecuteBundles(renderPassEncoder: WGPURenderPassEncoder; bundleCount: NativeUInt; const bundles: PWGPURenderBundle); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderExecuteBundles';

procedure wgpuRenderPassEncoderInsertDebugMarker(renderPassEncoder: WGPURenderPassEncoder; const markerLabel: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderInsertDebugMarker';

procedure wgpuRenderPassEncoderInsertDebugMarker2(renderPassEncoder: WGPURenderPassEncoder; markerLabel: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderInsertDebugMarker2';

procedure wgpuRenderPassEncoderMultiDrawIndexedIndirect(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64; maxDrawCount: UInt32; drawCountBuffer: WGPUBuffer; drawCountBufferOffset: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderMultiDrawIndexedIndirect';

procedure wgpuRenderPassEncoderMultiDrawIndirect(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64; maxDrawCount: UInt32; drawCountBuffer: WGPUBuffer; drawCountBufferOffset: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderMultiDrawIndirect';

procedure wgpuRenderPassEncoderPixelLocalStorageBarrier(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderPixelLocalStorageBarrier';

procedure wgpuRenderPassEncoderPopDebugGroup(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderPopDebugGroup';

procedure wgpuRenderPassEncoderPushDebugGroup(renderPassEncoder: WGPURenderPassEncoder; const groupLabel: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderPushDebugGroup';

procedure wgpuRenderPassEncoderPushDebugGroup2(renderPassEncoder: WGPURenderPassEncoder; groupLabel: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderPushDebugGroup2';

procedure wgpuRenderPassEncoderSetBindGroup(renderPassEncoder: WGPURenderPassEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetBindGroup';

procedure wgpuRenderPassEncoderSetBlendConstant(renderPassEncoder: WGPURenderPassEncoder; const color: PWGPUColor); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetBlendConstant';

procedure wgpuRenderPassEncoderSetIndexBuffer(renderPassEncoder: WGPURenderPassEncoder; buffer: WGPUBuffer; format: WGPUIndexFormat; offset: UInt64; size: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetIndexBuffer';

procedure wgpuRenderPassEncoderSetLabel(renderPassEncoder: WGPURenderPassEncoder; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetLabel';

procedure wgpuRenderPassEncoderSetLabel2(renderPassEncoder: WGPURenderPassEncoder; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetLabel2';

procedure wgpuRenderPassEncoderSetPipeline(renderPassEncoder: WGPURenderPassEncoder; pipeline: WGPURenderPipeline); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetPipeline';

procedure wgpuRenderPassEncoderSetScissorRect(renderPassEncoder: WGPURenderPassEncoder; x: UInt32; y: UInt32; width: UInt32; height: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetScissorRect';

procedure wgpuRenderPassEncoderSetStencilReference(renderPassEncoder: WGPURenderPassEncoder; reference: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetStencilReference';

procedure wgpuRenderPassEncoderSetVertexBuffer(renderPassEncoder: WGPURenderPassEncoder; slot: UInt32; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetVertexBuffer';

procedure wgpuRenderPassEncoderSetViewport(renderPassEncoder: WGPURenderPassEncoder; x: Single; y: Single; width: Single; height: Single; minDepth: Single; maxDepth: Single); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderSetViewport';

procedure wgpuRenderPassEncoderWriteTimestamp(renderPassEncoder: WGPURenderPassEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderWriteTimestamp';

procedure wgpuRenderPassEncoderAddRef(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderAddRef';

procedure wgpuRenderPassEncoderRelease(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPassEncoderRelease';

function wgpuRenderPipelineGetBindGroupLayout(renderPipeline: WGPURenderPipeline; groupIndex: UInt32): WGPUBindGroupLayout; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPipelineGetBindGroupLayout';

procedure wgpuRenderPipelineSetLabel(renderPipeline: WGPURenderPipeline; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPipelineSetLabel';

procedure wgpuRenderPipelineSetLabel2(renderPipeline: WGPURenderPipeline; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPipelineSetLabel2';

procedure wgpuRenderPipelineAddRef(renderPipeline: WGPURenderPipeline); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPipelineAddRef';

procedure wgpuRenderPipelineRelease(renderPipeline: WGPURenderPipeline); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuRenderPipelineRelease';

procedure wgpuSamplerSetLabel(sampler: WGPUSampler; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSamplerSetLabel';

procedure wgpuSamplerSetLabel2(sampler: WGPUSampler; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSamplerSetLabel2';

procedure wgpuSamplerAddRef(sampler: WGPUSampler); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSamplerAddRef';

procedure wgpuSamplerRelease(sampler: WGPUSampler); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSamplerRelease';

procedure wgpuShaderModuleGetCompilationInfo(shaderModule: WGPUShaderModule; callback: WGPUCompilationInfoCallback; userdata: Pointer); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuShaderModuleGetCompilationInfo';

function wgpuShaderModuleGetCompilationInfo2(shaderModule: WGPUShaderModule; callbackInfo: WGPUCompilationInfoCallbackInfo2): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuShaderModuleGetCompilationInfo2';

function wgpuShaderModuleGetCompilationInfoF(shaderModule: WGPUShaderModule; callbackInfo: WGPUCompilationInfoCallbackInfo): WGPUFuture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuShaderModuleGetCompilationInfoF';

procedure wgpuShaderModuleSetLabel(shaderModule: WGPUShaderModule; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuShaderModuleSetLabel';

procedure wgpuShaderModuleSetLabel2(shaderModule: WGPUShaderModule; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuShaderModuleSetLabel2';

procedure wgpuShaderModuleAddRef(shaderModule: WGPUShaderModule); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuShaderModuleAddRef';

procedure wgpuShaderModuleRelease(shaderModule: WGPUShaderModule); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuShaderModuleRelease';

function wgpuSharedBufferMemoryBeginAccess(sharedBufferMemory: WGPUSharedBufferMemory; buffer: WGPUBuffer; const descriptor: PWGPUSharedBufferMemoryBeginAccessDescriptor): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemoryBeginAccess';

function wgpuSharedBufferMemoryCreateBuffer(sharedBufferMemory: WGPUSharedBufferMemory; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemoryCreateBuffer';

function wgpuSharedBufferMemoryEndAccess(sharedBufferMemory: WGPUSharedBufferMemory; buffer: WGPUBuffer; descriptor: PWGPUSharedBufferMemoryEndAccessState): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemoryEndAccess';

function wgpuSharedBufferMemoryGetProperties(sharedBufferMemory: WGPUSharedBufferMemory; properties: PWGPUSharedBufferMemoryProperties): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemoryGetProperties';

function wgpuSharedBufferMemoryIsDeviceLost(sharedBufferMemory: WGPUSharedBufferMemory): WGPUBool; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemoryIsDeviceLost';

procedure wgpuSharedBufferMemorySetLabel(sharedBufferMemory: WGPUSharedBufferMemory; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemorySetLabel';

procedure wgpuSharedBufferMemorySetLabel2(sharedBufferMemory: WGPUSharedBufferMemory; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemorySetLabel2';

procedure wgpuSharedBufferMemoryAddRef(sharedBufferMemory: WGPUSharedBufferMemory); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemoryAddRef';

procedure wgpuSharedBufferMemoryRelease(sharedBufferMemory: WGPUSharedBufferMemory); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedBufferMemoryRelease';

procedure wgpuSharedFenceExportInfo(sharedFence: WGPUSharedFence; info: PWGPUSharedFenceExportInfo); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedFenceExportInfo';

procedure wgpuSharedFenceAddRef(sharedFence: WGPUSharedFence); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedFenceAddRef';

procedure wgpuSharedFenceRelease(sharedFence: WGPUSharedFence); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedFenceRelease';

function wgpuSharedTextureMemoryBeginAccess(sharedTextureMemory: WGPUSharedTextureMemory; texture: WGPUTexture; const descriptor: PWGPUSharedTextureMemoryBeginAccessDescriptor): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemoryBeginAccess';

function wgpuSharedTextureMemoryCreateTexture(sharedTextureMemory: WGPUSharedTextureMemory; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemoryCreateTexture';

function wgpuSharedTextureMemoryEndAccess(sharedTextureMemory: WGPUSharedTextureMemory; texture: WGPUTexture; descriptor: PWGPUSharedTextureMemoryEndAccessState): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemoryEndAccess';

function wgpuSharedTextureMemoryGetProperties(sharedTextureMemory: WGPUSharedTextureMemory; properties: PWGPUSharedTextureMemoryProperties): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemoryGetProperties';

function wgpuSharedTextureMemoryIsDeviceLost(sharedTextureMemory: WGPUSharedTextureMemory): WGPUBool; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemoryIsDeviceLost';

procedure wgpuSharedTextureMemorySetLabel(sharedTextureMemory: WGPUSharedTextureMemory; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemorySetLabel';

procedure wgpuSharedTextureMemorySetLabel2(sharedTextureMemory: WGPUSharedTextureMemory; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemorySetLabel2';

procedure wgpuSharedTextureMemoryAddRef(sharedTextureMemory: WGPUSharedTextureMemory); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemoryAddRef';

procedure wgpuSharedTextureMemoryRelease(sharedTextureMemory: WGPUSharedTextureMemory); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSharedTextureMemoryRelease';

procedure wgpuSurfaceConfigure(surface: WGPUSurface; const config: PWGPUSurfaceConfiguration); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceConfigure';

function wgpuSurfaceGetCapabilities(surface: WGPUSurface; adapter: WGPUAdapter; capabilities: PWGPUSurfaceCapabilities): WGPUStatus; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceGetCapabilities';

procedure wgpuSurfaceGetCurrentTexture(surface: WGPUSurface; surfaceTexture: PWGPUSurfaceTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceGetCurrentTexture';

function wgpuSurfaceGetPreferredFormat(surface: WGPUSurface; adapter: WGPUAdapter): WGPUTextureFormat; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceGetPreferredFormat';

procedure wgpuSurfacePresent(surface: WGPUSurface); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfacePresent';

procedure wgpuSurfaceSetLabel(surface: WGPUSurface; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceSetLabel';

procedure wgpuSurfaceSetLabel2(surface: WGPUSurface; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceSetLabel2';

procedure wgpuSurfaceUnconfigure(surface: WGPUSurface); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceUnconfigure';

procedure wgpuSurfaceAddRef(surface: WGPUSurface); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceAddRef';

procedure wgpuSurfaceRelease(surface: WGPUSurface); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSurfaceRelease';

function wgpuSwapChainGetCurrentTexture(swapChain: WGPUSwapChain): WGPUTexture; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSwapChainGetCurrentTexture';

function wgpuSwapChainGetCurrentTextureView(swapChain: WGPUSwapChain): WGPUTextureView; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSwapChainGetCurrentTextureView';

procedure wgpuSwapChainPresent(swapChain: WGPUSwapChain); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSwapChainPresent';

procedure wgpuSwapChainAddRef(swapChain: WGPUSwapChain); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSwapChainAddRef';

procedure wgpuSwapChainRelease(swapChain: WGPUSwapChain); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuSwapChainRelease';

function wgpuTextureCreateErrorView(texture: WGPUTexture; const descriptor: PWGPUTextureViewDescriptor): WGPUTextureView; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureCreateErrorView';

function wgpuTextureCreateView(texture: WGPUTexture; const descriptor: PWGPUTextureViewDescriptor): WGPUTextureView; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureCreateView';

procedure wgpuTextureDestroy(texture: WGPUTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureDestroy';

function wgpuTextureGetDepthOrArrayLayers(texture: WGPUTexture): UInt32; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureGetDepthOrArrayLayers';

function wgpuTextureGetDimension(texture: WGPUTexture): WGPUTextureDimension; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureGetDimension';

function wgpuTextureGetFormat(texture: WGPUTexture): WGPUTextureFormat; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureGetFormat';

function wgpuTextureGetHeight(texture: WGPUTexture): UInt32; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureGetHeight';

function wgpuTextureGetMipLevelCount(texture: WGPUTexture): UInt32; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureGetMipLevelCount';

function wgpuTextureGetSampleCount(texture: WGPUTexture): UInt32; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureGetSampleCount';

function wgpuTextureGetUsage(texture: WGPUTexture): WGPUTextureUsage; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureGetUsage';

function wgpuTextureGetWidth(texture: WGPUTexture): UInt32; cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureGetWidth';

procedure wgpuTextureSetLabel(texture: WGPUTexture; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureSetLabel';

procedure wgpuTextureSetLabel2(texture: WGPUTexture; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureSetLabel2';

procedure wgpuTextureAddRef(texture: WGPUTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureAddRef';

procedure wgpuTextureRelease(texture: WGPUTexture); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureRelease';

procedure wgpuTextureViewSetLabel(textureView: WGPUTextureView; const &label: PUTF8Char); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureViewSetLabel';

procedure wgpuTextureViewSetLabel2(textureView: WGPUTextureView; &label: WGPUStringView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureViewSetLabel2';

procedure wgpuTextureViewAddRef(textureView: WGPUTextureView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureViewAddRef';

procedure wgpuTextureViewRelease(textureView: WGPUTextureView); cdecl;
  external WEBGPU_LIB name _PU + 'wgpuTextureViewRelease';

implementation

end.