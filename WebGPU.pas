unit WebGPU;
{ This unit is automatically generated by Chet:
  https://github.com/neslib/Chet }

{$MINENUMSIZE 4}

interface

uses
   Windows, SysUtils;

const
  INT8_MIN = (-128);
  INT16_MIN = (-32768);
  INT32_MIN = (-2147483647-1);
  INT64_MIN = (-9223372036854775807-1);
  INT8_MAX = 127;
  INT16_MAX = 32767;
  INT32_MAX = 2147483647;
  INT64_MAX = 9223372036854775807;
  UINT8_MAX = $ff;
  UINT16_MAX = $ffff;
  UINT32_MAX = $ffffffff;
  UINT64_MAX = $ffffffffffffffff;
  INT_LEAST8_MIN = INT8_MIN;
  INT_LEAST16_MIN = INT16_MIN;
  INT_LEAST32_MIN = INT32_MIN;
  INT_LEAST64_MIN = INT64_MIN;
  INT_LEAST8_MAX = INT8_MAX;
  INT_LEAST16_MAX = INT16_MAX;
  INT_LEAST32_MAX = INT32_MAX;
  INT_LEAST64_MAX = INT64_MAX;
  UINT_LEAST8_MAX = UINT8_MAX;
  UINT_LEAST16_MAX = UINT16_MAX;
  UINT_LEAST32_MAX = UINT32_MAX;
  UINT_LEAST64_MAX = UINT64_MAX;
  INT_FAST8_MIN = INT8_MIN;
  INT_FAST16_MIN = INT16_MIN;
  INT_FAST32_MIN = INT32_MIN;
  INT_FAST64_MIN = INT64_MIN;
  INT_FAST8_MAX = INT8_MAX;
  INT_FAST16_MAX = INT16_MAX;
  INT_FAST32_MAX = INT32_MAX;
  INT_FAST64_MAX = INT64_MAX;
  UINT_FAST8_MAX = UINT8_MAX;
  UINT_FAST16_MAX = UINT16_MAX;
  UINT_FAST32_MAX = UINT32_MAX;
  UINT_FAST64_MAX = UINT64_MAX;
  INTPTR_MIN = INT32_MIN;
  INTPTR_MAX = INT32_MAX;
  UINTPTR_MAX = UINT32_MAX;
  INTMAX_MIN = INT64_MIN;
  INTMAX_MAX = INT64_MAX;
  UINTMAX_MAX = UINT64_MAX;
  PTRDIFF_MIN = INT32_MIN;
  PTRDIFF_MAX = INT32_MAX;
  SIG_ATOMIC_MIN = INT32_MIN;
  SIG_ATOMIC_MAX = INT32_MAX;
  SIZE_MAX = UINT32_MAX;
  WCHAR_MIN = 0;
  WINT_MIN = 0;
  WGPU_ARRAY_LAYER_COUNT_UNDEFINED = UINT32_MAX;
  WGPU_COPY_STRIDE_UNDEFINED = UINT32_MAX;
  WGPU_DEPTH_SLICE_UNDEFINED = UINT32_MAX;
  WGPU_LIMIT_U32_UNDEFINED = UINT32_MAX;
  WGPU_LIMIT_U64_UNDEFINED = UINT64_MAX;
  WGPU_MIP_LEVEL_COUNT_UNDEFINED = UINT32_MAX;
  WGPU_QUERY_SET_INDEX_UNDEFINED = UINT32_MAX;
  WGPU_WHOLE_MAP_SIZE = SIZE_MAX;
  WGPU_WHOLE_SIZE = UINT64_MAX;

type
  // Forward declarations
  PPUTF8Char = ^PUTF8Char;
  PUInt8 = ^UInt8;
  PUInt32 = ^UInt32;
  PUInt64 = ^UInt64;
  PWGPUAdapterImpl = Pointer;
  PPWGPUAdapterImpl = ^PWGPUAdapterImpl;
  PWGPUBindGroupImpl = Pointer;
  PPWGPUBindGroupImpl = ^PWGPUBindGroupImpl;
  PWGPUBindGroupLayoutImpl = Pointer;
  PPWGPUBindGroupLayoutImpl = ^PWGPUBindGroupLayoutImpl;
  PWGPUBufferImpl = Pointer;
  PPWGPUBufferImpl = ^PWGPUBufferImpl;
  PWGPUCommandBufferImpl = Pointer;
  PPWGPUCommandBufferImpl = ^PWGPUCommandBufferImpl;
  PWGPUCommandEncoderImpl = Pointer;
  PPWGPUCommandEncoderImpl = ^PWGPUCommandEncoderImpl;
  PWGPUComputePassEncoderImpl = Pointer;
  PPWGPUComputePassEncoderImpl = ^PWGPUComputePassEncoderImpl;
  PWGPUComputePipelineImpl = Pointer;
  PPWGPUComputePipelineImpl = ^PWGPUComputePipelineImpl;
  PWGPUDeviceImpl = Pointer;
  PPWGPUDeviceImpl = ^PWGPUDeviceImpl;
  PWGPUExternalTextureImpl = Pointer;
  PPWGPUExternalTextureImpl = ^PWGPUExternalTextureImpl;
  PWGPUInstanceImpl = Pointer;
  PPWGPUInstanceImpl = ^PWGPUInstanceImpl;
  PWGPUPipelineLayoutImpl = Pointer;
  PPWGPUPipelineLayoutImpl = ^PWGPUPipelineLayoutImpl;
  PWGPUQuerySetImpl = Pointer;
  PPWGPUQuerySetImpl = ^PWGPUQuerySetImpl;
  PWGPUQueueImpl = Pointer;
  PPWGPUQueueImpl = ^PWGPUQueueImpl;
  PWGPURenderBundleImpl = Pointer;
  PPWGPURenderBundleImpl = ^PWGPURenderBundleImpl;
  PWGPURenderBundleEncoderImpl = Pointer;
  PPWGPURenderBundleEncoderImpl = ^PWGPURenderBundleEncoderImpl;
  PWGPURenderPassEncoderImpl = Pointer;
  PPWGPURenderPassEncoderImpl = ^PWGPURenderPassEncoderImpl;
  PWGPURenderPipelineImpl = Pointer;
  PPWGPURenderPipelineImpl = ^PWGPURenderPipelineImpl;
  PWGPUSamplerImpl = Pointer;
  PPWGPUSamplerImpl = ^PWGPUSamplerImpl;
  PWGPUShaderModuleImpl = Pointer;
  PPWGPUShaderModuleImpl = ^PWGPUShaderModuleImpl;
  PWGPUSharedBufferMemoryImpl = Pointer;
  PPWGPUSharedBufferMemoryImpl = ^PWGPUSharedBufferMemoryImpl;
  PWGPUSharedFenceImpl = Pointer;
  PPWGPUSharedFenceImpl = ^PWGPUSharedFenceImpl;
  PWGPUSharedTextureMemoryImpl = Pointer;
  PPWGPUSharedTextureMemoryImpl = ^PWGPUSharedTextureMemoryImpl;
  PWGPUSurfaceImpl = Pointer;
  PPWGPUSurfaceImpl = ^PWGPUSurfaceImpl;
  PWGPUSwapChainImpl = Pointer;
  PPWGPUSwapChainImpl = ^PWGPUSwapChainImpl;
  PWGPUTextureImpl = Pointer;
  PPWGPUTextureImpl = ^PWGPUTextureImpl;
  PWGPUTextureViewImpl = Pointer;
  PPWGPUTextureViewImpl = ^PWGPUTextureViewImpl;
  PWGPUChainedStruct = ^WGPUChainedStruct;
  PWGPUChainedStructOut = ^WGPUChainedStructOut;
  PWGPUBufferMapCallbackInfo2 = ^WGPUBufferMapCallbackInfo2;
  PWGPUCompilationInfoCallbackInfo2 = ^WGPUCompilationInfoCallbackInfo2;
  PWGPUCreateComputePipelineAsyncCallbackInfo2 = ^WGPUCreateComputePipelineAsyncCallbackInfo2;
  PWGPUCreateRenderPipelineAsyncCallbackInfo2 = ^WGPUCreateRenderPipelineAsyncCallbackInfo2;
  PWGPUDeviceLostCallbackInfo2 = ^WGPUDeviceLostCallbackInfo2;
  PWGPUPopErrorScopeCallbackInfo2 = ^WGPUPopErrorScopeCallbackInfo2;
  PWGPUQueueWorkDoneCallbackInfo2 = ^WGPUQueueWorkDoneCallbackInfo2;
  PWGPURequestAdapterCallbackInfo2 = ^WGPURequestAdapterCallbackInfo2;
  PWGPURequestDeviceCallbackInfo2 = ^WGPURequestDeviceCallbackInfo2;
  PWGPUUncapturedErrorCallbackInfo2 = ^WGPUUncapturedErrorCallbackInfo2;
  PWGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER = ^WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER;
  PWGPUAdapterInfo = ^WGPUAdapterInfo;
  PWGPUAdapterProperties = ^WGPUAdapterProperties;
  PWGPUAdapterPropertiesD3D = ^WGPUAdapterPropertiesD3D;
  PWGPUAdapterPropertiesVk = ^WGPUAdapterPropertiesVk;
  PWGPUBindGroupEntry = ^WGPUBindGroupEntry;
  PWGPUBlendComponent = ^WGPUBlendComponent;
  PWGPUBufferBindingLayout = ^WGPUBufferBindingLayout;
  PWGPUBufferDescriptor = ^WGPUBufferDescriptor;
  PWGPUBufferHostMappedPointer = ^WGPUBufferHostMappedPointer;
  PWGPUBufferMapCallbackInfo = ^WGPUBufferMapCallbackInfo;
  PWGPUColor = ^WGPUColor;
  PWGPUColorTargetStateExpandResolveTextureDawn = ^WGPUColorTargetStateExpandResolveTextureDawn;
  PWGPUCommandBufferDescriptor = ^WGPUCommandBufferDescriptor;
  PWGPUCommandEncoderDescriptor = ^WGPUCommandEncoderDescriptor;
  PWGPUCompilationInfoCallbackInfo = ^WGPUCompilationInfoCallbackInfo;
  PWGPUCompilationMessage = ^WGPUCompilationMessage;
  PWGPUComputePassTimestampWrites = ^WGPUComputePassTimestampWrites;
  PWGPUConstantEntry = ^WGPUConstantEntry;
  PWGPUCopyTextureForBrowserOptions = ^WGPUCopyTextureForBrowserOptions;
  PWGPUCreateComputePipelineAsyncCallbackInfo = ^WGPUCreateComputePipelineAsyncCallbackInfo;
  PWGPUCreateRenderPipelineAsyncCallbackInfo = ^WGPUCreateRenderPipelineAsyncCallbackInfo;
  PWGPUDawnWGSLBlocklist = ^WGPUDawnWGSLBlocklist;
  PWGPUDawnAdapterPropertiesPowerPreference = ^WGPUDawnAdapterPropertiesPowerPreference;
  PWGPUDawnBufferDescriptorErrorInfoFromWireClient = ^WGPUDawnBufferDescriptorErrorInfoFromWireClient;
  PWGPUDawnCacheDeviceDescriptor = ^WGPUDawnCacheDeviceDescriptor;
  PWGPUDawnComputePipelineFullSubgroups = ^WGPUDawnComputePipelineFullSubgroups;
  PWGPUDawnEncoderInternalUsageDescriptor = ^WGPUDawnEncoderInternalUsageDescriptor;
  PWGPUDawnExperimentalSubgroupLimits = ^WGPUDawnExperimentalSubgroupLimits;
  PWGPUDawnRenderPassColorAttachmentRenderToSingleSampled = ^WGPUDawnRenderPassColorAttachmentRenderToSingleSampled;
  PWGPUDawnShaderModuleSPIRVOptionsDescriptor = ^WGPUDawnShaderModuleSPIRVOptionsDescriptor;
  PWGPUDawnTextureInternalUsageDescriptor = ^WGPUDawnTextureInternalUsageDescriptor;
  PWGPUDawnTogglesDescriptor = ^WGPUDawnTogglesDescriptor;
  PWGPUDawnWireWGSLControl = ^WGPUDawnWireWGSLControl;
  PWGPUDeviceLostCallbackInfo = ^WGPUDeviceLostCallbackInfo;
  PWGPUDrmFormatProperties = ^WGPUDrmFormatProperties;
  PWGPUExtent2D = ^WGPUExtent2D;
  PWGPUExtent3D = ^WGPUExtent3D;
  PWGPUExternalTextureBindingEntry = ^WGPUExternalTextureBindingEntry;
  PWGPUExternalTextureBindingLayout = ^WGPUExternalTextureBindingLayout;
  PWGPUFormatCapabilities = ^WGPUFormatCapabilities;
  PWGPUFuture = ^WGPUFuture;
  PWGPUInstanceFeatures = ^WGPUInstanceFeatures;
  PWGPULimits = ^WGPULimits;
  PWGPUMemoryHeapInfo = ^WGPUMemoryHeapInfo;
  PWGPUMultisampleState = ^WGPUMultisampleState;
  PWGPUOrigin2D = ^WGPUOrigin2D;
  PWGPUOrigin3D = ^WGPUOrigin3D;
  PWGPUPipelineLayoutDescriptor = ^WGPUPipelineLayoutDescriptor;
  PWGPUPipelineLayoutStorageAttachment = ^WGPUPipelineLayoutStorageAttachment;
  PWGPUPopErrorScopeCallbackInfo = ^WGPUPopErrorScopeCallbackInfo;
  PWGPUPrimitiveState = ^WGPUPrimitiveState;
  PWGPUQuerySetDescriptor = ^WGPUQuerySetDescriptor;
  PWGPUQueueDescriptor = ^WGPUQueueDescriptor;
  PWGPUQueueWorkDoneCallbackInfo = ^WGPUQueueWorkDoneCallbackInfo;
  PWGPURenderBundleDescriptor = ^WGPURenderBundleDescriptor;
  PWGPURenderBundleEncoderDescriptor = ^WGPURenderBundleEncoderDescriptor;
  PWGPURenderPassDepthStencilAttachment = ^WGPURenderPassDepthStencilAttachment;
  PWGPURenderPassDescriptorExpandResolveRect = ^WGPURenderPassDescriptorExpandResolveRect;
  PWGPURenderPassMaxDrawCount = ^WGPURenderPassMaxDrawCount;
  PWGPURenderPassTimestampWrites = ^WGPURenderPassTimestampWrites;
  PWGPURequestAdapterCallbackInfo = ^WGPURequestAdapterCallbackInfo;
  PWGPURequestAdapterOptions = ^WGPURequestAdapterOptions;
  PWGPURequestDeviceCallbackInfo = ^WGPURequestDeviceCallbackInfo;
  PWGPUSamplerBindingLayout = ^WGPUSamplerBindingLayout;
  PWGPUSamplerDescriptor = ^WGPUSamplerDescriptor;
  PWGPUShaderModuleCompilationOptions = ^WGPUShaderModuleCompilationOptions;
  PWGPUShaderModuleDescriptor = ^WGPUShaderModuleDescriptor;
  PWGPUShaderSourceSPIRV = ^WGPUShaderSourceSPIRV;
  PWGPUShaderSourceWGSL = ^WGPUShaderSourceWGSL;
  PWGPUSharedBufferMemoryBeginAccessDescriptor = ^WGPUSharedBufferMemoryBeginAccessDescriptor;
  PWGPUSharedBufferMemoryDescriptor = ^WGPUSharedBufferMemoryDescriptor;
  PWGPUSharedBufferMemoryEndAccessState = ^WGPUSharedBufferMemoryEndAccessState;
  PWGPUSharedBufferMemoryProperties = ^WGPUSharedBufferMemoryProperties;
  PWGPUSharedFenceDXGISharedHandleDescriptor = ^WGPUSharedFenceDXGISharedHandleDescriptor;
  PWGPUSharedFenceDXGISharedHandleExportInfo = ^WGPUSharedFenceDXGISharedHandleExportInfo;
  PWGPUSharedFenceMTLSharedEventDescriptor = ^WGPUSharedFenceMTLSharedEventDescriptor;
  PWGPUSharedFenceMTLSharedEventExportInfo = ^WGPUSharedFenceMTLSharedEventExportInfo;
  PWGPUSharedFenceDescriptor = ^WGPUSharedFenceDescriptor;
  PWGPUSharedFenceExportInfo = ^TWGPUSharedFenceExportInfo;
  PWGPUSharedFenceVkSemaphoreOpaqueFDDescriptor = ^WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor;
  PWGPUSharedFenceVkSemaphoreOpaqueFDExportInfo = ^WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo;
  PWGPUSharedFenceVkSemaphoreSyncFDDescriptor = ^WGPUSharedFenceVkSemaphoreSyncFDDescriptor;
  PWGPUSharedFenceVkSemaphoreSyncFDExportInfo = ^WGPUSharedFenceVkSemaphoreSyncFDExportInfo;
  PWGPUSharedFenceVkSemaphoreZirconHandleDescriptor = ^WGPUSharedFenceVkSemaphoreZirconHandleDescriptor;
  PWGPUSharedFenceVkSemaphoreZirconHandleExportInfo = ^WGPUSharedFenceVkSemaphoreZirconHandleExportInfo;
  PWGPUSharedTextureMemoryD3DSwapchainBeginState = ^WGPUSharedTextureMemoryD3DSwapchainBeginState;
  PWGPUSharedTextureMemoryDXGISharedHandleDescriptor = ^WGPUSharedTextureMemoryDXGISharedHandleDescriptor;
  PWGPUSharedTextureMemoryEGLImageDescriptor = ^WGPUSharedTextureMemoryEGLImageDescriptor;
  PWGPUSharedTextureMemoryIOSurfaceDescriptor = ^WGPUSharedTextureMemoryIOSurfaceDescriptor;
  PWGPUSharedTextureMemoryAHardwareBufferDescriptor = ^WGPUSharedTextureMemoryAHardwareBufferDescriptor;
  PWGPUSharedTextureMemoryBeginAccessDescriptor = ^WGPUSharedTextureMemoryBeginAccessDescriptor;
  PWGPUSharedTextureMemoryDescriptor = ^WGPUSharedTextureMemoryDescriptor;
  PWGPUSharedTextureMemoryDmaBufPlane = ^WGPUSharedTextureMemoryDmaBufPlane;
  PWGPUSharedTextureMemoryEndAccessState = ^WGPUSharedTextureMemoryEndAccessState;
  PWGPUSharedTextureMemoryOpaqueFDDescriptor = ^WGPUSharedTextureMemoryOpaqueFDDescriptor;
  PWGPUSharedTextureMemoryVkDedicatedAllocationDescriptor = ^WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor;
  PWGPUSharedTextureMemoryVkImageLayoutBeginState = ^WGPUSharedTextureMemoryVkImageLayoutBeginState;
  PWGPUSharedTextureMemoryVkImageLayoutEndState = ^WGPUSharedTextureMemoryVkImageLayoutEndState;
  PWGPUSharedTextureMemoryZirconHandleDescriptor = ^WGPUSharedTextureMemoryZirconHandleDescriptor;
  PWGPUStaticSamplerBindingLayout = ^WGPUStaticSamplerBindingLayout;
  PWGPUStencilFaceState = ^WGPUStencilFaceState;
  PWGPUStorageTextureBindingLayout = ^WGPUStorageTextureBindingLayout;
  PWGPUStringView = ^WGPUStringView;
  PWGPUSurfaceCapabilities = ^WGPUSurfaceCapabilities;
  PWGPUSurfaceConfiguration = ^WGPUSurfaceConfiguration;
  PWGPUSurfaceDescriptor = ^WGPUSurfaceDescriptor;
  PWGPUSurfaceDescriptorFromWindowsCoreWindow = ^WGPUSurfaceDescriptorFromWindowsCoreWindow;
  PWGPUSurfaceDescriptorFromWindowsSwapChainPanel = ^WGPUSurfaceDescriptorFromWindowsSwapChainPanel;
  PWGPUSurfaceSourceXCBWindow = ^WGPUSurfaceSourceXCBWindow;
  PWGPUSurfaceSourceAndroidNativeWindow = ^WGPUSurfaceSourceAndroidNativeWindow;
  PWGPUSurfaceSourceCanvasHTMLSelector_Emscripten = ^WGPUSurfaceSourceCanvasHTMLSelector_Emscripten;
  PWGPUSurfaceSourceMetalLayer = ^WGPUSurfaceSourceMetalLayer;
  PWGPUSurfaceSourceWaylandSurface = ^WGPUSurfaceSourceWaylandSurface;
  PWGPUSurfaceSourceWindowsHWND = ^WGPUSurfaceSourceWindowsHWND;
  PWGPUSurfaceSourceXlibWindow = ^WGPUSurfaceSourceXlibWindow;
  PWGPUSurfaceTexture = ^WGPUSurfaceTexture;
  PWGPUSwapChainDescriptor = ^WGPUSwapChainDescriptor;
  PWGPUTextureBindingLayout = ^WGPUTextureBindingLayout;
  PWGPUTextureBindingViewDimensionDescriptor = ^WGPUTextureBindingViewDimensionDescriptor;
  PWGPUTextureDataLayout = ^WGPUTextureDataLayout;
  PWGPUTextureViewDescriptor = ^WGPUTextureViewDescriptor;
  PWGPUUncapturedErrorCallbackInfo = ^WGPUUncapturedErrorCallbackInfo;
  PWGPUVertexAttribute = ^WGPUVertexAttribute;
  PWGPUYCbCrVkDescriptor = ^WGPUYCbCrVkDescriptor;
  PWGPUAHardwareBufferProperties = ^WGPUAHardwareBufferProperties;
  PWGPUAdapterPropertiesMemoryHeaps = ^WGPUAdapterPropertiesMemoryHeaps;
  PWGPUBindGroupDescriptor = ^WGPUBindGroupDescriptor;
  PWGPUBindGroupLayoutEntry = ^WGPUBindGroupLayoutEntry;
  PWGPUBlendState = ^WGPUBlendState;
  PWGPUCompilationInfo = ^WGPUCompilationInfo;
  PWGPUComputePassDescriptor = ^WGPUComputePassDescriptor;
  PWGPUDepthStencilState = ^WGPUDepthStencilState;
  PWGPUDrmFormatCapabilities = ^WGPUDrmFormatCapabilities;
  PWGPUExternalTextureDescriptor = ^WGPUExternalTextureDescriptor;
  PWGPUFutureWaitInfo = ^WGPUFutureWaitInfo;
  PWGPUImageCopyBuffer = ^WGPUImageCopyBuffer;
  PWGPUImageCopyExternalTexture = ^WGPUImageCopyExternalTexture;
  PWGPUImageCopyTexture = ^WGPUImageCopyTexture;
  PWGPUInstanceDescriptor = ^WGPUInstanceDescriptor;
  PWGPUPipelineLayoutPixelLocalStorage = ^WGPUPipelineLayoutPixelLocalStorage;
  PWGPUProgrammableStageDescriptor = ^WGPUProgrammableStageDescriptor;
  PWGPURenderPassColorAttachment = ^WGPURenderPassColorAttachment;
  PWGPURenderPassStorageAttachment = ^WGPURenderPassStorageAttachment;
  PWGPURequiredLimits = ^WGPURequiredLimits;
  PWGPUSharedTextureMemoryAHardwareBufferProperties = ^WGPUSharedTextureMemoryAHardwareBufferProperties;
  PWGPUSharedTextureMemoryDmaBufDescriptor = ^WGPUSharedTextureMemoryDmaBufDescriptor;
  PWGPUSharedTextureMemoryProperties = ^WGPUSharedTextureMemoryProperties;
  PWGPUSupportedLimits = ^WGPUSupportedLimits;
  PWGPUTextureDescriptor = ^WGPUTextureDescriptor;
  PWGPUVertexBufferLayout = ^WGPUVertexBufferLayout;
  PWGPUBindGroupLayoutDescriptor = ^WGPUBindGroupLayoutDescriptor;
  PWGPUColorTargetState = ^WGPUColorTargetState;
  PWGPUComputePipelineDescriptor = ^WGPUComputePipelineDescriptor;
  PWGPUDeviceDescriptor = ^WGPUDeviceDescriptor;
  PWGPURenderPassDescriptor = ^WGPURenderPassDescriptor;
  PWGPURenderPassPixelLocalStorage = ^WGPURenderPassPixelLocalStorage;
  PWGPUVertexState = ^WGPUVertexState;
  PWGPUFragmentState = ^WGPUFragmentState;
  PWGPURenderPipelineDescriptor = ^WGPURenderPipelineDescriptor;

  wchar_t = Word;
  wint_t = Word;
  int8_t = UTF8Char;
  uint8_t = Byte;
  Puint8_t = ^uint8_t;
  int16_t = Smallint;
  uint16_t = Word;
  int32_t = Integer;
  uint32_t = Cardinal;
  Puint32_t = ^uint32_t;
  int64_t = Int64;
  uint64_t = UInt64;
  Puint64_t = ^uint64_t;
  int_least8_t = UTF8Char;
  uint_least8_t = Byte;
  int_least16_t = Smallint;
  uint_least16_t = Word;
  int_least32_t = Integer;
  uint_least32_t = Cardinal;
  int_least64_t = Int64;
  uint_least64_t = UInt64;
  int_fast8_t = UTF8Char;
  uint_fast8_t = Byte;
  int_fast16_t = Smallint;
  uint_fast16_t = Word;
  int_fast32_t = Integer;
  uint_fast32_t = Cardinal;
  int_fast64_t = Int64;
  uint_fast64_t = UInt64;
  intptr_t = Integer;
  uintptr_t = Cardinal;
  intmax_t = Int64;
  uintmax_t = UInt64;
  ptrdiff_t = Int64;
  size_t = UInt64;
  WGPUFlags = UInt64;
  WGPUBool = UInt32;
  WGPUAdapter = Pointer;
  PWGPUAdapter = ^WGPUAdapter;
  WGPUBindGroup = Pointer;
  PWGPUBindGroup = ^WGPUBindGroup;
  WGPUBindGroupLayout = Pointer;
  PWGPUBindGroupLayout = ^WGPUBindGroupLayout;
  WGPUBuffer = Pointer;
  PWGPUBuffer = ^WGPUBuffer;
  WGPUCommandBuffer = Pointer;
  PWGPUCommandBuffer = ^WGPUCommandBuffer;
  WGPUCommandEncoder = Pointer;
  PWGPUCommandEncoder = ^WGPUCommandEncoder;
  WGPUComputePassEncoder = Pointer;
  PWGPUComputePassEncoder = ^WGPUComputePassEncoder;
  WGPUComputePipeline = Pointer;
  PWGPUComputePipeline = ^WGPUComputePipeline;
  WGPUDevice = Pointer;
  PWGPUDevice = ^WGPUDevice;
  WGPUExternalTexture = Pointer;
  PWGPUExternalTexture = ^WGPUExternalTexture;
  WGPUInstance = Pointer;
  PWGPUInstance = ^WGPUInstance;
  WGPUPipelineLayout = Pointer;
  PWGPUPipelineLayout = ^WGPUPipelineLayout;
  WGPUQuerySet = Pointer;
  PWGPUQuerySet = ^WGPUQuerySet;
  WGPUQueue = Pointer;
  PWGPUQueue = ^WGPUQueue;
  WGPURenderBundle = Pointer;
  PWGPURenderBundle = ^WGPURenderBundle;
  WGPURenderBundleEncoder = Pointer;
  PWGPURenderBundleEncoder = ^WGPURenderBundleEncoder;
  WGPURenderPassEncoder = Pointer;
  PWGPURenderPassEncoder = ^WGPURenderPassEncoder;
  WGPURenderPipeline = Pointer;
  PWGPURenderPipeline = ^WGPURenderPipeline;
  WGPUSampler = Pointer;
  PWGPUSampler = ^WGPUSampler;
  WGPUShaderModule = Pointer;
  PWGPUShaderModule = ^WGPUShaderModule;
  WGPUSharedBufferMemory = Pointer;
  PWGPUSharedBufferMemory = ^WGPUSharedBufferMemory;
  WGPUSharedFence = Pointer;
  PWGPUSharedFence = ^WGPUSharedFence;
  WGPUSharedTextureMemory = Pointer;
  PWGPUSharedTextureMemory = ^WGPUSharedTextureMemory;
  WGPUSurface = Pointer;
  PWGPUSurface = ^WGPUSurface;
  WGPUSwapChain = Pointer;
  PWGPUSwapChain = ^WGPUSwapChain;
  WGPUTexture = Pointer;
  PWGPUTexture = ^WGPUTexture;
  WGPUTextureView = Pointer;
  PWGPUTextureView = ^WGPUTextureView;

  WGPUWGSLFeatureName = (
    WGPUWGSLFeatureName_ReadonlyAndReadwriteStorageTextures = 1,
    WGPUWGSLFeatureName_Packed4x8IntegerDotProduct = 2,
    WGPUWGSLFeatureName_UnrestrictedPointerParameters = 3,
    WGPUWGSLFeatureName_PointerCompositeAccess = 4,
    WGPUWGSLFeatureName_ChromiumTestingUnimplemented = 327680,
    WGPUWGSLFeatureName_ChromiumTestingUnsafeExperimental = 327681,
    WGPUWGSLFeatureName_ChromiumTestingExperimental = 327682,
    WGPUWGSLFeatureName_ChromiumTestingShippedWithKillswitch = 327683,
    WGPUWGSLFeatureName_ChromiumTestingShipped = 327684,
    WGPUWGSLFeatureName_Force32 = 2147483647);
  PWGPUWGSLFeatureName = ^WGPUWGSLFeatureName;

  WGPUAdapterType = (
    WGPUAdapterType_DiscreteGPU = 1,
    WGPUAdapterType_IntegratedGPU = 2,
    WGPUAdapterType_CPU = 3,
    WGPUAdapterType_Unknown = 4,
    WGPUAdapterType_Force32 = 2147483647);
  PWGPUAdapterType = ^WGPUAdapterType;

  WGPUAddressMode = (
    WGPUAddressMode_Undefined = 0,
    WGPUAddressMode_ClampToEdge = 1,
    WGPUAddressMode_Repeat = 2,
    WGPUAddressMode_MirrorRepeat = 3,
    WGPUAddressMode_Force32 = 2147483647);
  PWGPUAddressMode = ^WGPUAddressMode;

  WGPUAlphaMode = (
    WGPUAlphaMode_Opaque = 1,
    WGPUAlphaMode_Premultiplied = 2,
    WGPUAlphaMode_Unpremultiplied = 3,
    WGPUAlphaMode_Force32 = 2147483647);
  PWGPUAlphaMode = ^WGPUAlphaMode;

  WGPUBackendType = (
    WGPUBackendType_Undefined = 0,
    WGPUBackendType_Null = 1,
    WGPUBackendType_WebGPU = 2,
    WGPUBackendType_D3D11 = 3,
    WGPUBackendType_D3D12 = 4,
    WGPUBackendType_Metal = 5,
    WGPUBackendType_Vulkan = 6,
    WGPUBackendType_OpenGL = 7,
    WGPUBackendType_OpenGLES = 8,
    WGPUBackendType_Force32 = 2147483647);
  PWGPUBackendType = ^WGPUBackendType;

  WGPUBlendFactor = (
    WGPUBlendFactor_Undefined = 0,
    WGPUBlendFactor_Zero = 1,
    WGPUBlendFactor_One = 2,
    WGPUBlendFactor_Src = 3,
    WGPUBlendFactor_OneMinusSrc = 4,
    WGPUBlendFactor_SrcAlpha = 5,
    WGPUBlendFactor_OneMinusSrcAlpha = 6,
    WGPUBlendFactor_Dst = 7,
    WGPUBlendFactor_OneMinusDst = 8,
    WGPUBlendFactor_DstAlpha = 9,
    WGPUBlendFactor_OneMinusDstAlpha = 10,
    WGPUBlendFactor_SrcAlphaSaturated = 11,
    WGPUBlendFactor_Constant = 12,
    WGPUBlendFactor_OneMinusConstant = 13,
    WGPUBlendFactor_Src1 = 14,
    WGPUBlendFactor_OneMinusSrc1 = 15,
    WGPUBlendFactor_Src1Alpha = 16,
    WGPUBlendFactor_OneMinusSrc1Alpha = 17,
    WGPUBlendFactor_Force32 = 2147483647);
  PWGPUBlendFactor = ^WGPUBlendFactor;

  WGPUBlendOperation = (
    WGPUBlendOperation_Undefined = 0,
    WGPUBlendOperation_Add = 1,
    WGPUBlendOperation_Subtract = 2,
    WGPUBlendOperation_ReverseSubtract = 3,
    WGPUBlendOperation_Min = 4,
    WGPUBlendOperation_Max = 5,
    WGPUBlendOperation_Force32 = 2147483647);
  PWGPUBlendOperation = ^WGPUBlendOperation;

  WGPUBufferBindingType = (
    WGPUBufferBindingType_Undefined = 0,
    WGPUBufferBindingType_Uniform = 1,
    WGPUBufferBindingType_Storage = 2,
    WGPUBufferBindingType_ReadOnlyStorage = 3,
    WGPUBufferBindingType_Force32 = 2147483647);
  PWGPUBufferBindingType = ^WGPUBufferBindingType;

  WGPUBufferMapAsyncStatus = (
    WGPUBufferMapAsyncStatus_Success = 1,
    WGPUBufferMapAsyncStatus_InstanceDropped = 2,
    WGPUBufferMapAsyncStatus_ValidationError = 3,
    WGPUBufferMapAsyncStatus_Unknown = 4,
    WGPUBufferMapAsyncStatus_DeviceLost = 5,
    WGPUBufferMapAsyncStatus_DestroyedBeforeCallback = 6,
    WGPUBufferMapAsyncStatus_UnmappedBeforeCallback = 7,
    WGPUBufferMapAsyncStatus_MappingAlreadyPending = 8,
    WGPUBufferMapAsyncStatus_OffsetOutOfRange = 9,
    WGPUBufferMapAsyncStatus_SizeOutOfRange = 10,
    WGPUBufferMapAsyncStatus_Force32 = 2147483647);
  PWGPUBufferMapAsyncStatus = ^WGPUBufferMapAsyncStatus;

  WGPUBufferMapState = (
    WGPUBufferMapState_Unmapped = 1,
    WGPUBufferMapState_Pending = 2,
    WGPUBufferMapState_Mapped = 3,
    WGPUBufferMapState_Force32 = 2147483647);
  PWGPUBufferMapState = ^WGPUBufferMapState;

  WGPUCallbackMode = (
    WGPUCallbackMode_WaitAnyOnly = 1,
    WGPUCallbackMode_AllowProcessEvents = 2,
    WGPUCallbackMode_AllowSpontaneous = 3,
    WGPUCallbackMode_Force32 = 2147483647);
  PWGPUCallbackMode = ^WGPUCallbackMode;

  WGPUCompareFunction = (
    WGPUCompareFunction_Undefined = 0,
    WGPUCompareFunction_Never = 1,
    WGPUCompareFunction_Less = 2,
    WGPUCompareFunction_Equal = 3,
    WGPUCompareFunction_LessEqual = 4,
    WGPUCompareFunction_Greater = 5,
    WGPUCompareFunction_NotEqual = 6,
    WGPUCompareFunction_GreaterEqual = 7,
    WGPUCompareFunction_Always = 8,
    WGPUCompareFunction_Force32 = 2147483647);
  PWGPUCompareFunction = ^WGPUCompareFunction;

  WGPUCompilationInfoRequestStatus = (
    WGPUCompilationInfoRequestStatus_Success = 1,
    WGPUCompilationInfoRequestStatus_InstanceDropped = 2,
    WGPUCompilationInfoRequestStatus_Error = 3,
    WGPUCompilationInfoRequestStatus_DeviceLost = 4,
    WGPUCompilationInfoRequestStatus_Unknown = 5,
    WGPUCompilationInfoRequestStatus_Force32 = 2147483647);
  PWGPUCompilationInfoRequestStatus = ^WGPUCompilationInfoRequestStatus;

  WGPUCompilationMessageType = (
    WGPUCompilationMessageType_Error = 1,
    WGPUCompilationMessageType_Warning = 2,
    WGPUCompilationMessageType_Info = 3,
    WGPUCompilationMessageType_Force32 = 2147483647);
  PWGPUCompilationMessageType = ^WGPUCompilationMessageType;

  WGPUCompositeAlphaMode = (
    WGPUCompositeAlphaMode_Auto = 0,
    WGPUCompositeAlphaMode_Opaque = 1,
    WGPUCompositeAlphaMode_Premultiplied = 2,
    WGPUCompositeAlphaMode_Unpremultiplied = 3,
    WGPUCompositeAlphaMode_Inherit = 4,
    WGPUCompositeAlphaMode_Force32 = 2147483647);
  PWGPUCompositeAlphaMode = ^WGPUCompositeAlphaMode;

  WGPUCreatePipelineAsyncStatus = (
    WGPUCreatePipelineAsyncStatus_Success = 1,
    WGPUCreatePipelineAsyncStatus_InstanceDropped = 2,
    WGPUCreatePipelineAsyncStatus_ValidationError = 3,
    WGPUCreatePipelineAsyncStatus_InternalError = 4,
    WGPUCreatePipelineAsyncStatus_DeviceLost = 5,
    WGPUCreatePipelineAsyncStatus_DeviceDestroyed = 6,
    WGPUCreatePipelineAsyncStatus_Unknown = 7,
    WGPUCreatePipelineAsyncStatus_Force32 = 2147483647);
  PWGPUCreatePipelineAsyncStatus = ^WGPUCreatePipelineAsyncStatus;

  WGPUCullMode = (
    WGPUCullMode_Undefined = 0,
    WGPUCullMode_None = 1,
    WGPUCullMode_Front = 2,
    WGPUCullMode_Back = 3,
    WGPUCullMode_Force32 = 2147483647);
  PWGPUCullMode = ^WGPUCullMode;

  WGPUDeviceLostReason = (
    WGPUDeviceLostReason_Unknown = 1,
    WGPUDeviceLostReason_Destroyed = 2,
    WGPUDeviceLostReason_InstanceDropped = 3,
    WGPUDeviceLostReason_FailedCreation = 4,
    WGPUDeviceLostReason_Force32 = 2147483647);
  PWGPUDeviceLostReason = ^WGPUDeviceLostReason;

  WGPUErrorFilter = (
    WGPUErrorFilter_Validation = 1,
    WGPUErrorFilter_OutOfMemory = 2,
    WGPUErrorFilter_Internal = 3,
    WGPUErrorFilter_Force32 = 2147483647);
  PWGPUErrorFilter = ^WGPUErrorFilter;

  WGPUErrorType = (
    WGPUErrorType_NoError = 1,
    WGPUErrorType_Validation = 2,
    WGPUErrorType_OutOfMemory = 3,
    WGPUErrorType_Internal = 4,
    WGPUErrorType_Unknown = 5,
    WGPUErrorType_DeviceLost = 6,
    WGPUErrorType_Force32 = 2147483647);
  PWGPUErrorType = ^WGPUErrorType;

  WGPUExternalTextureRotation = (
    WGPUExternalTextureRotation_Rotate0Degrees = 1,
    WGPUExternalTextureRotation_Rotate90Degrees = 2,
    WGPUExternalTextureRotation_Rotate180Degrees = 3,
    WGPUExternalTextureRotation_Rotate270Degrees = 4,
    WGPUExternalTextureRotation_Force32 = 2147483647);
  PWGPUExternalTextureRotation = ^WGPUExternalTextureRotation;

  WGPUFeatureName = (
    WGPUFeatureName_DepthClipControl = 1,
    WGPUFeatureName_Depth32FloatStencil8 = 2,
    WGPUFeatureName_TimestampQuery = 3,
    WGPUFeatureName_TextureCompressionBC = 4,
    WGPUFeatureName_TextureCompressionETC2 = 5,
    WGPUFeatureName_TextureCompressionASTC = 6,
    WGPUFeatureName_IndirectFirstInstance = 7,
    WGPUFeatureName_ShaderF16 = 8,
    WGPUFeatureName_RG11B10UfloatRenderable = 9,
    WGPUFeatureName_BGRA8UnormStorage = 10,
    WGPUFeatureName_Float32Filterable = 11,
    WGPUFeatureName_Subgroups = 12,
    WGPUFeatureName_SubgroupsF16 = 13,
    WGPUFeatureName_DawnInternalUsages = 327680,
    WGPUFeatureName_DawnMultiPlanarFormats = 327681,
    WGPUFeatureName_DawnNative = 327682,
    WGPUFeatureName_ChromiumExperimentalTimestampQueryInsidePasses = 327683,
    WGPUFeatureName_ImplicitDeviceSynchronization = 327684,
    WGPUFeatureName_SurfaceCapabilities = 327685,
    WGPUFeatureName_TransientAttachments = 327686,
    WGPUFeatureName_MSAARenderToSingleSampled = 327687,
    WGPUFeatureName_DualSourceBlending = 327688,
    WGPUFeatureName_D3D11MultithreadProtected = 327689,
    WGPUFeatureName_ANGLETextureSharing = 327690,
    WGPUFeatureName_ChromiumExperimentalSubgroups = 327691,
    WGPUFeatureName_ChromiumExperimentalSubgroupUniformControlFlow = 327692,
    WGPUFeatureName_PixelLocalStorageCoherent = 327693,
    WGPUFeatureName_PixelLocalStorageNonCoherent = 327694,
    WGPUFeatureName_Unorm16TextureFormats = 327695,
    WGPUFeatureName_Snorm16TextureFormats = 327696,
    WGPUFeatureName_MultiPlanarFormatExtendedUsages = 327697,
    WGPUFeatureName_MultiPlanarFormatP010 = 327698,
    WGPUFeatureName_HostMappedPointer = 327699,
    WGPUFeatureName_MultiPlanarRenderTargets = 327700,
    WGPUFeatureName_MultiPlanarFormatNv12a = 327701,
    WGPUFeatureName_FramebufferFetch = 327702,
    WGPUFeatureName_BufferMapExtendedUsages = 327703,
    WGPUFeatureName_AdapterPropertiesMemoryHeaps = 327704,
    WGPUFeatureName_AdapterPropertiesD3D = 327705,
    WGPUFeatureName_AdapterPropertiesVk = 327706,
    WGPUFeatureName_R8UnormStorage = 327707,
    WGPUFeatureName_FormatCapabilities = 327708,
    WGPUFeatureName_DrmFormatCapabilities = 327709,
    WGPUFeatureName_Norm16TextureFormats = 327710,
    WGPUFeatureName_MultiPlanarFormatNv16 = 327711,
    WGPUFeatureName_MultiPlanarFormatNv24 = 327712,
    WGPUFeatureName_MultiPlanarFormatP210 = 327713,
    WGPUFeatureName_MultiPlanarFormatP410 = 327714,
    WGPUFeatureName_SharedTextureMemoryVkDedicatedAllocation = 327715,
    WGPUFeatureName_SharedTextureMemoryAHardwareBuffer = 327716,
    WGPUFeatureName_SharedTextureMemoryDmaBuf = 327717,
    WGPUFeatureName_SharedTextureMemoryOpaqueFD = 327718,
    WGPUFeatureName_SharedTextureMemoryZirconHandle = 327719,
    WGPUFeatureName_SharedTextureMemoryDXGISharedHandle = 327720,
    WGPUFeatureName_SharedTextureMemoryD3D11Texture2D = 327721,
    WGPUFeatureName_SharedTextureMemoryIOSurface = 327722,
    WGPUFeatureName_SharedTextureMemoryEGLImage = 327723,
    WGPUFeatureName_SharedFenceVkSemaphoreOpaqueFD = 327724,
    WGPUFeatureName_SharedFenceVkSemaphoreSyncFD = 327725,
    WGPUFeatureName_SharedFenceVkSemaphoreZirconHandle = 327726,
    WGPUFeatureName_SharedFenceDXGISharedHandle = 327727,
    WGPUFeatureName_SharedFenceMTLSharedEvent = 327728,
    WGPUFeatureName_SharedBufferMemoryD3D12Resource = 327729,
    WGPUFeatureName_StaticSamplers = 327730,
    WGPUFeatureName_YCbCrVulkanSamplers = 327731,
    WGPUFeatureName_ShaderModuleCompilationOptions = 327732,
    WGPUFeatureName_DawnLoadResolveTexture = 327733,
    WGPUFeatureName_DawnPartialLoadResolveTexture = 327734,
    WGPUFeatureName_MultiDrawIndirect = 327735,
    WGPUFeatureName_ClipDistances = 327736,
    WGPUFeatureName_Force32 = 2147483647);
  PWGPUFeatureName = ^WGPUFeatureName;

  WGPUFilterMode = (
    WGPUFilterMode_Undefined = 0,
    WGPUFilterMode_Nearest = 1,
    WGPUFilterMode_Linear = 2,
    WGPUFilterMode_Force32 = 2147483647);
  PWGPUFilterMode = ^WGPUFilterMode;

  WGPUFrontFace = (
    WGPUFrontFace_Undefined = 0,
    WGPUFrontFace_CCW = 1,
    WGPUFrontFace_CW = 2,
    WGPUFrontFace_Force32 = 2147483647);
  PWGPUFrontFace = ^WGPUFrontFace;

  WGPUIndexFormat = (
    WGPUIndexFormat_Undefined = 0,
    WGPUIndexFormat_Uint16 = 1,
    WGPUIndexFormat_Uint32 = 2,
    WGPUIndexFormat_Force32 = 2147483647);
  PWGPUIndexFormat = ^WGPUIndexFormat;

  WGPULoadOp = (
    WGPULoadOp_Undefined = 0,
    WGPULoadOp_Load = 1,
    WGPULoadOp_Clear = 2,
    WGPULoadOp_ExpandResolveTexture = 327683,
    WGPULoadOp_Force32 = 2147483647);
  PWGPULoadOp = ^WGPULoadOp;

  WGPULoggingType = (
    WGPULoggingType_Verbose = 1,
    WGPULoggingType_Info = 2,
    WGPULoggingType_Warning = 3,
    WGPULoggingType_Error = 4,
    WGPULoggingType_Force32 = 2147483647);
  PWGPULoggingType = ^WGPULoggingType;

  WGPUMapAsyncStatus = (
    WGPUMapAsyncStatus_Success = 1,
    WGPUMapAsyncStatus_InstanceDropped = 2,
    WGPUMapAsyncStatus_Error = 3,
    WGPUMapAsyncStatus_Aborted = 4,
    WGPUMapAsyncStatus_Unknown = 5,
    WGPUMapAsyncStatus_Force32 = 2147483647);
  PWGPUMapAsyncStatus = ^WGPUMapAsyncStatus;

  WGPUMipmapFilterMode = (
    WGPUMipmapFilterMode_Undefined = 0,
    WGPUMipmapFilterMode_Nearest = 1,
    WGPUMipmapFilterMode_Linear = 2,
    WGPUMipmapFilterMode_Force32 = 2147483647);
  PWGPUMipmapFilterMode = ^WGPUMipmapFilterMode;

  WGPUOptionalBool = (
    WGPUOptionalBool_False = 0,
    WGPUOptionalBool_True = 1,
    WGPUOptionalBool_Undefined = 2,
    WGPUOptionalBool_Force32 = 2147483647);
  PWGPUOptionalBool = ^WGPUOptionalBool;

  WGPUPopErrorScopeStatus = (
    WGPUPopErrorScopeStatus_Success = 1,
    WGPUPopErrorScopeStatus_InstanceDropped = 2,
    WGPUPopErrorScopeStatus_Force32 = 2147483647);
  PWGPUPopErrorScopeStatus = ^WGPUPopErrorScopeStatus;

  WGPUPowerPreference = (
    WGPUPowerPreference_Undefined = 0,
    WGPUPowerPreference_LowPower = 1,
    WGPUPowerPreference_HighPerformance = 2,
    WGPUPowerPreference_Force32 = 2147483647);
  PWGPUPowerPreference = ^WGPUPowerPreference;

  WGPUPresentMode = (
    WGPUPresentMode_Fifo = 1,
    WGPUPresentMode_FifoRelaxed = 2,
    WGPUPresentMode_Immediate = 3,
    WGPUPresentMode_Mailbox = 4,
    WGPUPresentMode_Force32 = 2147483647);
  PWGPUPresentMode = ^WGPUPresentMode;

  WGPUPrimitiveTopology = (
    WGPUPrimitiveTopology_Undefined = 0,
    WGPUPrimitiveTopology_PointList = 1,
    WGPUPrimitiveTopology_LineList = 2,
    WGPUPrimitiveTopology_LineStrip = 3,
    WGPUPrimitiveTopology_TriangleList = 4,
    WGPUPrimitiveTopology_TriangleStrip = 5,
    WGPUPrimitiveTopology_Force32 = 2147483647);
  PWGPUPrimitiveTopology = ^WGPUPrimitiveTopology;

  WGPUQueryType = (
    WGPUQueryType_Occlusion = 1,
    WGPUQueryType_Timestamp = 2,
    WGPUQueryType_Force32 = 2147483647);
  PWGPUQueryType = ^WGPUQueryType;

  WGPUQueueWorkDoneStatus = (
    WGPUQueueWorkDoneStatus_Success = 1,
    WGPUQueueWorkDoneStatus_InstanceDropped = 2,
    WGPUQueueWorkDoneStatus_Error = 3,
    WGPUQueueWorkDoneStatus_Unknown = 4,
    WGPUQueueWorkDoneStatus_DeviceLost = 5,
    WGPUQueueWorkDoneStatus_Force32 = 2147483647);
  PWGPUQueueWorkDoneStatus = ^WGPUQueueWorkDoneStatus;

  WGPURequestAdapterStatus = (
    WGPURequestAdapterStatus_Success = 1,
    WGPURequestAdapterStatus_InstanceDropped = 2,
    WGPURequestAdapterStatus_Unavailable = 3,
    WGPURequestAdapterStatus_Error = 4,
    WGPURequestAdapterStatus_Unknown = 5,
    WGPURequestAdapterStatus_Force32 = 2147483647);
  PWGPURequestAdapterStatus = ^WGPURequestAdapterStatus;

  WGPURequestDeviceStatus = (
    WGPURequestDeviceStatus_Success = 1,
    WGPURequestDeviceStatus_InstanceDropped = 2,
    WGPURequestDeviceStatus_Error = 3,
    WGPURequestDeviceStatus_Unknown = 4,
    WGPURequestDeviceStatus_Force32 = 2147483647);
  PWGPURequestDeviceStatus = ^WGPURequestDeviceStatus;

  WGPUSType = (
    WGPUSType_ShaderSourceSPIRV = 1,
    WGPUSType_ShaderSourceWGSL = 2,
    WGPUSType_RenderPassMaxDrawCount = 3,
    WGPUSType_SurfaceSourceMetalLayer = 4,
    WGPUSType_SurfaceSourceWindowsHWND = 5,
    WGPUSType_SurfaceSourceXlibWindow = 6,
    WGPUSType_SurfaceSourceWaylandSurface = 7,
    WGPUSType_SurfaceSourceAndroidNativeWindow = 8,
    WGPUSType_SurfaceSourceXCBWindow = 9,
    WGPUSType_TextureBindingViewDimensionDescriptor = 131072,
    WGPUSType_SurfaceSourceCanvasHTMLSelector_Emscripten = 262144,
    WGPUSType_SurfaceDescriptorFromWindowsCoreWindow = 327680,
    WGPUSType_ExternalTextureBindingEntry = 327681,
    WGPUSType_ExternalTextureBindingLayout = 327682,
    WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel = 327683,
    WGPUSType_DawnTextureInternalUsageDescriptor = 327684,
    WGPUSType_DawnEncoderInternalUsageDescriptor = 327685,
    WGPUSType_DawnInstanceDescriptor = 327686,
    WGPUSType_DawnCacheDeviceDescriptor = 327687,
    WGPUSType_DawnAdapterPropertiesPowerPreference = 327688,
    WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient = 327689,
    WGPUSType_DawnTogglesDescriptor = 327690,
    WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor = 327691,
    WGPUSType_RequestAdapterOptionsLUID = 327692,
    WGPUSType_RequestAdapterOptionsGetGLProc = 327693,
    WGPUSType_RequestAdapterOptionsD3D11Device = 327694,
    WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled = 327695,
    WGPUSType_RenderPassPixelLocalStorage = 327696,
    WGPUSType_PipelineLayoutPixelLocalStorage = 327697,
    WGPUSType_BufferHostMappedPointer = 327698,
    WGPUSType_DawnExperimentalSubgroupLimits = 327699,
    WGPUSType_AdapterPropertiesMemoryHeaps = 327700,
    WGPUSType_AdapterPropertiesD3D = 327701,
    WGPUSType_AdapterPropertiesVk = 327702,
    WGPUSType_DawnComputePipelineFullSubgroups = 327703,
    WGPUSType_DawnWireWGSLControl = 327704,
    WGPUSType_DawnWGSLBlocklist = 327705,
    WGPUSType_DrmFormatCapabilities = 327706,
    WGPUSType_ShaderModuleCompilationOptions = 327707,
    WGPUSType_ColorTargetStateExpandResolveTextureDawn = 327708,
    WGPUSType_RenderPassDescriptorExpandResolveRect = 327709,
    WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor = 327710,
    WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor = 327711,
    WGPUSType_SharedTextureMemoryDmaBufDescriptor = 327712,
    WGPUSType_SharedTextureMemoryOpaqueFDDescriptor = 327713,
    WGPUSType_SharedTextureMemoryZirconHandleDescriptor = 327714,
    WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor = 327715,
    WGPUSType_SharedTextureMemoryD3D11Texture2DDescriptor = 327716,
    WGPUSType_SharedTextureMemoryIOSurfaceDescriptor = 327717,
    WGPUSType_SharedTextureMemoryEGLImageDescriptor = 327718,
    WGPUSType_SharedTextureMemoryInitializedBeginState = 327719,
    WGPUSType_SharedTextureMemoryInitializedEndState = 327720,
    WGPUSType_SharedTextureMemoryVkImageLayoutBeginState = 327721,
    WGPUSType_SharedTextureMemoryVkImageLayoutEndState = 327722,
    WGPUSType_SharedTextureMemoryD3DSwapchainBeginState = 327723,
    WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor = 327724,
    WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo = 327725,
    WGPUSType_SharedFenceVkSemaphoreSyncFDDescriptor = 327726,
    WGPUSType_SharedFenceVkSemaphoreSyncFDExportInfo = 327727,
    WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor = 327728,
    WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo = 327729,
    WGPUSType_SharedFenceDXGISharedHandleDescriptor = 327730,
    WGPUSType_SharedFenceDXGISharedHandleExportInfo = 327731,
    WGPUSType_SharedFenceMTLSharedEventDescriptor = 327732,
    WGPUSType_SharedFenceMTLSharedEventExportInfo = 327733,
    WGPUSType_SharedBufferMemoryD3D12ResourceDescriptor = 327734,
    WGPUSType_StaticSamplerBindingLayout = 327735,
    WGPUSType_YCbCrVkDescriptor = 327736,
    WGPUSType_SharedTextureMemoryAHardwareBufferProperties = 327737,
    WGPUSType_AHardwareBufferProperties = 327738,
    WGPUSType_Force32 = 2147483647);
  PWGPUSType = ^WGPUSType;

  WGPUSamplerBindingType = (
    WGPUSamplerBindingType_Undefined = 0,
    WGPUSamplerBindingType_Filtering = 1,
    WGPUSamplerBindingType_NonFiltering = 2,
    WGPUSamplerBindingType_Comparison = 3,
    WGPUSamplerBindingType_Force32 = 2147483647);
  PWGPUSamplerBindingType = ^WGPUSamplerBindingType;

  WGPUSharedFenceType = (
    WGPUSharedFenceType_VkSemaphoreOpaqueFD = 1,
    WGPUSharedFenceType_VkSemaphoreSyncFD = 2,
    WGPUSharedFenceType_VkSemaphoreZirconHandle = 3,
    WGPUSharedFenceType_DXGISharedHandle = 4,
    WGPUSharedFenceType_MTLSharedEvent = 5,
    WGPUSharedFenceType_Force32 = 2147483647);
  PWGPUSharedFenceType = ^WGPUSharedFenceType;

  WGPUStatus = (
    WGPUStatus_Success = 1,
    WGPUStatus_Error = 2,
    WGPUStatus_Force32 = 2147483647);
  PWGPUStatus = ^WGPUStatus;

  WGPUStencilOperation = (
    WGPUStencilOperation_Undefined = 0,
    WGPUStencilOperation_Keep = 1,
    WGPUStencilOperation_Zero = 2,
    WGPUStencilOperation_Replace = 3,
    WGPUStencilOperation_Invert = 4,
    WGPUStencilOperation_IncrementClamp = 5,
    WGPUStencilOperation_DecrementClamp = 6,
    WGPUStencilOperation_IncrementWrap = 7,
    WGPUStencilOperation_DecrementWrap = 8,
    WGPUStencilOperation_Force32 = 2147483647);
  PWGPUStencilOperation = ^WGPUStencilOperation;

  WGPUStorageTextureAccess = (
    WGPUStorageTextureAccess_Undefined = 0,
    WGPUStorageTextureAccess_WriteOnly = 1,
    WGPUStorageTextureAccess_ReadOnly = 2,
    WGPUStorageTextureAccess_ReadWrite = 3,
    WGPUStorageTextureAccess_Force32 = 2147483647);
  PWGPUStorageTextureAccess = ^WGPUStorageTextureAccess;

  WGPUStoreOp = (
    WGPUStoreOp_Undefined = 0,
    WGPUStoreOp_Store = 1,
    WGPUStoreOp_Discard = 2,
    WGPUStoreOp_Force32 = 2147483647);
  PWGPUStoreOp = ^WGPUStoreOp;

  WGPUSurfaceGetCurrentTextureStatus = (
    WGPUSurfaceGetCurrentTextureStatus_Success = 1,
    WGPUSurfaceGetCurrentTextureStatus_Timeout = 2,
    WGPUSurfaceGetCurrentTextureStatus_Outdated = 3,
    WGPUSurfaceGetCurrentTextureStatus_Lost = 4,
    WGPUSurfaceGetCurrentTextureStatus_OutOfMemory = 5,
    WGPUSurfaceGetCurrentTextureStatus_DeviceLost = 6,
    WGPUSurfaceGetCurrentTextureStatus_Error = 7,
    WGPUSurfaceGetCurrentTextureStatus_Force32 = 2147483647);
  PWGPUSurfaceGetCurrentTextureStatus = ^WGPUSurfaceGetCurrentTextureStatus;

  WGPUTextureAspect = (
    WGPUTextureAspect_Undefined = 0,
    WGPUTextureAspect_All = 1,
    WGPUTextureAspect_StencilOnly = 2,
    WGPUTextureAspect_DepthOnly = 3,
    WGPUTextureAspect_Plane0Only = 327680,
    WGPUTextureAspect_Plane1Only = 327681,
    WGPUTextureAspect_Plane2Only = 327682,
    WGPUTextureAspect_Force32 = 2147483647);
  PWGPUTextureAspect = ^WGPUTextureAspect;

  WGPUTextureDimension = (
    WGPUTextureDimension_Undefined = 0,
    WGPUTextureDimension_1D = 1,
    WGPUTextureDimension_2D = 2,
    WGPUTextureDimension_3D = 3,
    WGPUTextureDimension_Force32 = 2147483647);
  PWGPUTextureDimension = ^WGPUTextureDimension;

  WGPUTextureFormat = (
    WGPUTextureFormat_Undefined = 0,
    WGPUTextureFormat_R8Unorm = 1,
    WGPUTextureFormat_R8Snorm = 2,
    WGPUTextureFormat_R8Uint = 3,
    WGPUTextureFormat_R8Sint = 4,
    WGPUTextureFormat_R16Uint = 5,
    WGPUTextureFormat_R16Sint = 6,
    WGPUTextureFormat_R16Float = 7,
    WGPUTextureFormat_RG8Unorm = 8,
    WGPUTextureFormat_RG8Snorm = 9,
    WGPUTextureFormat_RG8Uint = 10,
    WGPUTextureFormat_RG8Sint = 11,
    WGPUTextureFormat_R32Float = 12,
    WGPUTextureFormat_R32Uint = 13,
    WGPUTextureFormat_R32Sint = 14,
    WGPUTextureFormat_RG16Uint = 15,
    WGPUTextureFormat_RG16Sint = 16,
    WGPUTextureFormat_RG16Float = 17,
    WGPUTextureFormat_RGBA8Unorm = 18,
    WGPUTextureFormat_RGBA8UnormSrgb = 19,
    WGPUTextureFormat_RGBA8Snorm = 20,
    WGPUTextureFormat_RGBA8Uint = 21,
    WGPUTextureFormat_RGBA8Sint = 22,
    WGPUTextureFormat_BGRA8Unorm = 23,
    WGPUTextureFormat_BGRA8UnormSrgb = 24,
    WGPUTextureFormat_RGB10A2Uint = 25,
    WGPUTextureFormat_RGB10A2Unorm = 26,
    WGPUTextureFormat_RG11B10Ufloat = 27,
    WGPUTextureFormat_RGB9E5Ufloat = 28,
    WGPUTextureFormat_RG32Float = 29,
    WGPUTextureFormat_RG32Uint = 30,
    WGPUTextureFormat_RG32Sint = 31,
    WGPUTextureFormat_RGBA16Uint = 32,
    WGPUTextureFormat_RGBA16Sint = 33,
    WGPUTextureFormat_RGBA16Float = 34,
    WGPUTextureFormat_RGBA32Float = 35,
    WGPUTextureFormat_RGBA32Uint = 36,
    WGPUTextureFormat_RGBA32Sint = 37,
    WGPUTextureFormat_Stencil8 = 38,
    WGPUTextureFormat_Depth16Unorm = 39,
    WGPUTextureFormat_Depth24Plus = 40,
    WGPUTextureFormat_Depth24PlusStencil8 = 41,
    WGPUTextureFormat_Depth32Float = 42,
    WGPUTextureFormat_Depth32FloatStencil8 = 43,
    WGPUTextureFormat_BC1RGBAUnorm = 44,
    WGPUTextureFormat_BC1RGBAUnormSrgb = 45,
    WGPUTextureFormat_BC2RGBAUnorm = 46,
    WGPUTextureFormat_BC2RGBAUnormSrgb = 47,
    WGPUTextureFormat_BC3RGBAUnorm = 48,
    WGPUTextureFormat_BC3RGBAUnormSrgb = 49,
    WGPUTextureFormat_BC4RUnorm = 50,
    WGPUTextureFormat_BC4RSnorm = 51,
    WGPUTextureFormat_BC5RGUnorm = 52,
    WGPUTextureFormat_BC5RGSnorm = 53,
    WGPUTextureFormat_BC6HRGBUfloat = 54,
    WGPUTextureFormat_BC6HRGBFloat = 55,
    WGPUTextureFormat_BC7RGBAUnorm = 56,
    WGPUTextureFormat_BC7RGBAUnormSrgb = 57,
    WGPUTextureFormat_ETC2RGB8Unorm = 58,
    WGPUTextureFormat_ETC2RGB8UnormSrgb = 59,
    WGPUTextureFormat_ETC2RGB8A1Unorm = 60,
    WGPUTextureFormat_ETC2RGB8A1UnormSrgb = 61,
    WGPUTextureFormat_ETC2RGBA8Unorm = 62,
    WGPUTextureFormat_ETC2RGBA8UnormSrgb = 63,
    WGPUTextureFormat_EACR11Unorm = 64,
    WGPUTextureFormat_EACR11Snorm = 65,
    WGPUTextureFormat_EACRG11Unorm = 66,
    WGPUTextureFormat_EACRG11Snorm = 67,
    WGPUTextureFormat_ASTC4x4Unorm = 68,
    WGPUTextureFormat_ASTC4x4UnormSrgb = 69,
    WGPUTextureFormat_ASTC5x4Unorm = 70,
    WGPUTextureFormat_ASTC5x4UnormSrgb = 71,
    WGPUTextureFormat_ASTC5x5Unorm = 72,
    WGPUTextureFormat_ASTC5x5UnormSrgb = 73,
    WGPUTextureFormat_ASTC6x5Unorm = 74,
    WGPUTextureFormat_ASTC6x5UnormSrgb = 75,
    WGPUTextureFormat_ASTC6x6Unorm = 76,
    WGPUTextureFormat_ASTC6x6UnormSrgb = 77,
    WGPUTextureFormat_ASTC8x5Unorm = 78,
    WGPUTextureFormat_ASTC8x5UnormSrgb = 79,
    WGPUTextureFormat_ASTC8x6Unorm = 80,
    WGPUTextureFormat_ASTC8x6UnormSrgb = 81,
    WGPUTextureFormat_ASTC8x8Unorm = 82,
    WGPUTextureFormat_ASTC8x8UnormSrgb = 83,
    WGPUTextureFormat_ASTC10x5Unorm = 84,
    WGPUTextureFormat_ASTC10x5UnormSrgb = 85,
    WGPUTextureFormat_ASTC10x6Unorm = 86,
    WGPUTextureFormat_ASTC10x6UnormSrgb = 87,
    WGPUTextureFormat_ASTC10x8Unorm = 88,
    WGPUTextureFormat_ASTC10x8UnormSrgb = 89,
    WGPUTextureFormat_ASTC10x10Unorm = 90,
    WGPUTextureFormat_ASTC10x10UnormSrgb = 91,
    WGPUTextureFormat_ASTC12x10Unorm = 92,
    WGPUTextureFormat_ASTC12x10UnormSrgb = 93,
    WGPUTextureFormat_ASTC12x12Unorm = 94,
    WGPUTextureFormat_ASTC12x12UnormSrgb = 95,
    WGPUTextureFormat_R16Unorm = 327680,
    WGPUTextureFormat_RG16Unorm = 327681,
    WGPUTextureFormat_RGBA16Unorm = 327682,
    WGPUTextureFormat_R16Snorm = 327683,
    WGPUTextureFormat_RG16Snorm = 327684,
    WGPUTextureFormat_RGBA16Snorm = 327685,
    WGPUTextureFormat_R8BG8Biplanar420Unorm = 327686,
    WGPUTextureFormat_R10X6BG10X6Biplanar420Unorm = 327687,
    WGPUTextureFormat_R8BG8A8Triplanar420Unorm = 327688,
    WGPUTextureFormat_R8BG8Biplanar422Unorm = 327689,
    WGPUTextureFormat_R8BG8Biplanar444Unorm = 327690,
    WGPUTextureFormat_R10X6BG10X6Biplanar422Unorm = 327691,
    WGPUTextureFormat_R10X6BG10X6Biplanar444Unorm = 327692,
    WGPUTextureFormat_External = 327693,
    WGPUTextureFormat_Force32 = 2147483647);
  PWGPUTextureFormat = ^WGPUTextureFormat;

  WGPUTextureSampleType = (
    WGPUTextureSampleType_Undefined = 0,
    WGPUTextureSampleType_Float = 1,
    WGPUTextureSampleType_UnfilterableFloat = 2,
    WGPUTextureSampleType_Depth = 3,
    WGPUTextureSampleType_Sint = 4,
    WGPUTextureSampleType_Uint = 5,
    WGPUTextureSampleType_Force32 = 2147483647);
  PWGPUTextureSampleType = ^WGPUTextureSampleType;

  WGPUTextureViewDimension = (
    WGPUTextureViewDimension_Undefined = 0,
    WGPUTextureViewDimension_1D = 1,
    WGPUTextureViewDimension_2D = 2,
    WGPUTextureViewDimension_2DArray = 3,
    WGPUTextureViewDimension_Cube = 4,
    WGPUTextureViewDimension_CubeArray = 5,
    WGPUTextureViewDimension_3D = 6,
    WGPUTextureViewDimension_Force32 = 2147483647);
  PWGPUTextureViewDimension = ^WGPUTextureViewDimension;

  WGPUVertexFormat = (
    WGPUVertexFormat_Uint8x2 = 1,
    WGPUVertexFormat_Uint8x4 = 2,
    WGPUVertexFormat_Sint8x2 = 3,
    WGPUVertexFormat_Sint8x4 = 4,
    WGPUVertexFormat_Unorm8x2 = 5,
    WGPUVertexFormat_Unorm8x4 = 6,
    WGPUVertexFormat_Snorm8x2 = 7,
    WGPUVertexFormat_Snorm8x4 = 8,
    WGPUVertexFormat_Uint16x2 = 9,
    WGPUVertexFormat_Uint16x4 = 10,
    WGPUVertexFormat_Sint16x2 = 11,
    WGPUVertexFormat_Sint16x4 = 12,
    WGPUVertexFormat_Unorm16x2 = 13,
    WGPUVertexFormat_Unorm16x4 = 14,
    WGPUVertexFormat_Snorm16x2 = 15,
    WGPUVertexFormat_Snorm16x4 = 16,
    WGPUVertexFormat_Float16x2 = 17,
    WGPUVertexFormat_Float16x4 = 18,
    WGPUVertexFormat_Float32 = 19,
    WGPUVertexFormat_Float32x2 = 20,
    WGPUVertexFormat_Float32x3 = 21,
    WGPUVertexFormat_Float32x4 = 22,
    WGPUVertexFormat_Uint32 = 23,
    WGPUVertexFormat_Uint32x2 = 24,
    WGPUVertexFormat_Uint32x3 = 25,
    WGPUVertexFormat_Uint32x4 = 26,
    WGPUVertexFormat_Sint32 = 27,
    WGPUVertexFormat_Sint32x2 = 28,
    WGPUVertexFormat_Sint32x3 = 29,
    WGPUVertexFormat_Sint32x4 = 30,
    WGPUVertexFormat_Unorm10_10_10_2 = 31,
    WGPUVertexFormat_Force32 = 2147483647);
  PWGPUVertexFormat = ^WGPUVertexFormat;

  WGPUVertexStepMode = (
    WGPUVertexStepMode_Undefined = 0,
    WGPUVertexStepMode_VertexBufferNotUsed = 1,
    WGPUVertexStepMode_Vertex = 2,
    WGPUVertexStepMode_Instance = 3,
    WGPUVertexStepMode_Force32 = 2147483647);
  PWGPUVertexStepMode = ^WGPUVertexStepMode;

  WGPUWaitStatus = (
    WGPUWaitStatus_Success = 1,
    WGPUWaitStatus_TimedOut = 2,
    WGPUWaitStatus_UnsupportedTimeout = 3,
    WGPUWaitStatus_UnsupportedCount = 4,
    WGPUWaitStatus_UnsupportedMixedSources = 5,
    WGPUWaitStatus_Unknown = 6,
    WGPUWaitStatus_Force32 = 2147483647);
  PWGPUWaitStatus = ^WGPUWaitStatus;
  WGPUBufferUsage = WGPUFlags;
  WGPUColorWriteMask = WGPUFlags;
  WGPUHeapProperty = WGPUFlags;
  WGPUMapMode = WGPUFlags;
  WGPUShaderStage = WGPUFlags;
  WGPUTextureUsage = WGPUFlags;

  WGPUBufferMapCallback = procedure(status: WGPUBufferMapAsyncStatus; userdata: Pointer); cdecl;
  WGPUCallback = procedure(userdata: Pointer); cdecl;
  WGPUCompilationInfoCallback = procedure(status: WGPUCompilationInfoRequestStatus; const compilationInfo: PWGPUCompilationInfo; userdata: Pointer); cdecl;
  WGPUCreateComputePipelineAsyncCallback = procedure(status: WGPUCreatePipelineAsyncStatus; pipeline: WGPUComputePipeline; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPUCreateRenderPipelineAsyncCallback = procedure(status: WGPUCreatePipelineAsyncStatus; pipeline: WGPURenderPipeline; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPUDawnLoadCacheDataFunction = function(const key: Pointer; keySize: NativeUInt; value: Pointer; valueSize: NativeUInt; userdata: Pointer): NativeUInt; cdecl;
  WGPUDawnStoreCacheDataFunction = procedure(const key: Pointer; keySize: NativeUInt; const value: Pointer; valueSize: NativeUInt; userdata: Pointer); cdecl;
  WGPUDeviceLostCallback = procedure(reason: WGPUDeviceLostReason; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPUDeviceLostCallbackNew = procedure(const device: PWGPUDevice; reason: WGPUDeviceLostReason; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPUErrorCallback = procedure(&type: WGPUErrorType; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPULoggingCallback = procedure(&type: WGPULoggingType; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPUPopErrorScopeCallback = procedure(status: WGPUPopErrorScopeStatus; &type: WGPUErrorType; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPUProc = procedure(); cdecl;
  WGPUQueueWorkDoneCallback = procedure(status: WGPUQueueWorkDoneStatus; userdata: Pointer); cdecl;
  WGPURequestAdapterCallback = procedure(status: WGPURequestAdapterStatus; adapter: WGPUAdapter; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPURequestDeviceCallback = procedure(status: WGPURequestDeviceStatus; device: WGPUDevice; const &message: PUTF8Char; userdata: Pointer); cdecl;
  WGPUBufferMapCallback2 = procedure(status: WGPUMapAsyncStatus; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPUCompilationInfoCallback2 = procedure(status: WGPUCompilationInfoRequestStatus; const compilationInfo: PWGPUCompilationInfo; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPUCreateComputePipelineAsyncCallback2 = procedure(status: WGPUCreatePipelineAsyncStatus; pipeline: WGPUComputePipeline; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPUCreateRenderPipelineAsyncCallback2 = procedure(status: WGPUCreatePipelineAsyncStatus; pipeline: WGPURenderPipeline; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPUDeviceLostCallback2 = procedure(const device: PWGPUDevice; reason: WGPUDeviceLostReason; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPUPopErrorScopeCallback2 = procedure(status: WGPUPopErrorScopeStatus; &type: WGPUErrorType; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPUQueueWorkDoneCallback2 = procedure(status: WGPUQueueWorkDoneStatus; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPURequestAdapterCallback2 = procedure(status: WGPURequestAdapterStatus; adapter: WGPUAdapter; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPURequestDeviceCallback2 = procedure(status: WGPURequestDeviceStatus; device: WGPUDevice; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPUUncapturedErrorCallback = procedure(const device: PWGPUDevice; &type: WGPUErrorType; const &message: PUTF8Char; userdata1: Pointer; userdata2: Pointer); cdecl;
  WGPUChainedStruct = record
    next: PWGPUChainedStruct;
    sType: WGPUSType;
  end;

  WGPUChainedStructOut = record
    next: PWGPUChainedStructOut;
    sType: WGPUSType;
  end;

  WGPUBufferMapCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUBufferMapCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUCompilationInfoCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCompilationInfoCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUCreateComputePipelineAsyncCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCreateComputePipelineAsyncCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUCreateRenderPipelineAsyncCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCreateRenderPipelineAsyncCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUDeviceLostCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUDeviceLostCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUPopErrorScopeCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUPopErrorScopeCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUQueueWorkDoneCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUQueueWorkDoneCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPURequestAdapterCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPURequestAdapterCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPURequestDeviceCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPURequestDeviceCallback2;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUUncapturedErrorCallbackInfo2 = record
    nextInChain: PWGPUChainedStruct;
    callback: WGPUUncapturedErrorCallback;
    userdata1: Pointer;
    userdata2: Pointer;
  end;

  WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER = record
  end;

  WGPUAdapterInfo = record
    nextInChain: PWGPUChainedStructOut;
    vendor: PUTF8Char;
    architecture: PUTF8Char;
    device: PUTF8Char;
    description: PUTF8Char;
    backendType: WGPUBackendType;
    adapterType: WGPUAdapterType;
    vendorID: UInt32;
    deviceID: UInt32;
    compatibilityMode: WGPUBool;
  end;

  WGPUAdapterProperties = record
    nextInChain: PWGPUChainedStructOut;
    vendorID: UInt32;
    vendorName: PUTF8Char;
    architecture: PUTF8Char;
    deviceID: UInt32;
    name: PUTF8Char;
    driverDescription: PUTF8Char;
    adapterType: WGPUAdapterType;
    backendType: WGPUBackendType;
    compatibilityMode: WGPUBool;
  end;

  WGPUAdapterPropertiesD3D = record
    chain: WGPUChainedStructOut;
    shaderModel: UInt32;
  end;

  WGPUAdapterPropertiesVk = record
    chain: WGPUChainedStructOut;
    driverVersion: UInt32;
  end;

  WGPUBindGroupEntry = record
    nextInChain: PWGPUChainedStruct;
    binding: UInt32;
    buffer: WGPUBuffer;
    offset: UInt64;
    size: UInt64;
    sampler: WGPUSampler;
    textureView: WGPUTextureView;
  end;

  WGPUBlendComponent = record
    operation: WGPUBlendOperation;
    srcFactor: WGPUBlendFactor;
    dstFactor: WGPUBlendFactor;
  end;

  WGPUBufferBindingLayout = record
    nextInChain: PWGPUChainedStruct;
    &type: WGPUBufferBindingType;
    hasDynamicOffset: WGPUBool;
    minBindingSize: UInt64;
  end;

  WGPUBufferDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    usage: WGPUBufferUsage;
    size: UInt64;
    mappedAtCreation: WGPUBool;
  end;

  WGPUBufferHostMappedPointer = record
    chain: WGPUChainedStruct;
    pointer: Pointer;
    disposeCallback: WGPUCallback;
    userdata: Pointer;
  end;

  WGPUBufferMapCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUBufferMapCallback;
    userdata: Pointer;
  end;

  WGPUColor = record
    r: Double;
    g: Double;
    b: Double;
    a: Double;
  end;

  WGPUColorTargetStateExpandResolveTextureDawn = record
    chain: WGPUChainedStruct;
    enabled: WGPUBool;
  end;

  WGPUCommandBufferDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUCommandEncoderDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUCompilationInfoCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCompilationInfoCallback;
    userdata: Pointer;
  end;

  WGPUCompilationMessage = record
    nextInChain: PWGPUChainedStruct;
    &message: PUTF8Char;
    &type: WGPUCompilationMessageType;
    lineNum: UInt64;
    linePos: UInt64;
    offset: UInt64;
    length: UInt64;
    utf16LinePos: UInt64;
    utf16Offset: UInt64;
    utf16Length: UInt64;
  end;

  WGPUComputePassTimestampWrites = record
    querySet: WGPUQuerySet;
    beginningOfPassWriteIndex: UInt32;
    endOfPassWriteIndex: UInt32;
  end;

  WGPUConstantEntry = record
    nextInChain: PWGPUChainedStruct;
    key: PUTF8Char;
    value: Double;
  end;

  WGPUCopyTextureForBrowserOptions = record
    nextInChain: PWGPUChainedStruct;
    flipY: WGPUBool;
    needsColorSpaceConversion: WGPUBool;
    srcAlphaMode: WGPUAlphaMode;
    srcTransferFunctionParameters: PSingle;
    conversionMatrix: PSingle;
    dstTransferFunctionParameters: PSingle;
    dstAlphaMode: WGPUAlphaMode;
    internalUsage: WGPUBool;
  end;

  WGPUCreateComputePipelineAsyncCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCreateComputePipelineAsyncCallback;
    userdata: Pointer;
  end;

  WGPUCreateRenderPipelineAsyncCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUCreateRenderPipelineAsyncCallback;
    userdata: Pointer;
  end;

  WGPUDawnWGSLBlocklist = record
    chain: WGPUChainedStruct;
    blocklistedFeatureCount: NativeUInt;
    blocklistedFeatures: PPUTF8Char;
  end;

  WGPUDawnAdapterPropertiesPowerPreference = record
    chain: WGPUChainedStructOut;
    powerPreference: WGPUPowerPreference;
  end;

  WGPUDawnBufferDescriptorErrorInfoFromWireClient = record
    chain: WGPUChainedStruct;
    outOfMemory: WGPUBool;
  end;

  WGPUDawnCacheDeviceDescriptor = record
    chain: WGPUChainedStruct;
    isolationKey: PUTF8Char;
    loadDataFunction: WGPUDawnLoadCacheDataFunction;
    storeDataFunction: WGPUDawnStoreCacheDataFunction;
    functionUserdata: Pointer;
  end;

  WGPUDawnComputePipelineFullSubgroups = record
    chain: WGPUChainedStruct;
    requiresFullSubgroups: WGPUBool;
  end;

  WGPUDawnEncoderInternalUsageDescriptor = record
    chain: WGPUChainedStruct;
    useInternalUsages: WGPUBool;
  end;

  WGPUDawnExperimentalSubgroupLimits = record
    chain: WGPUChainedStructOut;
    minSubgroupSize: UInt32;
    maxSubgroupSize: UInt32;
  end;

  WGPUDawnRenderPassColorAttachmentRenderToSingleSampled = record
    chain: WGPUChainedStruct;
    implicitSampleCount: UInt32;
  end;

  WGPUDawnShaderModuleSPIRVOptionsDescriptor = record
    chain: WGPUChainedStruct;
    allowNonUniformDerivatives: WGPUBool;
  end;

  WGPUDawnTextureInternalUsageDescriptor = record
    chain: WGPUChainedStruct;
    internalUsage: WGPUTextureUsage;
  end;

  WGPUDawnTogglesDescriptor = record
    chain: WGPUChainedStruct;
    enabledToggleCount: NativeUInt;
    enabledToggles: PPUTF8Char;
    disabledToggleCount: NativeUInt;
    disabledToggles: PPUTF8Char;
  end;

  WGPUDawnWireWGSLControl = record
    chain: WGPUChainedStruct;
    enableExperimental: WGPUBool;
    enableUnsafe: WGPUBool;
    enableTesting: WGPUBool;
  end;

  WGPUDeviceLostCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUDeviceLostCallbackNew;
    userdata: Pointer;
  end;

  WGPUDrmFormatProperties = record
    modifier: UInt64;
    modifierPlaneCount: UInt32;
  end;

  WGPUExtent2D = record
    width: UInt32;
    height: UInt32;
  end;

  WGPUExtent3D = record
    width: UInt32;
    height: UInt32;
    depthOrArrayLayers: UInt32;
  end;

  WGPUExternalTextureBindingEntry = record
    chain: WGPUChainedStruct;
    externalTexture: WGPUExternalTexture;
  end;

  WGPUExternalTextureBindingLayout = record
    chain: WGPUChainedStruct;
  end;

  WGPUFormatCapabilities = record
    nextInChain: PWGPUChainedStructOut;
  end;

  WGPUFuture = record
    id: UInt64;
  end;

  WGPUInstanceFeatures = record
    nextInChain: PWGPUChainedStruct;
    timedWaitAnyEnable: WGPUBool;
    timedWaitAnyMaxCount: NativeUInt;
  end;

  WGPULimits = record
    maxTextureDimension1D: UInt32;
    maxTextureDimension2D: UInt32;
    maxTextureDimension3D: UInt32;
    maxTextureArrayLayers: UInt32;
    maxBindGroups: UInt32;
    maxBindGroupsPlusVertexBuffers: UInt32;
    maxBindingsPerBindGroup: UInt32;
    maxDynamicUniformBuffersPerPipelineLayout: UInt32;
    maxDynamicStorageBuffersPerPipelineLayout: UInt32;
    maxSampledTexturesPerShaderStage: UInt32;
    maxSamplersPerShaderStage: UInt32;
    maxStorageBuffersPerShaderStage: UInt32;
    maxStorageTexturesPerShaderStage: UInt32;
    maxUniformBuffersPerShaderStage: UInt32;
    maxUniformBufferBindingSize: UInt64;
    maxStorageBufferBindingSize: UInt64;
    minUniformBufferOffsetAlignment: UInt32;
    minStorageBufferOffsetAlignment: UInt32;
    maxVertexBuffers: UInt32;
    maxBufferSize: UInt64;
    maxVertexAttributes: UInt32;
    maxVertexBufferArrayStride: UInt32;
    maxInterStageShaderComponents: UInt32;
    maxInterStageShaderVariables: UInt32;
    maxColorAttachments: UInt32;
    maxColorAttachmentBytesPerSample: UInt32;
    maxComputeWorkgroupStorageSize: UInt32;
    maxComputeInvocationsPerWorkgroup: UInt32;
    maxComputeWorkgroupSizeX: UInt32;
    maxComputeWorkgroupSizeY: UInt32;
    maxComputeWorkgroupSizeZ: UInt32;
    maxComputeWorkgroupsPerDimension: UInt32;
  end;

  WGPUMemoryHeapInfo = record
    properties: WGPUHeapProperty;
    size: UInt64;
  end;

  WGPUMultisampleState = record
    nextInChain: PWGPUChainedStruct;
    count: UInt32;
    mask: UInt32;
    alphaToCoverageEnabled: WGPUBool;
  end;

  WGPUOrigin2D = record
    x: UInt32;
    y: UInt32;
  end;

  WGPUOrigin3D = record
    x: UInt32;
    y: UInt32;
    z: UInt32;
  end;

  WGPUPipelineLayoutDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    bindGroupLayoutCount: NativeUInt;
    bindGroupLayouts: PWGPUBindGroupLayout;
  end;

  WGPUPipelineLayoutStorageAttachment = record
    nextInChain: PWGPUChainedStruct;
    offset: UInt64;
    format: WGPUTextureFormat;
  end;

  WGPUPopErrorScopeCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUPopErrorScopeCallback;
    oldCallback: WGPUErrorCallback;
    userdata: Pointer;
  end;

  WGPUPrimitiveState = record
    nextInChain: PWGPUChainedStruct;
    topology: WGPUPrimitiveTopology;
    stripIndexFormat: WGPUIndexFormat;
    frontFace: WGPUFrontFace;
    cullMode: WGPUCullMode;
    unclippedDepth: WGPUBool;
  end;

  WGPUQuerySetDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    &type: WGPUQueryType;
    count: UInt32;
  end;

  WGPUQueueDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUQueueWorkDoneCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPUQueueWorkDoneCallback;
    userdata: Pointer;
  end;

  WGPURenderBundleDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPURenderBundleEncoderDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    colorFormatCount: NativeUInt;
    colorFormats: PWGPUTextureFormat;
    depthStencilFormat: WGPUTextureFormat;
    sampleCount: UInt32;
    depthReadOnly: WGPUBool;
    stencilReadOnly: WGPUBool;
  end;

  WGPURenderPassDepthStencilAttachment = record
    view: WGPUTextureView;
    depthLoadOp: WGPULoadOp;
    depthStoreOp: WGPUStoreOp;
    depthClearValue: Single;
    depthReadOnly: WGPUBool;
    stencilLoadOp: WGPULoadOp;
    stencilStoreOp: WGPUStoreOp;
    stencilClearValue: UInt32;
    stencilReadOnly: WGPUBool;
  end;

  WGPURenderPassDescriptorExpandResolveRect = record
    chain: WGPUChainedStruct;
    x: UInt32;
    y: UInt32;
    width: UInt32;
    height: UInt32;
  end;

  WGPURenderPassMaxDrawCount = record
    chain: WGPUChainedStruct;
    maxDrawCount: UInt64;
  end;

  WGPURenderPassTimestampWrites = record
    querySet: WGPUQuerySet;
    beginningOfPassWriteIndex: UInt32;
    endOfPassWriteIndex: UInt32;
  end;

  WGPURequestAdapterCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPURequestAdapterCallback;
    userdata: Pointer;
  end;

  WGPURequestAdapterOptions = record
    nextInChain: PWGPUChainedStruct;
    compatibleSurface: WGPUSurface;
    powerPreference: WGPUPowerPreference;
    backendType: WGPUBackendType;
    forceFallbackAdapter: WGPUBool;
    compatibilityMode: WGPUBool;
  end;

  WGPURequestDeviceCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    mode: WGPUCallbackMode;
    callback: WGPURequestDeviceCallback;
    userdata: Pointer;
  end;

  WGPUSamplerBindingLayout = record
    nextInChain: PWGPUChainedStruct;
    &type: WGPUSamplerBindingType;
  end;

  WGPUSamplerDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    addressModeU: WGPUAddressMode;
    addressModeV: WGPUAddressMode;
    addressModeW: WGPUAddressMode;
    magFilter: WGPUFilterMode;
    minFilter: WGPUFilterMode;
    mipmapFilter: WGPUMipmapFilterMode;
    lodMinClamp: Single;
    lodMaxClamp: Single;
    compare: WGPUCompareFunction;
    maxAnisotropy: UInt16;
  end;

  WGPUShaderModuleCompilationOptions = record
    chain: WGPUChainedStruct;
    strictMath: WGPUBool;
  end;

  WGPUShaderModuleDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUShaderSourceSPIRV = record
    chain: WGPUChainedStruct;
    codeSize: UInt32;
    code: PUInt32;
  end;

  WGPUShaderSourceWGSL = record
    chain: WGPUChainedStruct;
    code: PUTF8Char;
  end;

  WGPUSharedBufferMemoryBeginAccessDescriptor = record
    nextInChain: PWGPUChainedStruct;
    initialized: WGPUBool;
    fenceCount: NativeUInt;
    fences: PWGPUSharedFence;
    signaledValues: PUInt64;
  end;

  WGPUSharedBufferMemoryDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUSharedBufferMemoryEndAccessState = record
    nextInChain: PWGPUChainedStructOut;
    initialized: WGPUBool;
    fenceCount: NativeUInt;
    fences: PWGPUSharedFence;
    signaledValues: PUInt64;
  end;

  WGPUSharedBufferMemoryProperties = record
    nextInChain: PWGPUChainedStructOut;
    usage: WGPUBufferUsage;
    size: UInt64;
  end;

  WGPUSharedFenceDXGISharedHandleDescriptor = record
    chain: WGPUChainedStruct;
    handle: Pointer;
  end;

  WGPUSharedFenceDXGISharedHandleExportInfo = record
    chain: WGPUChainedStructOut;
    handle: Pointer;
  end;

  WGPUSharedFenceMTLSharedEventDescriptor = record
    chain: WGPUChainedStruct;
    sharedEvent: Pointer;
  end;

  WGPUSharedFenceMTLSharedEventExportInfo = record
    chain: WGPUChainedStructOut;
    sharedEvent: Pointer;
  end;

  WGPUSharedFenceDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  TWGPUSharedFenceExportInfo = record
    nextInChain: PWGPUChainedStructOut;
    &type: WGPUSharedFenceType;
  end;

  WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor = record
    chain: WGPUChainedStruct;
    handle: Integer;
  end;

  WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo = record
    chain: WGPUChainedStructOut;
    handle: Integer;
  end;

  WGPUSharedFenceVkSemaphoreSyncFDDescriptor = record
    chain: WGPUChainedStruct;
    handle: Integer;
  end;

  WGPUSharedFenceVkSemaphoreSyncFDExportInfo = record
    chain: WGPUChainedStructOut;
    handle: Integer;
  end;

  WGPUSharedFenceVkSemaphoreZirconHandleDescriptor = record
    chain: WGPUChainedStruct;
    handle: UInt32;
  end;

  WGPUSharedFenceVkSemaphoreZirconHandleExportInfo = record
    chain: WGPUChainedStructOut;
    handle: UInt32;
  end;

  WGPUSharedTextureMemoryD3DSwapchainBeginState = record
    chain: WGPUChainedStruct;
    isSwapchain: WGPUBool;
  end;

  WGPUSharedTextureMemoryDXGISharedHandleDescriptor = record
    chain: WGPUChainedStruct;
    handle: Pointer;
    useKeyedMutex: WGPUBool;
  end;

  WGPUSharedTextureMemoryEGLImageDescriptor = record
    chain: WGPUChainedStruct;
    image: Pointer;
  end;

  WGPUSharedTextureMemoryIOSurfaceDescriptor = record
    chain: WGPUChainedStruct;
    ioSurface: Pointer;
  end;

  WGPUSharedTextureMemoryAHardwareBufferDescriptor = record
    chain: WGPUChainedStruct;
    handle: Pointer;
    useExternalFormat: WGPUBool;
  end;

  WGPUSharedTextureMemoryBeginAccessDescriptor = record
    nextInChain: PWGPUChainedStruct;
    concurrentRead: WGPUBool;
    initialized: WGPUBool;
    fenceCount: NativeUInt;
    fences: PWGPUSharedFence;
    signaledValues: PUInt64;
  end;

  WGPUSharedTextureMemoryDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUSharedTextureMemoryDmaBufPlane = record
    fd: Integer;
    offset: UInt64;
    stride: UInt32;
  end;

  WGPUSharedTextureMemoryEndAccessState = record
    nextInChain: PWGPUChainedStructOut;
    initialized: WGPUBool;
    fenceCount: NativeUInt;
    fences: PWGPUSharedFence;
    signaledValues: PUInt64;
  end;

  WGPUSharedTextureMemoryOpaqueFDDescriptor = record
    chain: WGPUChainedStruct;
    vkImageCreateInfo: Pointer;
    memoryFD: Integer;
    memoryTypeIndex: UInt32;
    allocationSize: UInt64;
    dedicatedAllocation: WGPUBool;
  end;

  WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor = record
    chain: WGPUChainedStruct;
    dedicatedAllocation: WGPUBool;
  end;

  WGPUSharedTextureMemoryVkImageLayoutBeginState = record
    chain: WGPUChainedStruct;
    oldLayout: Int32;
    newLayout: Int32;
  end;

  WGPUSharedTextureMemoryVkImageLayoutEndState = record
    chain: WGPUChainedStructOut;
    oldLayout: Int32;
    newLayout: Int32;
  end;

  WGPUSharedTextureMemoryZirconHandleDescriptor = record
    chain: WGPUChainedStruct;
    memoryFD: UInt32;
    allocationSize: UInt64;
  end;

  WGPUStaticSamplerBindingLayout = record
    chain: WGPUChainedStruct;
    sampler: WGPUSampler;
    sampledTextureBinding: UInt32;
  end;

  WGPUStencilFaceState = record
    compare: WGPUCompareFunction;
    failOp: WGPUStencilOperation;
    depthFailOp: WGPUStencilOperation;
    passOp: WGPUStencilOperation;
  end;

  WGPUStorageTextureBindingLayout = record
    nextInChain: PWGPUChainedStruct;
    access: WGPUStorageTextureAccess;
    format: WGPUTextureFormat;
    viewDimension: WGPUTextureViewDimension;
  end;

  WGPUStringView = record
    data: PUTF8Char;
    length: NativeUInt;
  end;

  WGPUSurfaceCapabilities = record
    nextInChain: PWGPUChainedStructOut;
    usages: WGPUTextureUsage;
    formatCount: NativeUInt;
    formats: PWGPUTextureFormat;
    presentModeCount: NativeUInt;
    presentModes: PWGPUPresentMode;
    alphaModeCount: NativeUInt;
    alphaModes: PWGPUCompositeAlphaMode;
  end;

  WGPUSurfaceConfiguration = record
    nextInChain: PWGPUChainedStruct;
    device: WGPUDevice;
    format: WGPUTextureFormat;
    usage: WGPUTextureUsage;
    viewFormatCount: NativeUInt;
    viewFormats: PWGPUTextureFormat;
    alphaMode: WGPUCompositeAlphaMode;
    width: UInt32;
    height: UInt32;
    presentMode: WGPUPresentMode;
  end;

  WGPUSurfaceDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
  end;

  WGPUSurfaceDescriptorFromWindowsCoreWindow = record
    chain: WGPUChainedStruct;
    coreWindow: Pointer;
  end;

  WGPUSurfaceDescriptorFromWindowsSwapChainPanel = record
    chain: WGPUChainedStruct;
    swapChainPanel: Pointer;
  end;

  WGPUSurfaceSourceXCBWindow = record
    chain: WGPUChainedStruct;
    connection: Pointer;
    window: UInt32;
  end;

  WGPUSurfaceSourceAndroidNativeWindow = record
    chain: WGPUChainedStruct;
    window: Pointer;
  end;

  WGPUSurfaceSourceCanvasHTMLSelector_Emscripten = record
    chain: WGPUChainedStruct;
    selector: PUTF8Char;
  end;

  WGPUSurfaceSourceMetalLayer = record
    chain: WGPUChainedStruct;
    layer: Pointer;
  end;

  WGPUSurfaceSourceWaylandSurface = record
    chain: WGPUChainedStruct;
    display: Pointer;
    surface: Pointer;
  end;

  WGPUSurfaceSourceWindowsHWND = record
    chain: WGPUChainedStruct;
    hinstance: Pointer;
    hwnd: Pointer;
  end;

  WGPUSurfaceSourceXlibWindow = record
    chain: WGPUChainedStruct;
    display: Pointer;
    window: UInt64;
  end;

  WGPUSurfaceTexture = record
    texture: WGPUTexture;
    suboptimal: WGPUBool;
    status: WGPUSurfaceGetCurrentTextureStatus;
  end;

  WGPUSwapChainDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    usage: WGPUTextureUsage;
    format: WGPUTextureFormat;
    width: UInt32;
    height: UInt32;
    presentMode: WGPUPresentMode;
  end;

  WGPUTextureBindingLayout = record
    nextInChain: PWGPUChainedStruct;
    sampleType: WGPUTextureSampleType;
    viewDimension: WGPUTextureViewDimension;
    multisampled: WGPUBool;
  end;

  WGPUTextureBindingViewDimensionDescriptor = record
    chain: WGPUChainedStruct;
    textureBindingViewDimension: WGPUTextureViewDimension;
  end;

  WGPUTextureDataLayout = record
    nextInChain: PWGPUChainedStruct;
    offset: UInt64;
    bytesPerRow: UInt32;
    rowsPerImage: UInt32;
  end;

  WGPUTextureViewDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    format: WGPUTextureFormat;
    dimension: WGPUTextureViewDimension;
    baseMipLevel: UInt32;
    mipLevelCount: UInt32;
    baseArrayLayer: UInt32;
    arrayLayerCount: UInt32;
    aspect: WGPUTextureAspect;
  end;

  WGPUUncapturedErrorCallbackInfo = record
    nextInChain: PWGPUChainedStruct;
    callback: WGPUErrorCallback;
    userdata: Pointer;
  end;

  WGPUVertexAttribute = record
    format: WGPUVertexFormat;
    offset: UInt64;
    shaderLocation: UInt32;
  end;

  WGPUYCbCrVkDescriptor = record
    chain: WGPUChainedStruct;
    vkFormat: UInt32;
    vkYCbCrModel: UInt32;
    vkYCbCrRange: UInt32;
    vkComponentSwizzleRed: UInt32;
    vkComponentSwizzleGreen: UInt32;
    vkComponentSwizzleBlue: UInt32;
    vkComponentSwizzleAlpha: UInt32;
    vkXChromaOffset: UInt32;
    vkYChromaOffset: UInt32;
    vkChromaFilter: WGPUFilterMode;
    forceExplicitReconstruction: WGPUBool;
    externalFormat: UInt64;
  end;

  WGPUAHardwareBufferProperties = record
    yCbCrInfo: WGPUYCbCrVkDescriptor;
  end;

  WGPUAdapterPropertiesMemoryHeaps = record
    chain: WGPUChainedStructOut;
    heapCount: NativeUInt;
    heapInfo: PWGPUMemoryHeapInfo;
  end;

  WGPUBindGroupDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    layout: WGPUBindGroupLayout;
    entryCount: NativeUInt;
    entries: PWGPUBindGroupEntry;
  end;

  WGPUBindGroupLayoutEntry = record
    nextInChain: PWGPUChainedStruct;
    binding: UInt32;
    visibility: WGPUShaderStage;
    buffer: WGPUBufferBindingLayout;
    sampler: WGPUSamplerBindingLayout;
    texture: WGPUTextureBindingLayout;
    storageTexture: WGPUStorageTextureBindingLayout;
  end;

  WGPUBlendState = record
    color: WGPUBlendComponent;
    alpha: WGPUBlendComponent;
  end;

  WGPUCompilationInfo = record
    nextInChain: PWGPUChainedStruct;
    messageCount: NativeUInt;
    messages: PWGPUCompilationMessage;
  end;

  WGPUComputePassDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    timestampWrites: PWGPUComputePassTimestampWrites;
  end;

  WGPUDepthStencilState = record
    nextInChain: PWGPUChainedStruct;
    format: WGPUTextureFormat;
    depthWriteEnabled: WGPUOptionalBool;
    depthCompare: WGPUCompareFunction;
    stencilFront: WGPUStencilFaceState;
    stencilBack: WGPUStencilFaceState;
    stencilReadMask: UInt32;
    stencilWriteMask: UInt32;
    depthBias: Int32;
    depthBiasSlopeScale: Single;
    depthBiasClamp: Single;
  end;

  WGPUDrmFormatCapabilities = record
    chain: WGPUChainedStructOut;
    propertiesCount: NativeUInt;
    properties: PWGPUDrmFormatProperties;
  end;

  WGPUExternalTextureDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    plane0: WGPUTextureView;
    plane1: WGPUTextureView;
    visibleOrigin: WGPUOrigin2D;
    visibleSize: WGPUExtent2D;
    doYuvToRgbConversionOnly: WGPUBool;
    yuvToRgbConversionMatrix: PSingle;
    srcTransferFunctionParameters: PSingle;
    dstTransferFunctionParameters: PSingle;
    gamutConversionMatrix: PSingle;
    mirrored: WGPUBool;
    rotation: WGPUExternalTextureRotation;
  end;

  WGPUFutureWaitInfo = record
    future: WGPUFuture;
    completed: WGPUBool;
  end;

  WGPUImageCopyBuffer = record
    layout: WGPUTextureDataLayout;
    buffer: WGPUBuffer;
  end;

  WGPUImageCopyExternalTexture = record
    nextInChain: PWGPUChainedStruct;
    externalTexture: WGPUExternalTexture;
    origin: WGPUOrigin3D;
    naturalSize: WGPUExtent2D;
  end;

  WGPUImageCopyTexture = record
    texture: WGPUTexture;
    mipLevel: UInt32;
    origin: WGPUOrigin3D;
    aspect: WGPUTextureAspect;
  end;

  WGPUInstanceDescriptor = record
    nextInChain: PWGPUChainedStruct;
    features: WGPUInstanceFeatures;
  end;

  WGPUPipelineLayoutPixelLocalStorage = record
    chain: WGPUChainedStruct;
    totalPixelLocalStorageSize: UInt64;
    storageAttachmentCount: NativeUInt;
    storageAttachments: PWGPUPipelineLayoutStorageAttachment;
  end;

  WGPUProgrammableStageDescriptor = record
    nextInChain: PWGPUChainedStruct;
    module: WGPUShaderModule;
    entryPoint: PUTF8Char;
    constantCount: NativeUInt;
    constants: PWGPUConstantEntry;
  end;

  WGPURenderPassColorAttachment = record
    nextInChain: PWGPUChainedStruct;
    view: WGPUTextureView;
    depthSlice: UInt32;
    resolveTarget: WGPUTextureView;
    loadOp: WGPULoadOp;
    storeOp: WGPUStoreOp;
    clearValue: WGPUColor;
  end;

  WGPURenderPassStorageAttachment = record
    nextInChain: PWGPUChainedStruct;
    offset: UInt64;
    storage: WGPUTextureView;
    loadOp: WGPULoadOp;
    storeOp: WGPUStoreOp;
    clearValue: WGPUColor;
  end;

  WGPURequiredLimits = record
    nextInChain: PWGPUChainedStruct;
    limits: WGPULimits;
  end;

  WGPUSharedTextureMemoryAHardwareBufferProperties = record
    chain: WGPUChainedStructOut;
    yCbCrInfo: WGPUYCbCrVkDescriptor;
  end;

  WGPUSharedTextureMemoryDmaBufDescriptor = record
    chain: WGPUChainedStruct;
    size: WGPUExtent3D;
    drmFormat: UInt32;
    drmModifier: UInt64;
    planeCount: NativeUInt;
    planes: PWGPUSharedTextureMemoryDmaBufPlane;
  end;

  WGPUSharedTextureMemoryProperties = record
    nextInChain: PWGPUChainedStructOut;
    usage: WGPUTextureUsage;
    size: WGPUExtent3D;
    format: WGPUTextureFormat;
  end;

  WGPUSupportedLimits = record
    nextInChain: PWGPUChainedStructOut;
    limits: WGPULimits;
  end;

  WGPUTextureDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    usage: WGPUTextureUsage;
    dimension: WGPUTextureDimension;
    size: WGPUExtent3D;
    format: WGPUTextureFormat;
    mipLevelCount: UInt32;
    sampleCount: UInt32;
    viewFormatCount: NativeUInt;
    viewFormats: PWGPUTextureFormat;
  end;

  WGPUVertexBufferLayout = record
    arrayStride: UInt64;
    stepMode: WGPUVertexStepMode;
    attributeCount: NativeUInt;
    attributes: PWGPUVertexAttribute;
  end;

  WGPUBindGroupLayoutDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    entryCount: NativeUInt;
    entries: PWGPUBindGroupLayoutEntry;
  end;

  WGPUColorTargetState = record
    nextInChain: PWGPUChainedStruct;
    format: WGPUTextureFormat;
    blend: PWGPUBlendState;
    writeMask: WGPUColorWriteMask;
  end;

  WGPUComputePipelineDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    layout: WGPUPipelineLayout;
    compute: WGPUProgrammableStageDescriptor;
  end;

  WGPUDeviceDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    requiredFeatureCount: NativeUInt;
    requiredFeatures: PWGPUFeatureName;
    requiredLimits: PWGPURequiredLimits;
    defaultQueue: WGPUQueueDescriptor;
    deviceLostCallback: WGPUDeviceLostCallback;
    deviceLostUserdata: Pointer;
    deviceLostCallbackInfo: WGPUDeviceLostCallbackInfo;
    uncapturedErrorCallbackInfo: WGPUUncapturedErrorCallbackInfo;
    deviceLostCallbackInfo2: WGPUDeviceLostCallbackInfo2;
    uncapturedErrorCallbackInfo2: WGPUUncapturedErrorCallbackInfo2;
  end;

  WGPURenderPassDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    colorAttachmentCount: NativeUInt;
    colorAttachments: PWGPURenderPassColorAttachment;
    depthStencilAttachment: PWGPURenderPassDepthStencilAttachment;
    occlusionQuerySet: WGPUQuerySet;
    timestampWrites: PWGPURenderPassTimestampWrites;
  end;

  WGPURenderPassPixelLocalStorage = record
    chain: WGPUChainedStruct;
    totalPixelLocalStorageSize: UInt64;
    storageAttachmentCount: NativeUInt;
    storageAttachments: PWGPURenderPassStorageAttachment;
  end;

  WGPUVertexState = record
    nextInChain: PWGPUChainedStruct;
    module: WGPUShaderModule;
    entryPoint: PUTF8Char;
    constantCount: NativeUInt;
    constants: PWGPUConstantEntry;
    bufferCount: NativeUInt;
    buffers: PWGPUVertexBufferLayout;
  end;

  WGPUFragmentState = record
    nextInChain: PWGPUChainedStruct;
    module: WGPUShaderModule;
    entryPoint: PUTF8Char;
    constantCount: NativeUInt;
    constants: PWGPUConstantEntry;
    targetCount: NativeUInt;
    targets: PWGPUColorTargetState;
  end;

  WGPURenderPipelineDescriptor = record
    nextInChain: PWGPUChainedStruct;
    &label: PUTF8Char;
    layout: WGPUPipelineLayout;
    vertex: WGPUVertexState;
    primitive: WGPUPrimitiveState;
    depthStencil: PWGPUDepthStencilState;
    multisample: WGPUMultisampleState;
    fragment: PWGPUFragmentState;
  end;

  WGPURenderPassDescriptorMaxDrawCount = WGPURenderPassMaxDrawCount;
  WGPUShaderModuleSPIRVDescriptor = WGPUShaderSourceSPIRV;
  WGPUShaderModuleWGSLDescriptor = WGPUShaderSourceWGSL;
  WGPUSurfaceDescriptorFromAndroidNativeWindow = WGPUSurfaceSourceAndroidNativeWindow;
  WGPUSurfaceDescriptorFromCanvasHTMLSelector = WGPUSurfaceSourceCanvasHTMLSelector_Emscripten;
  WGPUSurfaceDescriptorFromMetalLayer = WGPUSurfaceSourceMetalLayer;
  WGPUSurfaceDescriptorFromWaylandSurface = WGPUSurfaceSourceWaylandSurface;
  WGPUSurfaceDescriptorFromWindowsHWND = WGPUSurfaceSourceWindowsHWND;
  WGPUSurfaceDescriptorFromXcbWindow = WGPUSurfaceSourceXCBWindow;
  WGPUSurfaceDescriptorFromXlibWindow = WGPUSurfaceSourceXlibWindow;

  WGPUProcAdapterInfoFreeMembers = procedure(value: WGPUAdapterInfo); cdecl;
  WGPUProcAdapterPropertiesFreeMembers = procedure(value: WGPUAdapterProperties); cdecl;
  WGPUProcAdapterPropertiesMemoryHeapsFreeMembers = procedure(value: WGPUAdapterPropertiesMemoryHeaps); cdecl;
  WGPUProcCreateInstance = function(const descriptor: PWGPUInstanceDescriptor): WGPUInstance; cdecl;
  WGPUProcDrmFormatCapabilitiesFreeMembers = procedure(value: WGPUDrmFormatCapabilities); cdecl;
  WGPUProcGetInstanceFeatures = function(features: PWGPUInstanceFeatures): WGPUStatus; cdecl;
  WGPUProcGetProcAddress = function(device: WGPUDevice; const procName: PUTF8Char): WGPUProc; cdecl;
  WGPUProcGetProcAddress2 = function(device: WGPUDevice; procName: WGPUStringView): WGPUProc; cdecl;
  WGPUProcSharedBufferMemoryEndAccessStateFreeMembers = procedure(value: WGPUSharedBufferMemoryEndAccessState); cdecl;
  WGPUProcSharedTextureMemoryEndAccessStateFreeMembers = procedure(value: WGPUSharedTextureMemoryEndAccessState); cdecl;
  WGPUProcSurfaceCapabilitiesFreeMembers = procedure(value: WGPUSurfaceCapabilities); cdecl;
  WGPUProcAdapterCreateDevice = function(adapter: WGPUAdapter; const descriptor: PWGPUDeviceDescriptor): WGPUDevice; cdecl;
  WGPUProcAdapterEnumerateFeatures = function(adapter: WGPUAdapter; features: PWGPUFeatureName): NativeUInt; cdecl;
  WGPUProcAdapterGetFormatCapabilities = function(adapter: WGPUAdapter; format: WGPUTextureFormat; capabilities: PWGPUFormatCapabilities): WGPUStatus; cdecl;
  WGPUProcAdapterGetInfo = function(adapter: WGPUAdapter; info: PWGPUAdapterInfo): WGPUStatus; cdecl;
  WGPUProcAdapterGetInstance = function(adapter: WGPUAdapter): WGPUInstance; cdecl;
  WGPUProcAdapterGetLimits = function(adapter: WGPUAdapter; limits: PWGPUSupportedLimits): WGPUStatus; cdecl;
  WGPUProcAdapterGetProperties = function(adapter: WGPUAdapter; properties: PWGPUAdapterProperties): WGPUStatus; cdecl;
  WGPUProcAdapterHasFeature = function(adapter: WGPUAdapter; feature: WGPUFeatureName): WGPUBool; cdecl;
  WGPUProcAdapterRequestDevice = procedure(adapter: WGPUAdapter; const descriptor: PWGPUDeviceDescriptor; callback: WGPURequestDeviceCallback; userdata: Pointer); cdecl;
  WGPUProcAdapterRequestDevice2 = function(adapter: WGPUAdapter; const options: PWGPUDeviceDescriptor; callbackInfo: WGPURequestDeviceCallbackInfo2): WGPUFuture; cdecl;
  WGPUProcAdapterRequestDeviceF = function(adapter: WGPUAdapter; const options: PWGPUDeviceDescriptor; callbackInfo: WGPURequestDeviceCallbackInfo): WGPUFuture; cdecl;
  WGPUProcAdapterAddRef = procedure(adapter: WGPUAdapter); cdecl;
  WGPUProcAdapterRelease = procedure(adapter: WGPUAdapter); cdecl;
  WGPUProcBindGroupSetLabel = procedure(bindGroup: WGPUBindGroup; const &label: PUTF8Char); cdecl;
  WGPUProcBindGroupSetLabel2 = procedure(bindGroup: WGPUBindGroup; &label: WGPUStringView); cdecl;
  WGPUProcBindGroupAddRef = procedure(bindGroup: WGPUBindGroup); cdecl;
  WGPUProcBindGroupRelease = procedure(bindGroup: WGPUBindGroup); cdecl;
  WGPUProcBindGroupLayoutSetLabel = procedure(bindGroupLayout: WGPUBindGroupLayout; const &label: PUTF8Char); cdecl;
  WGPUProcBindGroupLayoutSetLabel2 = procedure(bindGroupLayout: WGPUBindGroupLayout; &label: WGPUStringView); cdecl;
  WGPUProcBindGroupLayoutAddRef = procedure(bindGroupLayout: WGPUBindGroupLayout); cdecl;
  WGPUProcBindGroupLayoutRelease = procedure(bindGroupLayout: WGPUBindGroupLayout); cdecl;
  WGPUProcBufferDestroy = procedure(buffer: WGPUBuffer); cdecl;
  WGPUProcBufferGetConstMappedRange = function(buffer: WGPUBuffer; offset: NativeUInt; size: NativeUInt): Pointer; cdecl;
  WGPUProcBufferGetMapState = function(buffer: WGPUBuffer): WGPUBufferMapState; cdecl;
  WGPUProcBufferGetMappedRange = function(buffer: WGPUBuffer; offset: NativeUInt; size: NativeUInt): Pointer; cdecl;
  WGPUProcBufferGetSize = function(buffer: WGPUBuffer): UInt64; cdecl;
  WGPUProcBufferGetUsage = function(buffer: WGPUBuffer): WGPUBufferUsage; cdecl;
  WGPUProcBufferMapAsync = procedure(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callback: WGPUBufferMapCallback; userdata: Pointer); cdecl;
  WGPUProcBufferMapAsync2 = function(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callbackInfo: WGPUBufferMapCallbackInfo2): WGPUFuture; cdecl;
  WGPUProcBufferMapAsyncF = function(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callbackInfo: WGPUBufferMapCallbackInfo): WGPUFuture; cdecl;
  WGPUProcBufferSetLabel = procedure(buffer: WGPUBuffer; const &label: PUTF8Char); cdecl;
  WGPUProcBufferSetLabel2 = procedure(buffer: WGPUBuffer; &label: WGPUStringView); cdecl;
  WGPUProcBufferUnmap = procedure(buffer: WGPUBuffer); cdecl;
  WGPUProcBufferAddRef = procedure(buffer: WGPUBuffer); cdecl;
  WGPUProcBufferRelease = procedure(buffer: WGPUBuffer); cdecl;
  WGPUProcCommandBufferSetLabel = procedure(commandBuffer: WGPUCommandBuffer; const &label: PUTF8Char); cdecl;
  WGPUProcCommandBufferSetLabel2 = procedure(commandBuffer: WGPUCommandBuffer; &label: WGPUStringView); cdecl;
  WGPUProcCommandBufferAddRef = procedure(commandBuffer: WGPUCommandBuffer); cdecl;
  WGPUProcCommandBufferRelease = procedure(commandBuffer: WGPUCommandBuffer); cdecl;
  WGPUProcCommandEncoderBeginComputePass = function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPUComputePassDescriptor): WGPUComputePassEncoder; cdecl;
  WGPUProcCommandEncoderBeginRenderPass = function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPURenderPassDescriptor): WGPURenderPassEncoder; cdecl;
  WGPUProcCommandEncoderClearBuffer = procedure(commandEncoder: WGPUCommandEncoder; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
  WGPUProcCommandEncoderCopyBufferToBuffer = procedure(commandEncoder: WGPUCommandEncoder; source: WGPUBuffer; sourceOffset: UInt64; destination: WGPUBuffer; destinationOffset: UInt64; size: UInt64); cdecl;
  WGPUProcCommandEncoderCopyBufferToTexture = procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyBuffer; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D); cdecl;
  WGPUProcCommandEncoderCopyTextureToBuffer = procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyBuffer; const copySize: PWGPUExtent3D); cdecl;
  WGPUProcCommandEncoderCopyTextureToTexture = procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D); cdecl;
  WGPUProcCommandEncoderFinish = function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPUCommandBufferDescriptor): WGPUCommandBuffer; cdecl;
  WGPUProcCommandEncoderInjectValidationError = procedure(commandEncoder: WGPUCommandEncoder; const &message: PUTF8Char); cdecl;
  WGPUProcCommandEncoderInjectValidationError2 = procedure(commandEncoder: WGPUCommandEncoder; &message: WGPUStringView); cdecl;
  WGPUProcCommandEncoderInsertDebugMarker = procedure(commandEncoder: WGPUCommandEncoder; const markerLabel: PUTF8Char); cdecl;
  WGPUProcCommandEncoderInsertDebugMarker2 = procedure(commandEncoder: WGPUCommandEncoder; markerLabel: WGPUStringView); cdecl;
  WGPUProcCommandEncoderPopDebugGroup = procedure(commandEncoder: WGPUCommandEncoder); cdecl;
  WGPUProcCommandEncoderPushDebugGroup = procedure(commandEncoder: WGPUCommandEncoder; const groupLabel: PUTF8Char); cdecl;
  WGPUProcCommandEncoderPushDebugGroup2 = procedure(commandEncoder: WGPUCommandEncoder; groupLabel: WGPUStringView); cdecl;
  WGPUProcCommandEncoderResolveQuerySet = procedure(commandEncoder: WGPUCommandEncoder; querySet: WGPUQuerySet; firstQuery: UInt32; queryCount: UInt32; destination: WGPUBuffer; destinationOffset: UInt64); cdecl;
  WGPUProcCommandEncoderSetLabel = procedure(commandEncoder: WGPUCommandEncoder; const &label: PUTF8Char); cdecl;
  WGPUProcCommandEncoderSetLabel2 = procedure(commandEncoder: WGPUCommandEncoder; &label: WGPUStringView); cdecl;
  WGPUProcCommandEncoderWriteBuffer = procedure(commandEncoder: WGPUCommandEncoder; buffer: WGPUBuffer; bufferOffset: UInt64; const data: PUInt8; size: UInt64); cdecl;
  WGPUProcCommandEncoderWriteTimestamp = procedure(commandEncoder: WGPUCommandEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
  WGPUProcCommandEncoderAddRef = procedure(commandEncoder: WGPUCommandEncoder); cdecl;
  WGPUProcCommandEncoderRelease = procedure(commandEncoder: WGPUCommandEncoder); cdecl;
  WGPUProcComputePassEncoderDispatchWorkgroups = procedure(computePassEncoder: WGPUComputePassEncoder; workgroupCountX: UInt32; workgroupCountY: UInt32; workgroupCountZ: UInt32); cdecl;
  WGPUProcComputePassEncoderDispatchWorkgroupsIndirect = procedure(computePassEncoder: WGPUComputePassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  WGPUProcComputePassEncoderEnd = procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;
  WGPUProcComputePassEncoderInsertDebugMarker = procedure(computePassEncoder: WGPUComputePassEncoder; const markerLabel: PUTF8Char); cdecl;
  WGPUProcComputePassEncoderInsertDebugMarker2 = procedure(computePassEncoder: WGPUComputePassEncoder; markerLabel: WGPUStringView); cdecl;
  WGPUProcComputePassEncoderPopDebugGroup = procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;
  WGPUProcComputePassEncoderPushDebugGroup = procedure(computePassEncoder: WGPUComputePassEncoder; const groupLabel: PUTF8Char); cdecl;
  WGPUProcComputePassEncoderPushDebugGroup2 = procedure(computePassEncoder: WGPUComputePassEncoder; groupLabel: WGPUStringView); cdecl;
  WGPUProcComputePassEncoderSetBindGroup = procedure(computePassEncoder: WGPUComputePassEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
  WGPUProcComputePassEncoderSetLabel = procedure(computePassEncoder: WGPUComputePassEncoder; const &label: PUTF8Char); cdecl;
  WGPUProcComputePassEncoderSetLabel2 = procedure(computePassEncoder: WGPUComputePassEncoder; &label: WGPUStringView); cdecl;
  WGPUProcComputePassEncoderSetPipeline = procedure(computePassEncoder: WGPUComputePassEncoder; pipeline: WGPUComputePipeline); cdecl;
  WGPUProcComputePassEncoderWriteTimestamp = procedure(computePassEncoder: WGPUComputePassEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
  WGPUProcComputePassEncoderAddRef = procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;
  WGPUProcComputePassEncoderRelease = procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;
  WGPUProcComputePipelineGetBindGroupLayout = function(computePipeline: WGPUComputePipeline; groupIndex: UInt32): WGPUBindGroupLayout; cdecl;
  WGPUProcComputePipelineSetLabel = procedure(computePipeline: WGPUComputePipeline; const &label: PUTF8Char); cdecl;
  WGPUProcComputePipelineSetLabel2 = procedure(computePipeline: WGPUComputePipeline; &label: WGPUStringView); cdecl;
  WGPUProcComputePipelineAddRef = procedure(computePipeline: WGPUComputePipeline); cdecl;
  WGPUProcComputePipelineRelease = procedure(computePipeline: WGPUComputePipeline); cdecl;
  WGPUProcDeviceCreateBindGroup = function(device: WGPUDevice; const descriptor: PWGPUBindGroupDescriptor): WGPUBindGroup; cdecl;
  WGPUProcDeviceCreateBindGroupLayout = function(device: WGPUDevice; const descriptor: PWGPUBindGroupLayoutDescriptor): WGPUBindGroupLayout; cdecl;
  WGPUProcDeviceCreateBuffer = function(device: WGPUDevice; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
  WGPUProcDeviceCreateCommandEncoder = function(device: WGPUDevice; const descriptor: PWGPUCommandEncoderDescriptor): WGPUCommandEncoder; cdecl;
  WGPUProcDeviceCreateComputePipeline = function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor): WGPUComputePipeline; cdecl;
  WGPUProcDeviceCreateComputePipelineAsync = procedure(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callback: WGPUCreateComputePipelineAsyncCallback; userdata: Pointer); cdecl;
  WGPUProcDeviceCreateComputePipelineAsync2 = function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo2): WGPUFuture; cdecl;
  WGPUProcDeviceCreateComputePipelineAsyncF = function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo): WGPUFuture; cdecl;
  WGPUProcDeviceCreateErrorBuffer = function(device: WGPUDevice; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
  WGPUProcDeviceCreateErrorExternalTexture = function(device: WGPUDevice): WGPUExternalTexture; cdecl;
  WGPUProcDeviceCreateErrorShaderModule = function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor; const errorMessage: PUTF8Char): WGPUShaderModule; cdecl;
  WGPUProcDeviceCreateErrorShaderModule2 = function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor; errorMessage: WGPUStringView): WGPUShaderModule; cdecl;
  WGPUProcDeviceCreateErrorTexture = function(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
  WGPUProcDeviceCreateExternalTexture = function(device: WGPUDevice; const externalTextureDescriptor: PWGPUExternalTextureDescriptor): WGPUExternalTexture; cdecl;
  WGPUProcDeviceCreatePipelineLayout = function(device: WGPUDevice; const descriptor: PWGPUPipelineLayoutDescriptor): WGPUPipelineLayout; cdecl;
  WGPUProcDeviceCreateQuerySet = function(device: WGPUDevice; const descriptor: PWGPUQuerySetDescriptor): WGPUQuerySet; cdecl;
  WGPUProcDeviceCreateRenderBundleEncoder = function(device: WGPUDevice; const descriptor: PWGPURenderBundleEncoderDescriptor): WGPURenderBundleEncoder; cdecl;
  WGPUProcDeviceCreateRenderPipeline = function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor): WGPURenderPipeline; cdecl;
  WGPUProcDeviceCreateRenderPipelineAsync = procedure(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callback: WGPUCreateRenderPipelineAsyncCallback; userdata: Pointer); cdecl;
  WGPUProcDeviceCreateRenderPipelineAsync2 = function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo2): WGPUFuture; cdecl;
  WGPUProcDeviceCreateRenderPipelineAsyncF = function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo): WGPUFuture; cdecl;
  WGPUProcDeviceCreateSampler = function(device: WGPUDevice; const descriptor: PWGPUSamplerDescriptor): WGPUSampler; cdecl;
  WGPUProcDeviceCreateShaderModule = function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor): WGPUShaderModule; cdecl;
  WGPUProcDeviceCreateSwapChain = function(device: WGPUDevice; surface: WGPUSurface; const descriptor: PWGPUSwapChainDescriptor): WGPUSwapChain; cdecl;
  WGPUProcDeviceCreateTexture = function(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
  WGPUProcDeviceDestroy = procedure(device: WGPUDevice); cdecl;
  WGPUProcDeviceEnumerateFeatures = function(device: WGPUDevice; features: PWGPUFeatureName): NativeUInt; cdecl;
  WGPUProcDeviceForceLoss = procedure(device: WGPUDevice; &type: WGPUDeviceLostReason; const &message: PUTF8Char); cdecl;
  WGPUProcDeviceForceLoss2 = procedure(device: WGPUDevice; &type: WGPUDeviceLostReason; &message: WGPUStringView); cdecl;
  WGPUProcDeviceGetAHardwareBufferProperties = function(device: WGPUDevice; handle: Pointer; properties: PWGPUAHardwareBufferProperties): WGPUStatus; cdecl;
  WGPUProcDeviceGetAdapter = function(device: WGPUDevice): WGPUAdapter; cdecl;
  WGPUProcDeviceGetLimits = function(device: WGPUDevice; limits: PWGPUSupportedLimits): WGPUStatus; cdecl;
  WGPUProcDeviceGetQueue = function(device: WGPUDevice): WGPUQueue; cdecl;
  WGPUProcDeviceGetSupportedSurfaceUsage = function(device: WGPUDevice; surface: WGPUSurface): WGPUTextureUsage; cdecl;
  WGPUProcDeviceHasFeature = function(device: WGPUDevice; feature: WGPUFeatureName): WGPUBool; cdecl;
  WGPUProcDeviceImportSharedBufferMemory = function(device: WGPUDevice; const descriptor: PWGPUSharedBufferMemoryDescriptor): WGPUSharedBufferMemory; cdecl;
  WGPUProcDeviceImportSharedFence = function(device: WGPUDevice; const descriptor: PWGPUSharedFenceDescriptor): WGPUSharedFence; cdecl;
  WGPUProcDeviceImportSharedTextureMemory = function(device: WGPUDevice; const descriptor: PWGPUSharedTextureMemoryDescriptor): WGPUSharedTextureMemory; cdecl;
  WGPUProcDeviceInjectError = procedure(device: WGPUDevice; &type: WGPUErrorType; const &message: PUTF8Char); cdecl;
  WGPUProcDeviceInjectError2 = procedure(device: WGPUDevice; &type: WGPUErrorType; &message: WGPUStringView); cdecl;
  WGPUProcDevicePopErrorScope = procedure(device: WGPUDevice; oldCallback: WGPUErrorCallback; userdata: Pointer); cdecl;
  WGPUProcDevicePopErrorScope2 = function(device: WGPUDevice; callbackInfo: WGPUPopErrorScopeCallbackInfo2): WGPUFuture; cdecl;
  WGPUProcDevicePopErrorScopeF = function(device: WGPUDevice; callbackInfo: WGPUPopErrorScopeCallbackInfo): WGPUFuture; cdecl;
  WGPUProcDevicePushErrorScope = procedure(device: WGPUDevice; filter: WGPUErrorFilter); cdecl;
  WGPUProcDeviceSetDeviceLostCallback = procedure(device: WGPUDevice; callback: WGPUDeviceLostCallback; userdata: Pointer); cdecl;
  WGPUProcDeviceSetLabel = procedure(device: WGPUDevice; const &label: PUTF8Char); cdecl;
  WGPUProcDeviceSetLabel2 = procedure(device: WGPUDevice; &label: WGPUStringView); cdecl;
  WGPUProcDeviceSetLoggingCallback = procedure(device: WGPUDevice; callback: WGPULoggingCallback; userdata: Pointer); cdecl;
  WGPUProcDeviceSetUncapturedErrorCallback = procedure(device: WGPUDevice; callback: WGPUErrorCallback; userdata: Pointer); cdecl;
  WGPUProcDeviceTick = procedure(device: WGPUDevice); cdecl;
  WGPUProcDeviceValidateTextureDescriptor = procedure(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor); cdecl;
  WGPUProcDeviceAddRef = procedure(device: WGPUDevice); cdecl;
  WGPUProcDeviceRelease = procedure(device: WGPUDevice); cdecl;
  WGPUProcExternalTextureDestroy = procedure(externalTexture: WGPUExternalTexture); cdecl;
  WGPUProcExternalTextureExpire = procedure(externalTexture: WGPUExternalTexture); cdecl;
  WGPUProcExternalTextureRefresh = procedure(externalTexture: WGPUExternalTexture); cdecl;
  WGPUProcExternalTextureSetLabel = procedure(externalTexture: WGPUExternalTexture; const &label: PUTF8Char); cdecl;
  WGPUProcExternalTextureSetLabel2 = procedure(externalTexture: WGPUExternalTexture; &label: WGPUStringView); cdecl;
  WGPUProcExternalTextureAddRef = procedure(externalTexture: WGPUExternalTexture); cdecl;
  WGPUProcExternalTextureRelease = procedure(externalTexture: WGPUExternalTexture); cdecl;
  WGPUProcInstanceCreateSurface = function(instance: WGPUInstance; const descriptor: PWGPUSurfaceDescriptor): WGPUSurface; cdecl;
  WGPUProcInstanceEnumerateWGSLLanguageFeatures = function(instance: WGPUInstance; features: PWGPUWGSLFeatureName): NativeUInt; cdecl;
  WGPUProcInstanceHasWGSLLanguageFeature = function(instance: WGPUInstance; feature: WGPUWGSLFeatureName): WGPUBool; cdecl;
  WGPUProcInstanceProcessEvents = procedure(instance: WGPUInstance); cdecl;
  WGPUProcInstanceRequestAdapter = procedure(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callback: WGPURequestAdapterCallback; userdata: Pointer); cdecl;
  WGPUProcInstanceRequestAdapter2 = function(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callbackInfo: WGPURequestAdapterCallbackInfo2): WGPUFuture; cdecl;
  WGPUProcInstanceRequestAdapterF = function(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callbackInfo: WGPURequestAdapterCallbackInfo): WGPUFuture; cdecl;
  WGPUProcInstanceWaitAny = function(instance: WGPUInstance; futureCount: NativeUInt; futures: PWGPUFutureWaitInfo; timeoutNS: UInt64): WGPUWaitStatus; cdecl;
  WGPUProcInstanceAddRef = procedure(instance: WGPUInstance); cdecl;
  WGPUProcInstanceRelease = procedure(instance: WGPUInstance); cdecl;
  WGPUProcPipelineLayoutSetLabel = procedure(pipelineLayout: WGPUPipelineLayout; const &label: PUTF8Char); cdecl;
  WGPUProcPipelineLayoutSetLabel2 = procedure(pipelineLayout: WGPUPipelineLayout; &label: WGPUStringView); cdecl;
  WGPUProcPipelineLayoutAddRef = procedure(pipelineLayout: WGPUPipelineLayout); cdecl;
  WGPUProcPipelineLayoutRelease = procedure(pipelineLayout: WGPUPipelineLayout); cdecl;
  WGPUProcQuerySetDestroy = procedure(querySet: WGPUQuerySet); cdecl;
  WGPUProcQuerySetGetCount = function(querySet: WGPUQuerySet): UInt32; cdecl;
  WGPUProcQuerySetGetType = function(querySet: WGPUQuerySet): WGPUQueryType; cdecl;
  WGPUProcQuerySetSetLabel = procedure(querySet: WGPUQuerySet; const &label: PUTF8Char); cdecl;
  WGPUProcQuerySetSetLabel2 = procedure(querySet: WGPUQuerySet; &label: WGPUStringView); cdecl;
  WGPUProcQuerySetAddRef = procedure(querySet: WGPUQuerySet); cdecl;
  WGPUProcQuerySetRelease = procedure(querySet: WGPUQuerySet); cdecl;
  WGPUProcQueueCopyExternalTextureForBrowser = procedure(queue: WGPUQueue; const source: PWGPUImageCopyExternalTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D; const options: PWGPUCopyTextureForBrowserOptions); cdecl;
  WGPUProcQueueCopyTextureForBrowser = procedure(queue: WGPUQueue; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D; const options: PWGPUCopyTextureForBrowserOptions); cdecl;
  WGPUProcQueueOnSubmittedWorkDone = procedure(queue: WGPUQueue; callback: WGPUQueueWorkDoneCallback; userdata: Pointer); cdecl;
  WGPUProcQueueOnSubmittedWorkDone2 = function(queue: WGPUQueue; callbackInfo: WGPUQueueWorkDoneCallbackInfo2): WGPUFuture; cdecl;
  WGPUProcQueueOnSubmittedWorkDoneF = function(queue: WGPUQueue; callbackInfo: WGPUQueueWorkDoneCallbackInfo): WGPUFuture; cdecl;
  WGPUProcQueueSetLabel = procedure(queue: WGPUQueue; const &label: PUTF8Char); cdecl;
  WGPUProcQueueSetLabel2 = procedure(queue: WGPUQueue; &label: WGPUStringView); cdecl;
  WGPUProcQueueSubmit = procedure(queue: WGPUQueue; commandCount: NativeUInt; const commands: PWGPUCommandBuffer); cdecl;
  WGPUProcQueueWriteBuffer = procedure(queue: WGPUQueue; buffer: WGPUBuffer; bufferOffset: UInt64; const data: Pointer; size: NativeUInt); cdecl;
  WGPUProcQueueWriteTexture = procedure(queue: WGPUQueue; const destination: PWGPUImageCopyTexture; const data: Pointer; dataSize: NativeUInt; const dataLayout: PWGPUTextureDataLayout; const writeSize: PWGPUExtent3D); cdecl;
  WGPUProcQueueAddRef = procedure(queue: WGPUQueue); cdecl;
  WGPUProcQueueRelease = procedure(queue: WGPUQueue); cdecl;
  WGPUProcRenderBundleSetLabel = procedure(renderBundle: WGPURenderBundle; const &label: PUTF8Char); cdecl;
  WGPUProcRenderBundleSetLabel2 = procedure(renderBundle: WGPURenderBundle; &label: WGPUStringView); cdecl;
  WGPUProcRenderBundleAddRef = procedure(renderBundle: WGPURenderBundle); cdecl;
  WGPUProcRenderBundleRelease = procedure(renderBundle: WGPURenderBundle); cdecl;
  WGPUProcRenderBundleEncoderDraw = procedure(renderBundleEncoder: WGPURenderBundleEncoder; vertexCount: UInt32; instanceCount: UInt32; firstVertex: UInt32; firstInstance: UInt32); cdecl;
  WGPUProcRenderBundleEncoderDrawIndexed = procedure(renderBundleEncoder: WGPURenderBundleEncoder; indexCount: UInt32; instanceCount: UInt32; firstIndex: UInt32; baseVertex: Int32; firstInstance: UInt32); cdecl;
  WGPUProcRenderBundleEncoderDrawIndexedIndirect = procedure(renderBundleEncoder: WGPURenderBundleEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  WGPUProcRenderBundleEncoderDrawIndirect = procedure(renderBundleEncoder: WGPURenderBundleEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  WGPUProcRenderBundleEncoderFinish = function(renderBundleEncoder: WGPURenderBundleEncoder; const descriptor: PWGPURenderBundleDescriptor): WGPURenderBundle; cdecl;
  WGPUProcRenderBundleEncoderInsertDebugMarker = procedure(renderBundleEncoder: WGPURenderBundleEncoder; const markerLabel: PUTF8Char); cdecl;
  WGPUProcRenderBundleEncoderInsertDebugMarker2 = procedure(renderBundleEncoder: WGPURenderBundleEncoder; markerLabel: WGPUStringView); cdecl;
  WGPUProcRenderBundleEncoderPopDebugGroup = procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
  WGPUProcRenderBundleEncoderPushDebugGroup = procedure(renderBundleEncoder: WGPURenderBundleEncoder; const groupLabel: PUTF8Char); cdecl;
  WGPUProcRenderBundleEncoderPushDebugGroup2 = procedure(renderBundleEncoder: WGPURenderBundleEncoder; groupLabel: WGPUStringView); cdecl;
  WGPUProcRenderBundleEncoderSetBindGroup = procedure(renderBundleEncoder: WGPURenderBundleEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
  WGPUProcRenderBundleEncoderSetIndexBuffer = procedure(renderBundleEncoder: WGPURenderBundleEncoder; buffer: WGPUBuffer; format: WGPUIndexFormat; offset: UInt64; size: UInt64); cdecl;
  WGPUProcRenderBundleEncoderSetLabel = procedure(renderBundleEncoder: WGPURenderBundleEncoder; const &label: PUTF8Char); cdecl;
  WGPUProcRenderBundleEncoderSetLabel2 = procedure(renderBundleEncoder: WGPURenderBundleEncoder; &label: WGPUStringView); cdecl;
  WGPUProcRenderBundleEncoderSetPipeline = procedure(renderBundleEncoder: WGPURenderBundleEncoder; pipeline: WGPURenderPipeline); cdecl;
  WGPUProcRenderBundleEncoderSetVertexBuffer = procedure(renderBundleEncoder: WGPURenderBundleEncoder; slot: UInt32; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
  WGPUProcRenderBundleEncoderAddRef = procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
  WGPUProcRenderBundleEncoderRelease = procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
  WGPUProcRenderPassEncoderBeginOcclusionQuery = procedure(renderPassEncoder: WGPURenderPassEncoder; queryIndex: UInt32); cdecl;
  WGPUProcRenderPassEncoderDraw = procedure(renderPassEncoder: WGPURenderPassEncoder; vertexCount: UInt32; instanceCount: UInt32; firstVertex: UInt32; firstInstance: UInt32); cdecl;
  WGPUProcRenderPassEncoderDrawIndexed = procedure(renderPassEncoder: WGPURenderPassEncoder; indexCount: UInt32; instanceCount: UInt32; firstIndex: UInt32; baseVertex: Int32; firstInstance: UInt32); cdecl;
  WGPUProcRenderPassEncoderDrawIndexedIndirect = procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  WGPUProcRenderPassEncoderDrawIndirect = procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
  WGPUProcRenderPassEncoderEnd = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  WGPUProcRenderPassEncoderEndOcclusionQuery = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  WGPUProcRenderPassEncoderExecuteBundles = procedure(renderPassEncoder: WGPURenderPassEncoder; bundleCount: NativeUInt; const bundles: PWGPURenderBundle); cdecl;
  WGPUProcRenderPassEncoderInsertDebugMarker = procedure(renderPassEncoder: WGPURenderPassEncoder; const markerLabel: PUTF8Char); cdecl;
  WGPUProcRenderPassEncoderInsertDebugMarker2 = procedure(renderPassEncoder: WGPURenderPassEncoder; markerLabel: WGPUStringView); cdecl;
  WGPUProcRenderPassEncoderMultiDrawIndexedIndirect = procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64; maxDrawCount: UInt32; drawCountBuffer: WGPUBuffer; drawCountBufferOffset: UInt64); cdecl;
  WGPUProcRenderPassEncoderMultiDrawIndirect = procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64; maxDrawCount: UInt32; drawCountBuffer: WGPUBuffer; drawCountBufferOffset: UInt64); cdecl;
  WGPUProcRenderPassEncoderPixelLocalStorageBarrier = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  WGPUProcRenderPassEncoderPopDebugGroup = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  WGPUProcRenderPassEncoderPushDebugGroup = procedure(renderPassEncoder: WGPURenderPassEncoder; const groupLabel: PUTF8Char); cdecl;
  WGPUProcRenderPassEncoderPushDebugGroup2 = procedure(renderPassEncoder: WGPURenderPassEncoder; groupLabel: WGPUStringView); cdecl;
  WGPUProcRenderPassEncoderSetBindGroup = procedure(renderPassEncoder: WGPURenderPassEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
  WGPUProcRenderPassEncoderSetBlendConstant = procedure(renderPassEncoder: WGPURenderPassEncoder; const color: PWGPUColor); cdecl;
  WGPUProcRenderPassEncoderSetIndexBuffer = procedure(renderPassEncoder: WGPURenderPassEncoder; buffer: WGPUBuffer; format: WGPUIndexFormat; offset: UInt64; size: UInt64); cdecl;
  WGPUProcRenderPassEncoderSetLabel = procedure(renderPassEncoder: WGPURenderPassEncoder; const &label: PUTF8Char); cdecl;
  WGPUProcRenderPassEncoderSetLabel2 = procedure(renderPassEncoder: WGPURenderPassEncoder; &label: WGPUStringView); cdecl;
  WGPUProcRenderPassEncoderSetPipeline = procedure(renderPassEncoder: WGPURenderPassEncoder; pipeline: WGPURenderPipeline); cdecl;
  WGPUProcRenderPassEncoderSetScissorRect = procedure(renderPassEncoder: WGPURenderPassEncoder; x: UInt32; y: UInt32; width: UInt32; height: UInt32); cdecl;
  WGPUProcRenderPassEncoderSetStencilReference = procedure(renderPassEncoder: WGPURenderPassEncoder; reference: UInt32); cdecl;
  WGPUProcRenderPassEncoderSetVertexBuffer = procedure(renderPassEncoder: WGPURenderPassEncoder; slot: UInt32; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
  WGPUProcRenderPassEncoderSetViewport = procedure(renderPassEncoder: WGPURenderPassEncoder; x: Single; y: Single; width: Single; height: Single; minDepth: Single; maxDepth: Single); cdecl;
  WGPUProcRenderPassEncoderWriteTimestamp = procedure(renderPassEncoder: WGPURenderPassEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
  WGPUProcRenderPassEncoderAddRef = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  WGPUProcRenderPassEncoderRelease = procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
  WGPUProcRenderPipelineGetBindGroupLayout = function(renderPipeline: WGPURenderPipeline; groupIndex: UInt32): WGPUBindGroupLayout; cdecl;
  WGPUProcRenderPipelineSetLabel = procedure(renderPipeline: WGPURenderPipeline; const &label: PUTF8Char); cdecl;
  WGPUProcRenderPipelineSetLabel2 = procedure(renderPipeline: WGPURenderPipeline; &label: WGPUStringView); cdecl;
  WGPUProcRenderPipelineAddRef = procedure(renderPipeline: WGPURenderPipeline); cdecl;
  WGPUProcRenderPipelineRelease = procedure(renderPipeline: WGPURenderPipeline); cdecl;
  WGPUProcSamplerSetLabel = procedure(sampler: WGPUSampler; const &label: PUTF8Char); cdecl;
  WGPUProcSamplerSetLabel2 = procedure(sampler: WGPUSampler; &label: WGPUStringView); cdecl;
  WGPUProcSamplerAddRef = procedure(sampler: WGPUSampler); cdecl;
  WGPUProcSamplerRelease = procedure(sampler: WGPUSampler); cdecl;
  WGPUProcShaderModuleGetCompilationInfo = procedure(shaderModule: WGPUShaderModule; callback: WGPUCompilationInfoCallback; userdata: Pointer); cdecl;
  WGPUProcShaderModuleGetCompilationInfo2 = function(shaderModule: WGPUShaderModule; callbackInfo: WGPUCompilationInfoCallbackInfo2): WGPUFuture; cdecl;
  WGPUProcShaderModuleGetCompilationInfoF = function(shaderModule: WGPUShaderModule; callbackInfo: WGPUCompilationInfoCallbackInfo): WGPUFuture; cdecl;
  WGPUProcShaderModuleSetLabel = procedure(shaderModule: WGPUShaderModule; const &label: PUTF8Char); cdecl;
  WGPUProcShaderModuleSetLabel2 = procedure(shaderModule: WGPUShaderModule; &label: WGPUStringView); cdecl;
  WGPUProcShaderModuleAddRef = procedure(shaderModule: WGPUShaderModule); cdecl;
  WGPUProcShaderModuleRelease = procedure(shaderModule: WGPUShaderModule); cdecl;
  WGPUProcSharedBufferMemoryBeginAccess = function(sharedBufferMemory: WGPUSharedBufferMemory; buffer: WGPUBuffer; const descriptor: PWGPUSharedBufferMemoryBeginAccessDescriptor): WGPUStatus; cdecl;
  WGPUProcSharedBufferMemoryCreateBuffer = function(sharedBufferMemory: WGPUSharedBufferMemory; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
  WGPUProcSharedBufferMemoryEndAccess = function(sharedBufferMemory: WGPUSharedBufferMemory; buffer: WGPUBuffer; descriptor: PWGPUSharedBufferMemoryEndAccessState): WGPUStatus; cdecl;
  WGPUProcSharedBufferMemoryGetProperties = function(sharedBufferMemory: WGPUSharedBufferMemory; properties: PWGPUSharedBufferMemoryProperties): WGPUStatus; cdecl;
  WGPUProcSharedBufferMemoryIsDeviceLost = function(sharedBufferMemory: WGPUSharedBufferMemory): WGPUBool; cdecl;
  WGPUProcSharedBufferMemorySetLabel = procedure(sharedBufferMemory: WGPUSharedBufferMemory; const &label: PUTF8Char); cdecl;
  WGPUProcSharedBufferMemorySetLabel2 = procedure(sharedBufferMemory: WGPUSharedBufferMemory; &label: WGPUStringView); cdecl;
  WGPUProcSharedBufferMemoryAddRef = procedure(sharedBufferMemory: WGPUSharedBufferMemory); cdecl;
  WGPUProcSharedBufferMemoryRelease = procedure(sharedBufferMemory: WGPUSharedBufferMemory); cdecl;
  WGPUProcSharedFenceExportInfo = procedure(sharedFence: WGPUSharedFence; info: PWGPUSharedFenceExportInfo); cdecl;
  WGPUProcSharedFenceAddRef = procedure(sharedFence: WGPUSharedFence); cdecl;
  WGPUProcSharedFenceRelease = procedure(sharedFence: WGPUSharedFence); cdecl;
  WGPUProcSharedTextureMemoryBeginAccess = function(sharedTextureMemory: WGPUSharedTextureMemory; texture: WGPUTexture; const descriptor: PWGPUSharedTextureMemoryBeginAccessDescriptor): WGPUStatus; cdecl;
  WGPUProcSharedTextureMemoryCreateTexture = function(sharedTextureMemory: WGPUSharedTextureMemory; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
  WGPUProcSharedTextureMemoryEndAccess = function(sharedTextureMemory: WGPUSharedTextureMemory; texture: WGPUTexture; descriptor: PWGPUSharedTextureMemoryEndAccessState): WGPUStatus; cdecl;
  WGPUProcSharedTextureMemoryGetProperties = function(sharedTextureMemory: WGPUSharedTextureMemory; properties: PWGPUSharedTextureMemoryProperties): WGPUStatus; cdecl;
  WGPUProcSharedTextureMemoryIsDeviceLost = function(sharedTextureMemory: WGPUSharedTextureMemory): WGPUBool; cdecl;
  WGPUProcSharedTextureMemorySetLabel = procedure(sharedTextureMemory: WGPUSharedTextureMemory; const &label: PUTF8Char); cdecl;
  WGPUProcSharedTextureMemorySetLabel2 = procedure(sharedTextureMemory: WGPUSharedTextureMemory; &label: WGPUStringView); cdecl;
  WGPUProcSharedTextureMemoryAddRef = procedure(sharedTextureMemory: WGPUSharedTextureMemory); cdecl;
  WGPUProcSharedTextureMemoryRelease = procedure(sharedTextureMemory: WGPUSharedTextureMemory); cdecl;
  WGPUProcSurfaceConfigure = procedure(surface: WGPUSurface; const config: PWGPUSurfaceConfiguration); cdecl;
  WGPUProcSurfaceGetCapabilities = function(surface: WGPUSurface; adapter: WGPUAdapter; capabilities: PWGPUSurfaceCapabilities): WGPUStatus; cdecl;
  WGPUProcSurfaceGetCurrentTexture = procedure(surface: WGPUSurface; surfaceTexture: PWGPUSurfaceTexture); cdecl;
  WGPUProcSurfaceGetPreferredFormat = function(surface: WGPUSurface; adapter: WGPUAdapter): WGPUTextureFormat; cdecl;
  WGPUProcSurfacePresent = procedure(surface: WGPUSurface); cdecl;
  WGPUProcSurfaceSetLabel = procedure(surface: WGPUSurface; const &label: PUTF8Char); cdecl;
  WGPUProcSurfaceSetLabel2 = procedure(surface: WGPUSurface; &label: WGPUStringView); cdecl;
  WGPUProcSurfaceUnconfigure = procedure(surface: WGPUSurface); cdecl;
  WGPUProcSurfaceAddRef = procedure(surface: WGPUSurface); cdecl;
  WGPUProcSurfaceRelease = procedure(surface: WGPUSurface); cdecl;
  WGPUProcSwapChainGetCurrentTexture = function(swapChain: WGPUSwapChain): WGPUTexture; cdecl;
  WGPUProcSwapChainGetCurrentTextureView = function(swapChain: WGPUSwapChain): WGPUTextureView; cdecl;
  WGPUProcSwapChainPresent = procedure(swapChain: WGPUSwapChain); cdecl;
  WGPUProcSwapChainAddRef = procedure(swapChain: WGPUSwapChain); cdecl;
  WGPUProcSwapChainRelease = procedure(swapChain: WGPUSwapChain); cdecl;
  WGPUProcTextureCreateErrorView = function(texture: WGPUTexture; const descriptor: PWGPUTextureViewDescriptor): WGPUTextureView; cdecl;
  WGPUProcTextureCreateView = function(texture: WGPUTexture; const descriptor: PWGPUTextureViewDescriptor): WGPUTextureView; cdecl;
  WGPUProcTextureDestroy = procedure(texture: WGPUTexture); cdecl;
  WGPUProcTextureGetDepthOrArrayLayers = function(texture: WGPUTexture): UInt32; cdecl;
  WGPUProcTextureGetDimension = function(texture: WGPUTexture): WGPUTextureDimension; cdecl;
  WGPUProcTextureGetFormat = function(texture: WGPUTexture): WGPUTextureFormat; cdecl;
  WGPUProcTextureGetHeight = function(texture: WGPUTexture): UInt32; cdecl;
  WGPUProcTextureGetMipLevelCount = function(texture: WGPUTexture): UInt32; cdecl;
  WGPUProcTextureGetSampleCount = function(texture: WGPUTexture): UInt32; cdecl;
  WGPUProcTextureGetUsage = function(texture: WGPUTexture): WGPUTextureUsage; cdecl;
  WGPUProcTextureGetWidth = function(texture: WGPUTexture): UInt32; cdecl;
  WGPUProcTextureSetLabel = procedure(texture: WGPUTexture; const &label: PUTF8Char); cdecl;
  WGPUProcTextureSetLabel2 = procedure(texture: WGPUTexture; &label: WGPUStringView); cdecl;
  WGPUProcTextureAddRef = procedure(texture: WGPUTexture); cdecl;
  WGPUProcTextureRelease = procedure(texture: WGPUTexture); cdecl;
  WGPUProcTextureViewSetLabel = procedure(textureView: WGPUTextureView; const &label: PUTF8Char); cdecl;
  WGPUProcTextureViewSetLabel2 = procedure(textureView: WGPUTextureView; &label: WGPUStringView); cdecl;
  WGPUProcTextureViewAddRef = procedure(textureView: WGPUTextureView); cdecl;
  WGPUProcTextureViewRelease = procedure(textureView: WGPUTextureView); cdecl;
const
  WGPUBufferUsage_None: WGPUBufferUsage = $0000000000000000;
  WGPUBufferUsage_MapRead: WGPUBufferUsage = $0000000000000001;
  WGPUBufferUsage_MapWrite: WGPUBufferUsage = $0000000000000002;
  WGPUBufferUsage_CopySrc: WGPUBufferUsage = $0000000000000004;
  WGPUBufferUsage_CopyDst: WGPUBufferUsage = $0000000000000008;
  WGPUBufferUsage_Index: WGPUBufferUsage = $0000000000000010;
  WGPUBufferUsage_Vertex: WGPUBufferUsage = $0000000000000020;
  WGPUBufferUsage_Uniform: WGPUBufferUsage = $0000000000000040;
  WGPUBufferUsage_Storage: WGPUBufferUsage = $0000000000000080;
  WGPUBufferUsage_Indirect: WGPUBufferUsage = $0000000000000100;
  WGPUBufferUsage_QueryResolve: WGPUBufferUsage = $0000000000000200;
  WGPUColorWriteMask_None: WGPUColorWriteMask = $0000000000000000;
  WGPUColorWriteMask_Red: WGPUColorWriteMask = $0000000000000001;
  WGPUColorWriteMask_Green: WGPUColorWriteMask = $0000000000000002;
  WGPUColorWriteMask_Blue: WGPUColorWriteMask = $0000000000000004;
  WGPUColorWriteMask_Alpha: WGPUColorWriteMask = $0000000000000008;
  WGPUColorWriteMask_All: WGPUColorWriteMask = $000000000000000F;
  WGPUHeapProperty_DeviceLocal: WGPUHeapProperty = $0000000000000001;
  WGPUHeapProperty_HostVisible: WGPUHeapProperty = $0000000000000002;
  WGPUHeapProperty_HostCoherent: WGPUHeapProperty = $0000000000000004;
  WGPUHeapProperty_HostUncached: WGPUHeapProperty = $0000000000000008;
  WGPUHeapProperty_HostCached: WGPUHeapProperty = $0000000000000010;
  WGPUMapMode_None: WGPUMapMode = $0000000000000000;
  WGPUMapMode_Read: WGPUMapMode = $0000000000000001;
  WGPUMapMode_Write: WGPUMapMode = $0000000000000002;
  WGPUShaderStage_None: WGPUShaderStage = $0000000000000000;
  WGPUShaderStage_Vertex: WGPUShaderStage = $0000000000000001;
  WGPUShaderStage_Fragment: WGPUShaderStage = $0000000000000002;
  WGPUShaderStage_Compute: WGPUShaderStage = $0000000000000004;
  WGPUTextureUsage_None: WGPUTextureUsage = $0000000000000000;
  WGPUTextureUsage_CopySrc: WGPUTextureUsage = $0000000000000001;
  WGPUTextureUsage_CopyDst: WGPUTextureUsage = $0000000000000002;
  WGPUTextureUsage_TextureBinding: WGPUTextureUsage = $0000000000000004;
  WGPUTextureUsage_StorageBinding: WGPUTextureUsage = $0000000000000008;
  WGPUTextureUsage_RenderAttachment: WGPUTextureUsage = $0000000000000010;
  WGPUTextureUsage_TransientAttachment: WGPUTextureUsage = $0000000000000020;
  WGPUTextureUsage_StorageAttachment: WGPUTextureUsage = $0000000000000040;

var
   wgpuAdapterInfoFreeMembers : procedure(value: WGPUAdapterInfo); cdecl;
   wgpuAdapterPropertiesFreeMembers : procedure(value: WGPUAdapterProperties); cdecl;
   wgpuAdapterPropertiesMemoryHeapsFreeMembers : procedure(value: WGPUAdapterPropertiesMemoryHeaps); cdecl;
   wgpuCreateInstance : function(const descriptor: PWGPUInstanceDescriptor): WGPUInstance; cdecl;
   wgpuDrmFormatCapabilitiesFreeMembers : procedure(value: WGPUDrmFormatCapabilities); cdecl;
   wgpuGetInstanceFeatures : function(features: PWGPUInstanceFeatures): WGPUStatus; cdecl;
   wgpuGetProcAddress : function(device: WGPUDevice; const procName: PUTF8Char): WGPUProc; cdecl;
   wgpuGetProcAddress2 : function(device: WGPUDevice; procName: WGPUStringView): WGPUProc; cdecl;
   wgpuSharedBufferMemoryEndAccessStateFreeMembers : procedure(value: WGPUSharedBufferMemoryEndAccessState); cdecl;
   wgpuSharedTextureMemoryEndAccessStateFreeMembers : procedure(value: WGPUSharedTextureMemoryEndAccessState); cdecl;
   wgpuSurfaceCapabilitiesFreeMembers : procedure(value: WGPUSurfaceCapabilities); cdecl;
   wgpuAdapterCreateDevice : function(adapter: WGPUAdapter; const descriptor: PWGPUDeviceDescriptor): WGPUDevice; cdecl;
   wgpuAdapterEnumerateFeatures : function(adapter: WGPUAdapter; features: PWGPUFeatureName): NativeUInt; cdecl;
   wgpuAdapterGetFormatCapabilities : function(adapter: WGPUAdapter; format: WGPUTextureFormat; capabilities: PWGPUFormatCapabilities): WGPUStatus; cdecl;
   wgpuAdapterGetInfo : function(adapter: WGPUAdapter; info: PWGPUAdapterInfo): WGPUStatus; cdecl;
   wgpuAdapterGetInstance : function(adapter: WGPUAdapter): WGPUInstance; cdecl;
   wgpuAdapterGetLimits : function(adapter: WGPUAdapter; limits: PWGPUSupportedLimits): WGPUStatus; cdecl;
   wgpuAdapterGetProperties : function(adapter: WGPUAdapter; properties: PWGPUAdapterProperties): WGPUStatus; cdecl;
   wgpuAdapterHasFeature : function(adapter: WGPUAdapter; feature: WGPUFeatureName): WGPUBool; cdecl;
   wgpuAdapterRequestDevice : procedure(adapter: WGPUAdapter; const descriptor: PWGPUDeviceDescriptor; callback: WGPURequestDeviceCallback; userdata: Pointer); cdecl;
   wgpuAdapterRequestDevice2 : function(adapter: WGPUAdapter; const options: PWGPUDeviceDescriptor; callbackInfo: WGPURequestDeviceCallbackInfo2): WGPUFuture; cdecl;
   wgpuAdapterRequestDeviceF : function(adapter: WGPUAdapter; const options: PWGPUDeviceDescriptor; callbackInfo: WGPURequestDeviceCallbackInfo): WGPUFuture; cdecl;
   wgpuAdapterAddRef : procedure(adapter: WGPUAdapter); cdecl;
   wgpuAdapterRelease : procedure(adapter: WGPUAdapter); cdecl;
   wgpuBindGroupSetLabel : procedure(bindGroup: WGPUBindGroup; const &label: PUTF8Char); cdecl;
   wgpuBindGroupSetLabel2 : procedure(bindGroup: WGPUBindGroup; &label: WGPUStringView); cdecl;
   wgpuBindGroupAddRef : procedure(bindGroup: WGPUBindGroup); cdecl;
   wgpuBindGroupRelease : procedure(bindGroup: WGPUBindGroup); cdecl;
   wgpuBindGroupLayoutSetLabel : procedure(bindGroupLayout: WGPUBindGroupLayout; const &label: PUTF8Char); cdecl;
   wgpuBindGroupLayoutSetLabel2 : procedure(bindGroupLayout: WGPUBindGroupLayout; &label: WGPUStringView); cdecl;
   wgpuBindGroupLayoutAddRef : procedure(bindGroupLayout: WGPUBindGroupLayout); cdecl;
   wgpuBindGroupLayoutRelease : procedure(bindGroupLayout: WGPUBindGroupLayout); cdecl;
   wgpuBufferDestroy : procedure(buffer: WGPUBuffer); cdecl;
   wgpuBufferGetConstMappedRange : function(buffer: WGPUBuffer; offset: NativeUInt; size: NativeUInt): Pointer; cdecl;
   wgpuBufferGetMapState : function(buffer: WGPUBuffer): WGPUBufferMapState; cdecl;
   wgpuBufferGetMappedRange : function(buffer: WGPUBuffer; offset: NativeUInt; size: NativeUInt): Pointer; cdecl;
   wgpuBufferGetSize : function(buffer: WGPUBuffer): UInt64; cdecl;
   wgpuBufferGetUsage : function(buffer: WGPUBuffer): WGPUBufferUsage; cdecl;
   wgpuBufferMapAsync : procedure(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callback: WGPUBufferMapCallback; userdata: Pointer); cdecl;
   wgpuBufferMapAsync2 : function(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callbackInfo: WGPUBufferMapCallbackInfo2): WGPUFuture; cdecl;
   wgpuBufferMapAsyncF : function(buffer: WGPUBuffer; mode: WGPUMapMode; offset: NativeUInt; size: NativeUInt; callbackInfo: WGPUBufferMapCallbackInfo): WGPUFuture; cdecl;
   wgpuBufferSetLabel : procedure(buffer: WGPUBuffer; const &label: PUTF8Char); cdecl;
   wgpuBufferSetLabel2 : procedure(buffer: WGPUBuffer; &label: WGPUStringView); cdecl;
   wgpuBufferUnmap : procedure(buffer: WGPUBuffer); cdecl;
   wgpuBufferAddRef : procedure(buffer: WGPUBuffer); cdecl;
   wgpuBufferRelease : procedure(buffer: WGPUBuffer); cdecl;
   wgpuCommandBufferSetLabel : procedure(commandBuffer: WGPUCommandBuffer; const &label: PUTF8Char); cdecl;
   wgpuCommandBufferSetLabel2 : procedure(commandBuffer: WGPUCommandBuffer; &label: WGPUStringView); cdecl;
   wgpuCommandBufferAddRef : procedure(commandBuffer: WGPUCommandBuffer); cdecl;
   wgpuCommandBufferRelease : procedure(commandBuffer: WGPUCommandBuffer); cdecl;
   wgpuCommandEncoderBeginComputePass : function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPUComputePassDescriptor): WGPUComputePassEncoder; cdecl;
   wgpuCommandEncoderBeginRenderPass : function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPURenderPassDescriptor): WGPURenderPassEncoder; cdecl;
   wgpuCommandEncoderClearBuffer : procedure(commandEncoder: WGPUCommandEncoder; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
   wgpuCommandEncoderCopyBufferToBuffer : procedure(commandEncoder: WGPUCommandEncoder; source: WGPUBuffer; sourceOffset: UInt64; destination: WGPUBuffer; destinationOffset: UInt64; size: UInt64); cdecl;
   wgpuCommandEncoderCopyBufferToTexture : procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyBuffer; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D); cdecl;
   wgpuCommandEncoderCopyTextureToBuffer : procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyBuffer; const copySize: PWGPUExtent3D); cdecl;
   wgpuCommandEncoderCopyTextureToTexture : procedure(commandEncoder: WGPUCommandEncoder; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D); cdecl;
   wgpuCommandEncoderFinish : function(commandEncoder: WGPUCommandEncoder; const descriptor: PWGPUCommandBufferDescriptor): WGPUCommandBuffer; cdecl;
   wgpuCommandEncoderInjectValidationError : procedure(commandEncoder: WGPUCommandEncoder; const &message: PUTF8Char); cdecl;
   wgpuCommandEncoderInjectValidationError2 : procedure(commandEncoder: WGPUCommandEncoder; &message: WGPUStringView); cdecl;
   wgpuCommandEncoderInsertDebugMarker : procedure(commandEncoder: WGPUCommandEncoder; const markerLabel: PUTF8Char); cdecl;
   wgpuCommandEncoderInsertDebugMarker2 : procedure(commandEncoder: WGPUCommandEncoder; markerLabel: WGPUStringView); cdecl;
   wgpuCommandEncoderPopDebugGroup : procedure(commandEncoder: WGPUCommandEncoder); cdecl;
   wgpuCommandEncoderPushDebugGroup : procedure(commandEncoder: WGPUCommandEncoder; const groupLabel: PUTF8Char); cdecl;
   wgpuCommandEncoderPushDebugGroup2 : procedure(commandEncoder: WGPUCommandEncoder; groupLabel: WGPUStringView); cdecl;
   wgpuCommandEncoderResolveQuerySet : procedure(commandEncoder: WGPUCommandEncoder; querySet: WGPUQuerySet; firstQuery: UInt32; queryCount: UInt32; destination: WGPUBuffer; destinationOffset: UInt64); cdecl;
   wgpuCommandEncoderSetLabel : procedure(commandEncoder: WGPUCommandEncoder; const &label: PUTF8Char); cdecl;
   wgpuCommandEncoderSetLabel2 : procedure(commandEncoder: WGPUCommandEncoder; &label: WGPUStringView); cdecl;
   wgpuCommandEncoderWriteBuffer : procedure(commandEncoder: WGPUCommandEncoder; buffer: WGPUBuffer; bufferOffset: UInt64; const data: PUInt8; size: UInt64); cdecl;
   wgpuCommandEncoderWriteTimestamp : procedure(commandEncoder: WGPUCommandEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
   wgpuCommandEncoderAddRef : procedure(commandEncoder: WGPUCommandEncoder); cdecl;
   wgpuCommandEncoderRelease : procedure(commandEncoder: WGPUCommandEncoder); cdecl;
   wgpuComputePassEncoderDispatchWorkgroups : procedure(computePassEncoder: WGPUComputePassEncoder; workgroupCountX: UInt32; workgroupCountY: UInt32; workgroupCountZ: UInt32); cdecl;
   wgpuComputePassEncoderDispatchWorkgroupsIndirect : procedure(computePassEncoder: WGPUComputePassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
   wgpuComputePassEncoderEnd : procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;
   wgpuComputePassEncoderInsertDebugMarker : procedure(computePassEncoder: WGPUComputePassEncoder; const markerLabel: PUTF8Char); cdecl;
   wgpuComputePassEncoderInsertDebugMarker2 : procedure(computePassEncoder: WGPUComputePassEncoder; markerLabel: WGPUStringView); cdecl;
   wgpuComputePassEncoderPopDebugGroup : procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;
   wgpuComputePassEncoderPushDebugGroup : procedure(computePassEncoder: WGPUComputePassEncoder; const groupLabel: PUTF8Char); cdecl;
   wgpuComputePassEncoderPushDebugGroup2 : procedure(computePassEncoder: WGPUComputePassEncoder; groupLabel: WGPUStringView); cdecl;
   wgpuComputePassEncoderSetBindGroup : procedure(computePassEncoder: WGPUComputePassEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
   wgpuComputePassEncoderSetLabel : procedure(computePassEncoder: WGPUComputePassEncoder; const &label: PUTF8Char); cdecl;
   wgpuComputePassEncoderSetLabel2 : procedure(computePassEncoder: WGPUComputePassEncoder; &label: WGPUStringView); cdecl;
   wgpuComputePassEncoderSetPipeline : procedure(computePassEncoder: WGPUComputePassEncoder; pipeline: WGPUComputePipeline); cdecl;
   wgpuComputePassEncoderWriteTimestamp : procedure(computePassEncoder: WGPUComputePassEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
   wgpuComputePassEncoderAddRef : procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;
   wgpuComputePassEncoderRelease : procedure(computePassEncoder: WGPUComputePassEncoder); cdecl;
   wgpuComputePipelineGetBindGroupLayout : function(computePipeline: WGPUComputePipeline; groupIndex: UInt32): WGPUBindGroupLayout; cdecl;
   wgpuComputePipelineSetLabel : procedure(computePipeline: WGPUComputePipeline; const &label: PUTF8Char); cdecl;
   wgpuComputePipelineSetLabel2 : procedure(computePipeline: WGPUComputePipeline; &label: WGPUStringView); cdecl;
   wgpuComputePipelineAddRef : procedure(computePipeline: WGPUComputePipeline); cdecl;
   wgpuComputePipelineRelease : procedure(computePipeline: WGPUComputePipeline); cdecl;
   wgpuDeviceCreateBindGroup : function(device: WGPUDevice; const descriptor: PWGPUBindGroupDescriptor): WGPUBindGroup; cdecl;
   wgpuDeviceCreateBindGroupLayout : function(device: WGPUDevice; const descriptor: PWGPUBindGroupLayoutDescriptor): WGPUBindGroupLayout; cdecl;
   wgpuDeviceCreateBuffer : function(device: WGPUDevice; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
   wgpuDeviceCreateCommandEncoder : function(device: WGPUDevice; const descriptor: PWGPUCommandEncoderDescriptor): WGPUCommandEncoder; cdecl;
   wgpuDeviceCreateComputePipeline : function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor): WGPUComputePipeline; cdecl;
   wgpuDeviceCreateComputePipelineAsync : procedure(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callback: WGPUCreateComputePipelineAsyncCallback; userdata: Pointer); cdecl;
   wgpuDeviceCreateComputePipelineAsync2 : function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo2): WGPUFuture; cdecl;
   wgpuDeviceCreateComputePipelineAsyncF : function(device: WGPUDevice; const descriptor: PWGPUComputePipelineDescriptor; callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo): WGPUFuture; cdecl;
   wgpuDeviceCreateErrorBuffer : function(device: WGPUDevice; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
   wgpuDeviceCreateErrorExternalTexture : function(device: WGPUDevice): WGPUExternalTexture; cdecl;
   wgpuDeviceCreateErrorShaderModule : function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor; const errorMessage: PUTF8Char): WGPUShaderModule; cdecl;
   wgpuDeviceCreateErrorShaderModule2 : function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor; errorMessage: WGPUStringView): WGPUShaderModule; cdecl;
   wgpuDeviceCreateErrorTexture : function(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
   wgpuDeviceCreateExternalTexture : function(device: WGPUDevice; const externalTextureDescriptor: PWGPUExternalTextureDescriptor): WGPUExternalTexture; cdecl;
   wgpuDeviceCreatePipelineLayout : function(device: WGPUDevice; const descriptor: PWGPUPipelineLayoutDescriptor): WGPUPipelineLayout; cdecl;
   wgpuDeviceCreateQuerySet : function(device: WGPUDevice; const descriptor: PWGPUQuerySetDescriptor): WGPUQuerySet; cdecl;
   wgpuDeviceCreateRenderBundleEncoder : function(device: WGPUDevice; const descriptor: PWGPURenderBundleEncoderDescriptor): WGPURenderBundleEncoder; cdecl;
   wgpuDeviceCreateRenderPipeline : function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor): WGPURenderPipeline; cdecl;
   wgpuDeviceCreateRenderPipelineAsync : procedure(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callback: WGPUCreateRenderPipelineAsyncCallback; userdata: Pointer); cdecl;
   wgpuDeviceCreateRenderPipelineAsync2 : function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo2): WGPUFuture; cdecl;
   wgpuDeviceCreateRenderPipelineAsyncF : function(device: WGPUDevice; const descriptor: PWGPURenderPipelineDescriptor; callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo): WGPUFuture; cdecl;
   wgpuDeviceCreateSampler : function(device: WGPUDevice; const descriptor: PWGPUSamplerDescriptor): WGPUSampler; cdecl;
   wgpuDeviceCreateShaderModule : function(device: WGPUDevice; const descriptor: PWGPUShaderModuleDescriptor): WGPUShaderModule; cdecl;
   wgpuDeviceCreateSwapChain : function(device: WGPUDevice; surface: WGPUSurface; const descriptor: PWGPUSwapChainDescriptor): WGPUSwapChain; cdecl;
   wgpuDeviceCreateTexture : function(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
   wgpuDeviceDestroy : procedure(device: WGPUDevice); cdecl;
   wgpuDeviceEnumerateFeatures : function(device: WGPUDevice; features: PWGPUFeatureName): NativeUInt; cdecl;
   wgpuDeviceForceLoss : procedure(device: WGPUDevice; &type: WGPUDeviceLostReason; const &message: PUTF8Char); cdecl;
   wgpuDeviceForceLoss2 : procedure(device: WGPUDevice; &type: WGPUDeviceLostReason; &message: WGPUStringView); cdecl;
   wgpuDeviceGetAHardwareBufferProperties : function(device: WGPUDevice; handle: Pointer; properties: PWGPUAHardwareBufferProperties): WGPUStatus; cdecl;
   wgpuDeviceGetAdapter : function(device: WGPUDevice): WGPUAdapter; cdecl;
   wgpuDeviceGetLimits : function(device: WGPUDevice; limits: PWGPUSupportedLimits): WGPUStatus; cdecl;
   wgpuDeviceGetQueue : function(device: WGPUDevice): WGPUQueue; cdecl;
   wgpuDeviceGetSupportedSurfaceUsage : function(device: WGPUDevice; surface: WGPUSurface): WGPUTextureUsage; cdecl;
   wgpuDeviceHasFeature : function(device: WGPUDevice; feature: WGPUFeatureName): WGPUBool; cdecl;
   wgpuDeviceImportSharedBufferMemory : function(device: WGPUDevice; const descriptor: PWGPUSharedBufferMemoryDescriptor): WGPUSharedBufferMemory; cdecl;
   wgpuDeviceImportSharedFence : function(device: WGPUDevice; const descriptor: PWGPUSharedFenceDescriptor): WGPUSharedFence; cdecl;
   wgpuDeviceImportSharedTextureMemory : function(device: WGPUDevice; const descriptor: PWGPUSharedTextureMemoryDescriptor): WGPUSharedTextureMemory; cdecl;
   wgpuDeviceInjectError : procedure(device: WGPUDevice; &type: WGPUErrorType; const &message: PUTF8Char); cdecl;
   wgpuDeviceInjectError2 : procedure(device: WGPUDevice; &type: WGPUErrorType; &message: WGPUStringView); cdecl;
   wgpuDevicePopErrorScope : procedure(device: WGPUDevice; oldCallback: WGPUErrorCallback; userdata: Pointer); cdecl;
   wgpuDevicePopErrorScope2 : function(device: WGPUDevice; callbackInfo: WGPUPopErrorScopeCallbackInfo2): WGPUFuture; cdecl;
   wgpuDevicePopErrorScopeF : function(device: WGPUDevice; callbackInfo: WGPUPopErrorScopeCallbackInfo): WGPUFuture; cdecl;
   wgpuDevicePushErrorScope : procedure(device: WGPUDevice; filter: WGPUErrorFilter); cdecl;
   wgpuDeviceSetDeviceLostCallback : procedure(device: WGPUDevice; callback: WGPUDeviceLostCallback; userdata: Pointer); cdecl;
   wgpuDeviceSetLabel : procedure(device: WGPUDevice; const &label: PUTF8Char); cdecl;
   wgpuDeviceSetLabel2 : procedure(device: WGPUDevice; &label: WGPUStringView); cdecl;
   wgpuDeviceSetLoggingCallback : procedure(device: WGPUDevice; callback: WGPULoggingCallback; userdata: Pointer); cdecl;
   wgpuDeviceSetUncapturedErrorCallback : procedure(device: WGPUDevice; callback: WGPUErrorCallback; userdata: Pointer); cdecl;
   wgpuDeviceTick : procedure(device: WGPUDevice); cdecl;
   wgpuDeviceValidateTextureDescriptor : procedure(device: WGPUDevice; const descriptor: PWGPUTextureDescriptor); cdecl;
   wgpuDeviceAddRef : procedure(device: WGPUDevice); cdecl;
   wgpuDeviceRelease : procedure(device: WGPUDevice); cdecl;
   wgpuExternalTextureDestroy : procedure(externalTexture: WGPUExternalTexture); cdecl;
   wgpuExternalTextureExpire : procedure(externalTexture: WGPUExternalTexture); cdecl;
   wgpuExternalTextureRefresh : procedure(externalTexture: WGPUExternalTexture); cdecl;
   wgpuExternalTextureSetLabel : procedure(externalTexture: WGPUExternalTexture; const &label: PUTF8Char); cdecl;
   wgpuExternalTextureSetLabel2 : procedure(externalTexture: WGPUExternalTexture; &label: WGPUStringView); cdecl;
   wgpuExternalTextureAddRef : procedure(externalTexture: WGPUExternalTexture); cdecl;
   wgpuExternalTextureRelease : procedure(externalTexture: WGPUExternalTexture); cdecl;
   wgpuInstanceCreateSurface : function(instance: WGPUInstance; const descriptor: PWGPUSurfaceDescriptor): WGPUSurface; cdecl;
   wgpuInstanceEnumerateWGSLLanguageFeatures : function(instance: WGPUInstance; features: PWGPUWGSLFeatureName): NativeUInt; cdecl;
   wgpuInstanceHasWGSLLanguageFeature : function(instance: WGPUInstance; feature: WGPUWGSLFeatureName): WGPUBool; cdecl;
   wgpuInstanceProcessEvents : procedure(instance: WGPUInstance); cdecl;
   wgpuInstanceRequestAdapter : procedure(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callback: WGPURequestAdapterCallback; userdata: Pointer); cdecl;
   wgpuInstanceRequestAdapter2 : function(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callbackInfo: WGPURequestAdapterCallbackInfo2): WGPUFuture; cdecl;
   wgpuInstanceRequestAdapterF : function(instance: WGPUInstance; const options: PWGPURequestAdapterOptions; callbackInfo: WGPURequestAdapterCallbackInfo): WGPUFuture; cdecl;
   wgpuInstanceWaitAny : function(instance: WGPUInstance; futureCount: NativeUInt; futures: PWGPUFutureWaitInfo; timeoutNS: UInt64): WGPUWaitStatus; cdecl;
   wgpuInstanceAddRef : procedure(instance: WGPUInstance); cdecl;
   wgpuInstanceRelease : procedure(instance: WGPUInstance); cdecl;
   wgpuPipelineLayoutSetLabel : procedure(pipelineLayout: WGPUPipelineLayout; const &label: PUTF8Char); cdecl;
   wgpuPipelineLayoutSetLabel2 : procedure(pipelineLayout: WGPUPipelineLayout; &label: WGPUStringView); cdecl;
   wgpuPipelineLayoutAddRef : procedure(pipelineLayout: WGPUPipelineLayout); cdecl;
   wgpuPipelineLayoutRelease : procedure(pipelineLayout: WGPUPipelineLayout); cdecl;
   wgpuQuerySetDestroy : procedure(querySet: WGPUQuerySet); cdecl;
   wgpuQuerySetGetCount : function(querySet: WGPUQuerySet): UInt32; cdecl;
   wgpuQuerySetGetType : function(querySet: WGPUQuerySet): WGPUQueryType; cdecl;
   wgpuQuerySetSetLabel : procedure(querySet: WGPUQuerySet; const &label: PUTF8Char); cdecl;
   wgpuQuerySetSetLabel2 : procedure(querySet: WGPUQuerySet; &label: WGPUStringView); cdecl;
   wgpuQuerySetAddRef : procedure(querySet: WGPUQuerySet); cdecl;
   wgpuQuerySetRelease : procedure(querySet: WGPUQuerySet); cdecl;
   wgpuQueueCopyExternalTextureForBrowser : procedure(queue: WGPUQueue; const source: PWGPUImageCopyExternalTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D; const options: PWGPUCopyTextureForBrowserOptions); cdecl;
   wgpuQueueCopyTextureForBrowser : procedure(queue: WGPUQueue; const source: PWGPUImageCopyTexture; const destination: PWGPUImageCopyTexture; const copySize: PWGPUExtent3D; const options: PWGPUCopyTextureForBrowserOptions); cdecl;
   wgpuQueueOnSubmittedWorkDone : procedure(queue: WGPUQueue; callback: WGPUQueueWorkDoneCallback; userdata: Pointer); cdecl;
   wgpuQueueOnSubmittedWorkDone2 : function(queue: WGPUQueue; callbackInfo: WGPUQueueWorkDoneCallbackInfo2): WGPUFuture; cdecl;
   wgpuQueueOnSubmittedWorkDoneF : function(queue: WGPUQueue; callbackInfo: WGPUQueueWorkDoneCallbackInfo): WGPUFuture; cdecl;
   wgpuQueueSetLabel : procedure(queue: WGPUQueue; const &label: PUTF8Char); cdecl;
   wgpuQueueSetLabel2 : procedure(queue: WGPUQueue; &label: WGPUStringView); cdecl;
   wgpuQueueSubmit : procedure(queue: WGPUQueue; commandCount: NativeUInt; const commands: PWGPUCommandBuffer); cdecl;
   wgpuQueueWriteBuffer : procedure(queue: WGPUQueue; buffer: WGPUBuffer; bufferOffset: UInt64; const data: Pointer; size: NativeUInt); cdecl;
   wgpuQueueWriteTexture : procedure(queue: WGPUQueue; const destination: PWGPUImageCopyTexture; const data: Pointer; dataSize: NativeUInt; const dataLayout: PWGPUTextureDataLayout; const writeSize: PWGPUExtent3D); cdecl;
   wgpuQueueAddRef : procedure(queue: WGPUQueue); cdecl;
   wgpuQueueRelease : procedure(queue: WGPUQueue); cdecl;
   wgpuRenderBundleSetLabel : procedure(renderBundle: WGPURenderBundle; const &label: PUTF8Char); cdecl;
   wgpuRenderBundleSetLabel2 : procedure(renderBundle: WGPURenderBundle; &label: WGPUStringView); cdecl;
   wgpuRenderBundleAddRef : procedure(renderBundle: WGPURenderBundle); cdecl;
   wgpuRenderBundleRelease : procedure(renderBundle: WGPURenderBundle); cdecl;
   wgpuRenderBundleEncoderDraw : procedure(renderBundleEncoder: WGPURenderBundleEncoder; vertexCount: UInt32; instanceCount: UInt32; firstVertex: UInt32; firstInstance: UInt32); cdecl;
   wgpuRenderBundleEncoderDrawIndexed : procedure(renderBundleEncoder: WGPURenderBundleEncoder; indexCount: UInt32; instanceCount: UInt32; firstIndex: UInt32; baseVertex: Int32; firstInstance: UInt32); cdecl;
   wgpuRenderBundleEncoderDrawIndexedIndirect : procedure(renderBundleEncoder: WGPURenderBundleEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
   wgpuRenderBundleEncoderDrawIndirect : procedure(renderBundleEncoder: WGPURenderBundleEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
   wgpuRenderBundleEncoderFinish : function(renderBundleEncoder: WGPURenderBundleEncoder; const descriptor: PWGPURenderBundleDescriptor): WGPURenderBundle; cdecl;
   wgpuRenderBundleEncoderInsertDebugMarker : procedure(renderBundleEncoder: WGPURenderBundleEncoder; const markerLabel: PUTF8Char); cdecl;
   wgpuRenderBundleEncoderInsertDebugMarker2 : procedure(renderBundleEncoder: WGPURenderBundleEncoder; markerLabel: WGPUStringView); cdecl;
   wgpuRenderBundleEncoderPopDebugGroup : procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
   wgpuRenderBundleEncoderPushDebugGroup : procedure(renderBundleEncoder: WGPURenderBundleEncoder; const groupLabel: PUTF8Char); cdecl;
   wgpuRenderBundleEncoderPushDebugGroup2 : procedure(renderBundleEncoder: WGPURenderBundleEncoder; groupLabel: WGPUStringView); cdecl;
   wgpuRenderBundleEncoderSetBindGroup : procedure(renderBundleEncoder: WGPURenderBundleEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
   wgpuRenderBundleEncoderSetIndexBuffer : procedure(renderBundleEncoder: WGPURenderBundleEncoder; buffer: WGPUBuffer; format: WGPUIndexFormat; offset: UInt64; size: UInt64); cdecl;
   wgpuRenderBundleEncoderSetLabel : procedure(renderBundleEncoder: WGPURenderBundleEncoder; const &label: PUTF8Char); cdecl;
   wgpuRenderBundleEncoderSetLabel2 : procedure(renderBundleEncoder: WGPURenderBundleEncoder; &label: WGPUStringView); cdecl;
   wgpuRenderBundleEncoderSetPipeline : procedure(renderBundleEncoder: WGPURenderBundleEncoder; pipeline: WGPURenderPipeline); cdecl;
   wgpuRenderBundleEncoderSetVertexBuffer : procedure(renderBundleEncoder: WGPURenderBundleEncoder; slot: UInt32; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
   wgpuRenderBundleEncoderAddRef : procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
   wgpuRenderBundleEncoderRelease : procedure(renderBundleEncoder: WGPURenderBundleEncoder); cdecl;
   wgpuRenderPassEncoderBeginOcclusionQuery : procedure(renderPassEncoder: WGPURenderPassEncoder; queryIndex: UInt32); cdecl;
   wgpuRenderPassEncoderDraw : procedure(renderPassEncoder: WGPURenderPassEncoder; vertexCount: UInt32; instanceCount: UInt32; firstVertex: UInt32; firstInstance: UInt32); cdecl;
   wgpuRenderPassEncoderDrawIndexed : procedure(renderPassEncoder: WGPURenderPassEncoder; indexCount: UInt32; instanceCount: UInt32; firstIndex: UInt32; baseVertex: Int32; firstInstance: UInt32); cdecl;
   wgpuRenderPassEncoderDrawIndexedIndirect : procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
   wgpuRenderPassEncoderDrawIndirect : procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64); cdecl;
   wgpuRenderPassEncoderEnd : procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
   wgpuRenderPassEncoderEndOcclusionQuery : procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
   wgpuRenderPassEncoderExecuteBundles : procedure(renderPassEncoder: WGPURenderPassEncoder; bundleCount: NativeUInt; const bundles: PWGPURenderBundle); cdecl;
   wgpuRenderPassEncoderInsertDebugMarker : procedure(renderPassEncoder: WGPURenderPassEncoder; const markerLabel: PUTF8Char); cdecl;
   wgpuRenderPassEncoderInsertDebugMarker2 : procedure(renderPassEncoder: WGPURenderPassEncoder; markerLabel: WGPUStringView); cdecl;
   wgpuRenderPassEncoderMultiDrawIndexedIndirect : procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64; maxDrawCount: UInt32; drawCountBuffer: WGPUBuffer; drawCountBufferOffset: UInt64); cdecl;
   wgpuRenderPassEncoderMultiDrawIndirect : procedure(renderPassEncoder: WGPURenderPassEncoder; indirectBuffer: WGPUBuffer; indirectOffset: UInt64; maxDrawCount: UInt32; drawCountBuffer: WGPUBuffer; drawCountBufferOffset: UInt64); cdecl;
   wgpuRenderPassEncoderPixelLocalStorageBarrier : procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
   wgpuRenderPassEncoderPopDebugGroup : procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
   wgpuRenderPassEncoderPushDebugGroup : procedure(renderPassEncoder: WGPURenderPassEncoder; const groupLabel: PUTF8Char); cdecl;
   wgpuRenderPassEncoderPushDebugGroup2 : procedure(renderPassEncoder: WGPURenderPassEncoder; groupLabel: WGPUStringView); cdecl;
   wgpuRenderPassEncoderSetBindGroup : procedure(renderPassEncoder: WGPURenderPassEncoder; groupIndex: UInt32; group: WGPUBindGroup; dynamicOffsetCount: NativeUInt; const dynamicOffsets: PUInt32); cdecl;
   wgpuRenderPassEncoderSetBlendConstant : procedure(renderPassEncoder: WGPURenderPassEncoder; const color: PWGPUColor); cdecl;
   wgpuRenderPassEncoderSetIndexBuffer : procedure(renderPassEncoder: WGPURenderPassEncoder; buffer: WGPUBuffer; format: WGPUIndexFormat; offset: UInt64; size: UInt64); cdecl;
   wgpuRenderPassEncoderSetLabel : procedure(renderPassEncoder: WGPURenderPassEncoder; const &label: PUTF8Char); cdecl;
   wgpuRenderPassEncoderSetLabel2 : procedure(renderPassEncoder: WGPURenderPassEncoder; &label: WGPUStringView); cdecl;
   wgpuRenderPassEncoderSetPipeline : procedure(renderPassEncoder: WGPURenderPassEncoder; pipeline: WGPURenderPipeline); cdecl;
   wgpuRenderPassEncoderSetScissorRect : procedure(renderPassEncoder: WGPURenderPassEncoder; x: UInt32; y: UInt32; width: UInt32; height: UInt32); cdecl;
   wgpuRenderPassEncoderSetStencilReference : procedure(renderPassEncoder: WGPURenderPassEncoder; reference: UInt32); cdecl;
   wgpuRenderPassEncoderSetVertexBuffer : procedure(renderPassEncoder: WGPURenderPassEncoder; slot: UInt32; buffer: WGPUBuffer; offset: UInt64; size: UInt64); cdecl;
   wgpuRenderPassEncoderSetViewport : procedure(renderPassEncoder: WGPURenderPassEncoder; x: Single; y: Single; width: Single; height: Single; minDepth: Single; maxDepth: Single); cdecl;
   wgpuRenderPassEncoderWriteTimestamp : procedure(renderPassEncoder: WGPURenderPassEncoder; querySet: WGPUQuerySet; queryIndex: UInt32); cdecl;
   wgpuRenderPassEncoderAddRef : procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
   wgpuRenderPassEncoderRelease : procedure(renderPassEncoder: WGPURenderPassEncoder); cdecl;
   wgpuRenderPipelineGetBindGroupLayout : function(renderPipeline: WGPURenderPipeline; groupIndex: UInt32): WGPUBindGroupLayout; cdecl;
   wgpuRenderPipelineSetLabel : procedure(renderPipeline: WGPURenderPipeline; const &label: PUTF8Char); cdecl;
   wgpuRenderPipelineSetLabel2 : procedure(renderPipeline: WGPURenderPipeline; &label: WGPUStringView); cdecl;
   wgpuRenderPipelineAddRef : procedure(renderPipeline: WGPURenderPipeline); cdecl;
   wgpuRenderPipelineRelease : procedure(renderPipeline: WGPURenderPipeline); cdecl;
   wgpuSamplerSetLabel : procedure(sampler: WGPUSampler; const &label: PUTF8Char); cdecl;
   wgpuSamplerSetLabel2 : procedure(sampler: WGPUSampler; &label: WGPUStringView); cdecl;
   wgpuSamplerAddRef : procedure(sampler: WGPUSampler); cdecl;
   wgpuSamplerRelease : procedure(sampler: WGPUSampler); cdecl;
   wgpuShaderModuleGetCompilationInfo : procedure(shaderModule: WGPUShaderModule; callback: WGPUCompilationInfoCallback; userdata: Pointer); cdecl;
   wgpuShaderModuleGetCompilationInfo2 : function(shaderModule: WGPUShaderModule; callbackInfo: WGPUCompilationInfoCallbackInfo2): WGPUFuture; cdecl;
   wgpuShaderModuleGetCompilationInfoF : function(shaderModule: WGPUShaderModule; callbackInfo: WGPUCompilationInfoCallbackInfo): WGPUFuture; cdecl;
   wgpuShaderModuleSetLabel : procedure(shaderModule: WGPUShaderModule; const &label: PUTF8Char); cdecl;
   wgpuShaderModuleSetLabel2 : procedure(shaderModule: WGPUShaderModule; &label: WGPUStringView); cdecl;
   wgpuShaderModuleAddRef : procedure(shaderModule: WGPUShaderModule); cdecl;
   wgpuShaderModuleRelease : procedure(shaderModule: WGPUShaderModule); cdecl;
   wgpuSharedBufferMemoryBeginAccess : function(sharedBufferMemory: WGPUSharedBufferMemory; buffer: WGPUBuffer; const descriptor: PWGPUSharedBufferMemoryBeginAccessDescriptor): WGPUStatus; cdecl;
   wgpuSharedBufferMemoryCreateBuffer : function(sharedBufferMemory: WGPUSharedBufferMemory; const descriptor: PWGPUBufferDescriptor): WGPUBuffer; cdecl;
   wgpuSharedBufferMemoryEndAccess : function(sharedBufferMemory: WGPUSharedBufferMemory; buffer: WGPUBuffer; descriptor: PWGPUSharedBufferMemoryEndAccessState): WGPUStatus; cdecl;
   wgpuSharedBufferMemoryGetProperties : function(sharedBufferMemory: WGPUSharedBufferMemory; properties: PWGPUSharedBufferMemoryProperties): WGPUStatus; cdecl;
   wgpuSharedBufferMemoryIsDeviceLost : function(sharedBufferMemory: WGPUSharedBufferMemory): WGPUBool; cdecl;
   wgpuSharedBufferMemorySetLabel : procedure(sharedBufferMemory: WGPUSharedBufferMemory; const &label: PUTF8Char); cdecl;
   wgpuSharedBufferMemorySetLabel2 : procedure(sharedBufferMemory: WGPUSharedBufferMemory; &label: WGPUStringView); cdecl;
   wgpuSharedBufferMemoryAddRef : procedure(sharedBufferMemory: WGPUSharedBufferMemory); cdecl;
   wgpuSharedBufferMemoryRelease : procedure(sharedBufferMemory: WGPUSharedBufferMemory); cdecl;
   wgpuSharedFenceExportInfo : procedure(sharedFence: WGPUSharedFence; info: PWGPUSharedFenceExportInfo); cdecl;
   wgpuSharedFenceAddRef : procedure(sharedFence: WGPUSharedFence); cdecl;
   wgpuSharedFenceRelease : procedure(sharedFence: WGPUSharedFence); cdecl;
   wgpuSharedTextureMemoryBeginAccess : function(sharedTextureMemory: WGPUSharedTextureMemory; texture: WGPUTexture; const descriptor: PWGPUSharedTextureMemoryBeginAccessDescriptor): WGPUStatus; cdecl;
   wgpuSharedTextureMemoryCreateTexture : function(sharedTextureMemory: WGPUSharedTextureMemory; const descriptor: PWGPUTextureDescriptor): WGPUTexture; cdecl;
   wgpuSharedTextureMemoryEndAccess : function(sharedTextureMemory: WGPUSharedTextureMemory; texture: WGPUTexture; descriptor: PWGPUSharedTextureMemoryEndAccessState): WGPUStatus; cdecl;
   wgpuSharedTextureMemoryGetProperties : function(sharedTextureMemory: WGPUSharedTextureMemory; properties: PWGPUSharedTextureMemoryProperties): WGPUStatus; cdecl;
   wgpuSharedTextureMemoryIsDeviceLost : function(sharedTextureMemory: WGPUSharedTextureMemory): WGPUBool; cdecl;
   wgpuSharedTextureMemorySetLabel : procedure(sharedTextureMemory: WGPUSharedTextureMemory; const &label: PUTF8Char); cdecl;
   wgpuSharedTextureMemorySetLabel2 : procedure(sharedTextureMemory: WGPUSharedTextureMemory; &label: WGPUStringView); cdecl;
   wgpuSharedTextureMemoryAddRef : procedure(sharedTextureMemory: WGPUSharedTextureMemory); cdecl;
   wgpuSharedTextureMemoryRelease : procedure(sharedTextureMemory: WGPUSharedTextureMemory); cdecl;
   wgpuSurfaceConfigure : procedure(surface: WGPUSurface; const config: PWGPUSurfaceConfiguration); cdecl;
   wgpuSurfaceGetCapabilities : function(surface: WGPUSurface; adapter: WGPUAdapter; capabilities: PWGPUSurfaceCapabilities): WGPUStatus; cdecl;
   wgpuSurfaceGetCurrentTexture : procedure(surface: WGPUSurface; surfaceTexture: PWGPUSurfaceTexture); cdecl;
   wgpuSurfaceGetPreferredFormat : function(surface: WGPUSurface; adapter: WGPUAdapter): WGPUTextureFormat; cdecl;
   wgpuSurfacePresent : procedure(surface: WGPUSurface); cdecl;
   wgpuSurfaceSetLabel : procedure(surface: WGPUSurface; const &label: PUTF8Char); cdecl;
   wgpuSurfaceSetLabel2 : procedure(surface: WGPUSurface; &label: WGPUStringView); cdecl;
   wgpuSurfaceUnconfigure : procedure(surface: WGPUSurface); cdecl;
   wgpuSurfaceAddRef : procedure(surface: WGPUSurface); cdecl;
   wgpuSurfaceRelease : procedure(surface: WGPUSurface); cdecl;
   wgpuSwapChainGetCurrentTexture : function(swapChain: WGPUSwapChain): WGPUTexture; cdecl;
   wgpuSwapChainGetCurrentTextureView : function(swapChain: WGPUSwapChain): WGPUTextureView; cdecl;
   wgpuSwapChainPresent : procedure(swapChain: WGPUSwapChain); cdecl;
   wgpuSwapChainAddRef : procedure(swapChain: WGPUSwapChain); cdecl;
   wgpuSwapChainRelease : procedure(swapChain: WGPUSwapChain); cdecl;
   wgpuTextureCreateErrorView : function(texture: WGPUTexture; const descriptor: PWGPUTextureViewDescriptor): WGPUTextureView; cdecl;
   wgpuTextureCreateView : function(texture: WGPUTexture; const descriptor: PWGPUTextureViewDescriptor): WGPUTextureView; cdecl;
   wgpuTextureDestroy : procedure(texture: WGPUTexture); cdecl;
   wgpuTextureGetDepthOrArrayLayers : function(texture: WGPUTexture): UInt32; cdecl;
   wgpuTextureGetDimension : function(texture: WGPUTexture): WGPUTextureDimension; cdecl;
   wgpuTextureGetFormat : function(texture: WGPUTexture): WGPUTextureFormat; cdecl;
   wgpuTextureGetHeight : function(texture: WGPUTexture): UInt32; cdecl;
   wgpuTextureGetMipLevelCount : function(texture: WGPUTexture): UInt32; cdecl;
   wgpuTextureGetSampleCount : function(texture: WGPUTexture): UInt32; cdecl;
   wgpuTextureGetUsage : function(texture: WGPUTexture): WGPUTextureUsage; cdecl;
   wgpuTextureGetWidth : function(texture: WGPUTexture): UInt32; cdecl;
   wgpuTextureSetLabel : procedure(texture: WGPUTexture; const &label: PUTF8Char); cdecl;
   wgpuTextureSetLabel2 : procedure(texture: WGPUTexture; &label: WGPUStringView); cdecl;
   wgpuTextureAddRef : procedure(texture: WGPUTexture); cdecl;
   wgpuTextureRelease : procedure(texture: WGPUTexture); cdecl;
   wgpuTextureViewSetLabel : procedure(textureView: WGPUTextureView; const &label: PUTF8Char); cdecl;
   wgpuTextureViewSetLabel2 : procedure(textureView: WGPUTextureView; &label: WGPUStringView); cdecl;
   wgpuTextureViewAddRef : procedure(textureView: WGPUTextureView); cdecl;
   wgpuTextureViewRelease : procedure(textureView: WGPUTextureView); cdecl;

procedure Load_webgpu_Library(const dllPathName : String);

implementation

var vLib : HMODULE;

procedure Load_webgpu_Library(const dllPathName : String);
begin
   if vLib <> 0 then Exit;
   vLib := LoadLibraryW(PChar(dllPathName));
   if vLib = 0 then RaiseLastOSError;

   wgpuAdapterInfoFreeMembers := GetProcAddress(vLib, 'wgpuAdapterInfoFreeMembers');
   wgpuAdapterPropertiesFreeMembers := GetProcAddress(vLib, 'wgpuAdapterPropertiesFreeMembers');
   wgpuAdapterPropertiesMemoryHeapsFreeMembers := GetProcAddress(vLib, 'wgpuAdapterPropertiesMemoryHeapsFreeMembers');
   wgpuCreateInstance := GetProcAddress(vLib, 'wgpuCreateInstance');
   wgpuDrmFormatCapabilitiesFreeMembers := GetProcAddress(vLib, 'wgpuDrmFormatCapabilitiesFreeMembers');
   wgpuGetInstanceFeatures := GetProcAddress(vLib, 'wgpuGetInstanceFeatures');
   wgpuGetProcAddress := GetProcAddress(vLib, 'wgpuGetProcAddress');
   wgpuGetProcAddress2 := GetProcAddress(vLib, 'wgpuGetProcAddress2');
   wgpuSharedBufferMemoryEndAccessStateFreeMembers := GetProcAddress(vLib, 'wgpuSharedBufferMemoryEndAccessStateFreeMembers');
   wgpuSharedTextureMemoryEndAccessStateFreeMembers := GetProcAddress(vLib, 'wgpuSharedTextureMemoryEndAccessStateFreeMembers');
   wgpuSurfaceCapabilitiesFreeMembers := GetProcAddress(vLib, 'wgpuSurfaceCapabilitiesFreeMembers');
   wgpuAdapterCreateDevice := GetProcAddress(vLib, 'wgpuAdapterCreateDevice');
   wgpuAdapterEnumerateFeatures := GetProcAddress(vLib, 'wgpuAdapterEnumerateFeatures');
   wgpuAdapterGetFormatCapabilities := GetProcAddress(vLib, 'wgpuAdapterGetFormatCapabilities');
   wgpuAdapterGetInfo := GetProcAddress(vLib, 'wgpuAdapterGetInfo');
   wgpuAdapterGetInstance := GetProcAddress(vLib, 'wgpuAdapterGetInstance');
   wgpuAdapterGetLimits := GetProcAddress(vLib, 'wgpuAdapterGetLimits');
   wgpuAdapterGetProperties := GetProcAddress(vLib, 'wgpuAdapterGetProperties');
   wgpuAdapterHasFeature := GetProcAddress(vLib, 'wgpuAdapterHasFeature');
   wgpuAdapterRequestDevice := GetProcAddress(vLib, 'wgpuAdapterRequestDevice');
   wgpuAdapterRequestDevice2 := GetProcAddress(vLib, 'wgpuAdapterRequestDevice2');
   wgpuAdapterRequestDeviceF := GetProcAddress(vLib, 'wgpuAdapterRequestDeviceF');
   wgpuAdapterAddRef := GetProcAddress(vLib, 'wgpuAdapterAddRef');
   wgpuAdapterRelease := GetProcAddress(vLib, 'wgpuAdapterRelease');
   wgpuBindGroupSetLabel := GetProcAddress(vLib, 'wgpuBindGroupSetLabel');
   wgpuBindGroupSetLabel2 := GetProcAddress(vLib, 'wgpuBindGroupSetLabel2');
   wgpuBindGroupAddRef := GetProcAddress(vLib, 'wgpuBindGroupAddRef');
   wgpuBindGroupRelease := GetProcAddress(vLib, 'wgpuBindGroupRelease');
   wgpuBindGroupLayoutSetLabel := GetProcAddress(vLib, 'wgpuBindGroupLayoutSetLabel');
   wgpuBindGroupLayoutSetLabel2 := GetProcAddress(vLib, 'wgpuBindGroupLayoutSetLabel2');
   wgpuBindGroupLayoutAddRef := GetProcAddress(vLib, 'wgpuBindGroupLayoutAddRef');
   wgpuBindGroupLayoutRelease := GetProcAddress(vLib, 'wgpuBindGroupLayoutRelease');
   wgpuBufferDestroy := GetProcAddress(vLib, 'wgpuBufferDestroy');
   wgpuBufferGetConstMappedRange := GetProcAddress(vLib, 'wgpuBufferGetConstMappedRange');
   wgpuBufferGetMapState := GetProcAddress(vLib, 'wgpuBufferGetMapState');
   wgpuBufferGetMappedRange := GetProcAddress(vLib, 'wgpuBufferGetMappedRange');
   wgpuBufferGetSize := GetProcAddress(vLib, 'wgpuBufferGetSize');
   wgpuBufferGetUsage := GetProcAddress(vLib, 'wgpuBufferGetUsage');
   wgpuBufferMapAsync := GetProcAddress(vLib, 'wgpuBufferMapAsync');
   wgpuBufferMapAsync2 := GetProcAddress(vLib, 'wgpuBufferMapAsync2');
   wgpuBufferMapAsyncF := GetProcAddress(vLib, 'wgpuBufferMapAsyncF');
   wgpuBufferSetLabel := GetProcAddress(vLib, 'wgpuBufferSetLabel');
   wgpuBufferSetLabel2 := GetProcAddress(vLib, 'wgpuBufferSetLabel2');
   wgpuBufferUnmap := GetProcAddress(vLib, 'wgpuBufferUnmap');
   wgpuBufferAddRef := GetProcAddress(vLib, 'wgpuBufferAddRef');
   wgpuBufferRelease := GetProcAddress(vLib, 'wgpuBufferRelease');
   wgpuCommandBufferSetLabel := GetProcAddress(vLib, 'wgpuCommandBufferSetLabel');
   wgpuCommandBufferSetLabel2 := GetProcAddress(vLib, 'wgpuCommandBufferSetLabel2');
   wgpuCommandBufferAddRef := GetProcAddress(vLib, 'wgpuCommandBufferAddRef');
   wgpuCommandBufferRelease := GetProcAddress(vLib, 'wgpuCommandBufferRelease');
   wgpuCommandEncoderBeginComputePass := GetProcAddress(vLib, 'wgpuCommandEncoderBeginComputePass');
   wgpuCommandEncoderBeginRenderPass := GetProcAddress(vLib, 'wgpuCommandEncoderBeginRenderPass');
   wgpuCommandEncoderClearBuffer := GetProcAddress(vLib, 'wgpuCommandEncoderClearBuffer');
   wgpuCommandEncoderCopyBufferToBuffer := GetProcAddress(vLib, 'wgpuCommandEncoderCopyBufferToBuffer');
   wgpuCommandEncoderCopyBufferToTexture := GetProcAddress(vLib, 'wgpuCommandEncoderCopyBufferToTexture');
   wgpuCommandEncoderCopyTextureToBuffer := GetProcAddress(vLib, 'wgpuCommandEncoderCopyTextureToBuffer');
   wgpuCommandEncoderCopyTextureToTexture := GetProcAddress(vLib, 'wgpuCommandEncoderCopyTextureToTexture');
   wgpuCommandEncoderFinish := GetProcAddress(vLib, 'wgpuCommandEncoderFinish');
   wgpuCommandEncoderInjectValidationError := GetProcAddress(vLib, 'wgpuCommandEncoderInjectValidationError');
   wgpuCommandEncoderInjectValidationError2 := GetProcAddress(vLib, 'wgpuCommandEncoderInjectValidationError2');
   wgpuCommandEncoderInsertDebugMarker := GetProcAddress(vLib, 'wgpuCommandEncoderInsertDebugMarker');
   wgpuCommandEncoderInsertDebugMarker2 := GetProcAddress(vLib, 'wgpuCommandEncoderInsertDebugMarker2');
   wgpuCommandEncoderPopDebugGroup := GetProcAddress(vLib, 'wgpuCommandEncoderPopDebugGroup');
   wgpuCommandEncoderPushDebugGroup := GetProcAddress(vLib, 'wgpuCommandEncoderPushDebugGroup');
   wgpuCommandEncoderPushDebugGroup2 := GetProcAddress(vLib, 'wgpuCommandEncoderPushDebugGroup2');
   wgpuCommandEncoderResolveQuerySet := GetProcAddress(vLib, 'wgpuCommandEncoderResolveQuerySet');
   wgpuCommandEncoderSetLabel := GetProcAddress(vLib, 'wgpuCommandEncoderSetLabel');
   wgpuCommandEncoderSetLabel2 := GetProcAddress(vLib, 'wgpuCommandEncoderSetLabel2');
   wgpuCommandEncoderWriteBuffer := GetProcAddress(vLib, 'wgpuCommandEncoderWriteBuffer');
   wgpuCommandEncoderWriteTimestamp := GetProcAddress(vLib, 'wgpuCommandEncoderWriteTimestamp');
   wgpuCommandEncoderAddRef := GetProcAddress(vLib, 'wgpuCommandEncoderAddRef');
   wgpuCommandEncoderRelease := GetProcAddress(vLib, 'wgpuCommandEncoderRelease');
   wgpuComputePassEncoderDispatchWorkgroups := GetProcAddress(vLib, 'wgpuComputePassEncoderDispatchWorkgroups');
   wgpuComputePassEncoderDispatchWorkgroupsIndirect := GetProcAddress(vLib, 'wgpuComputePassEncoderDispatchWorkgroupsIndirect');
   wgpuComputePassEncoderEnd := GetProcAddress(vLib, 'wgpuComputePassEncoderEnd');
   wgpuComputePassEncoderInsertDebugMarker := GetProcAddress(vLib, 'wgpuComputePassEncoderInsertDebugMarker');
   wgpuComputePassEncoderInsertDebugMarker2 := GetProcAddress(vLib, 'wgpuComputePassEncoderInsertDebugMarker2');
   wgpuComputePassEncoderPopDebugGroup := GetProcAddress(vLib, 'wgpuComputePassEncoderPopDebugGroup');
   wgpuComputePassEncoderPushDebugGroup := GetProcAddress(vLib, 'wgpuComputePassEncoderPushDebugGroup');
   wgpuComputePassEncoderPushDebugGroup2 := GetProcAddress(vLib, 'wgpuComputePassEncoderPushDebugGroup2');
   wgpuComputePassEncoderSetBindGroup := GetProcAddress(vLib, 'wgpuComputePassEncoderSetBindGroup');
   wgpuComputePassEncoderSetLabel := GetProcAddress(vLib, 'wgpuComputePassEncoderSetLabel');
   wgpuComputePassEncoderSetLabel2 := GetProcAddress(vLib, 'wgpuComputePassEncoderSetLabel2');
   wgpuComputePassEncoderSetPipeline := GetProcAddress(vLib, 'wgpuComputePassEncoderSetPipeline');
   wgpuComputePassEncoderWriteTimestamp := GetProcAddress(vLib, 'wgpuComputePassEncoderWriteTimestamp');
   wgpuComputePassEncoderAddRef := GetProcAddress(vLib, 'wgpuComputePassEncoderAddRef');
   wgpuComputePassEncoderRelease := GetProcAddress(vLib, 'wgpuComputePassEncoderRelease');
   wgpuComputePipelineGetBindGroupLayout := GetProcAddress(vLib, 'wgpuComputePipelineGetBindGroupLayout');
   wgpuComputePipelineSetLabel := GetProcAddress(vLib, 'wgpuComputePipelineSetLabel');
   wgpuComputePipelineSetLabel2 := GetProcAddress(vLib, 'wgpuComputePipelineSetLabel2');
   wgpuComputePipelineAddRef := GetProcAddress(vLib, 'wgpuComputePipelineAddRef');
   wgpuComputePipelineRelease := GetProcAddress(vLib, 'wgpuComputePipelineRelease');
   wgpuDeviceCreateBindGroup := GetProcAddress(vLib, 'wgpuDeviceCreateBindGroup');
   wgpuDeviceCreateBindGroupLayout := GetProcAddress(vLib, 'wgpuDeviceCreateBindGroupLayout');
   wgpuDeviceCreateBuffer := GetProcAddress(vLib, 'wgpuDeviceCreateBuffer');
   wgpuDeviceCreateCommandEncoder := GetProcAddress(vLib, 'wgpuDeviceCreateCommandEncoder');
   wgpuDeviceCreateComputePipeline := GetProcAddress(vLib, 'wgpuDeviceCreateComputePipeline');
   wgpuDeviceCreateComputePipelineAsync := GetProcAddress(vLib, 'wgpuDeviceCreateComputePipelineAsync');
   wgpuDeviceCreateComputePipelineAsync2 := GetProcAddress(vLib, 'wgpuDeviceCreateComputePipelineAsync2');
   wgpuDeviceCreateComputePipelineAsyncF := GetProcAddress(vLib, 'wgpuDeviceCreateComputePipelineAsyncF');
   wgpuDeviceCreateErrorBuffer := GetProcAddress(vLib, 'wgpuDeviceCreateErrorBuffer');
   wgpuDeviceCreateErrorExternalTexture := GetProcAddress(vLib, 'wgpuDeviceCreateErrorExternalTexture');
   wgpuDeviceCreateErrorShaderModule := GetProcAddress(vLib, 'wgpuDeviceCreateErrorShaderModule');
   wgpuDeviceCreateErrorShaderModule2 := GetProcAddress(vLib, 'wgpuDeviceCreateErrorShaderModule2');
   wgpuDeviceCreateErrorTexture := GetProcAddress(vLib, 'wgpuDeviceCreateErrorTexture');
   wgpuDeviceCreateExternalTexture := GetProcAddress(vLib, 'wgpuDeviceCreateExternalTexture');
   wgpuDeviceCreatePipelineLayout := GetProcAddress(vLib, 'wgpuDeviceCreatePipelineLayout');
   wgpuDeviceCreateQuerySet := GetProcAddress(vLib, 'wgpuDeviceCreateQuerySet');
   wgpuDeviceCreateRenderBundleEncoder := GetProcAddress(vLib, 'wgpuDeviceCreateRenderBundleEncoder');
   wgpuDeviceCreateRenderPipeline := GetProcAddress(vLib, 'wgpuDeviceCreateRenderPipeline');
   wgpuDeviceCreateRenderPipelineAsync := GetProcAddress(vLib, 'wgpuDeviceCreateRenderPipelineAsync');
   wgpuDeviceCreateRenderPipelineAsync2 := GetProcAddress(vLib, 'wgpuDeviceCreateRenderPipelineAsync2');
   wgpuDeviceCreateRenderPipelineAsyncF := GetProcAddress(vLib, 'wgpuDeviceCreateRenderPipelineAsyncF');
   wgpuDeviceCreateSampler := GetProcAddress(vLib, 'wgpuDeviceCreateSampler');
   wgpuDeviceCreateShaderModule := GetProcAddress(vLib, 'wgpuDeviceCreateShaderModule');
   wgpuDeviceCreateSwapChain := GetProcAddress(vLib, 'wgpuDeviceCreateSwapChain');
   wgpuDeviceCreateTexture := GetProcAddress(vLib, 'wgpuDeviceCreateTexture');
   wgpuDeviceDestroy := GetProcAddress(vLib, 'wgpuDeviceDestroy');
   wgpuDeviceEnumerateFeatures := GetProcAddress(vLib, 'wgpuDeviceEnumerateFeatures');
   wgpuDeviceForceLoss := GetProcAddress(vLib, 'wgpuDeviceForceLoss');
   wgpuDeviceForceLoss2 := GetProcAddress(vLib, 'wgpuDeviceForceLoss2');
   wgpuDeviceGetAHardwareBufferProperties := GetProcAddress(vLib, 'wgpuDeviceGetAHardwareBufferProperties');
   wgpuDeviceGetAdapter := GetProcAddress(vLib, 'wgpuDeviceGetAdapter');
   wgpuDeviceGetLimits := GetProcAddress(vLib, 'wgpuDeviceGetLimits');
   wgpuDeviceGetQueue := GetProcAddress(vLib, 'wgpuDeviceGetQueue');
   wgpuDeviceGetSupportedSurfaceUsage := GetProcAddress(vLib, 'wgpuDeviceGetSupportedSurfaceUsage');
   wgpuDeviceHasFeature := GetProcAddress(vLib, 'wgpuDeviceHasFeature');
   wgpuDeviceImportSharedBufferMemory := GetProcAddress(vLib, 'wgpuDeviceImportSharedBufferMemory');
   wgpuDeviceImportSharedFence := GetProcAddress(vLib, 'wgpuDeviceImportSharedFence');
   wgpuDeviceImportSharedTextureMemory := GetProcAddress(vLib, 'wgpuDeviceImportSharedTextureMemory');
   wgpuDeviceInjectError := GetProcAddress(vLib, 'wgpuDeviceInjectError');
   wgpuDeviceInjectError2 := GetProcAddress(vLib, 'wgpuDeviceInjectError2');
   wgpuDevicePopErrorScope := GetProcAddress(vLib, 'wgpuDevicePopErrorScope');
   wgpuDevicePopErrorScope2 := GetProcAddress(vLib, 'wgpuDevicePopErrorScope2');
   wgpuDevicePopErrorScopeF := GetProcAddress(vLib, 'wgpuDevicePopErrorScopeF');
   wgpuDevicePushErrorScope := GetProcAddress(vLib, 'wgpuDevicePushErrorScope');
   wgpuDeviceSetDeviceLostCallback := GetProcAddress(vLib, 'wgpuDeviceSetDeviceLostCallback');
   wgpuDeviceSetLabel := GetProcAddress(vLib, 'wgpuDeviceSetLabel');
   wgpuDeviceSetLabel2 := GetProcAddress(vLib, 'wgpuDeviceSetLabel2');
   wgpuDeviceSetLoggingCallback := GetProcAddress(vLib, 'wgpuDeviceSetLoggingCallback');
   wgpuDeviceSetUncapturedErrorCallback := GetProcAddress(vLib, 'wgpuDeviceSetUncapturedErrorCallback');
   wgpuDeviceTick := GetProcAddress(vLib, 'wgpuDeviceTick');
   wgpuDeviceValidateTextureDescriptor := GetProcAddress(vLib, 'wgpuDeviceValidateTextureDescriptor');
   wgpuDeviceAddRef := GetProcAddress(vLib, 'wgpuDeviceAddRef');
   wgpuDeviceRelease := GetProcAddress(vLib, 'wgpuDeviceRelease');
   wgpuExternalTextureDestroy := GetProcAddress(vLib, 'wgpuExternalTextureDestroy');
   wgpuExternalTextureExpire := GetProcAddress(vLib, 'wgpuExternalTextureExpire');
   wgpuExternalTextureRefresh := GetProcAddress(vLib, 'wgpuExternalTextureRefresh');
   wgpuExternalTextureSetLabel := GetProcAddress(vLib, 'wgpuExternalTextureSetLabel');
   wgpuExternalTextureSetLabel2 := GetProcAddress(vLib, 'wgpuExternalTextureSetLabel2');
   wgpuExternalTextureAddRef := GetProcAddress(vLib, 'wgpuExternalTextureAddRef');
   wgpuExternalTextureRelease := GetProcAddress(vLib, 'wgpuExternalTextureRelease');
   wgpuInstanceCreateSurface := GetProcAddress(vLib, 'wgpuInstanceCreateSurface');
   wgpuInstanceEnumerateWGSLLanguageFeatures := GetProcAddress(vLib, 'wgpuInstanceEnumerateWGSLLanguageFeatures');
   wgpuInstanceHasWGSLLanguageFeature := GetProcAddress(vLib, 'wgpuInstanceHasWGSLLanguageFeature');
   wgpuInstanceProcessEvents := GetProcAddress(vLib, 'wgpuInstanceProcessEvents');
   wgpuInstanceRequestAdapter := GetProcAddress(vLib, 'wgpuInstanceRequestAdapter');
   wgpuInstanceRequestAdapter2 := GetProcAddress(vLib, 'wgpuInstanceRequestAdapter2');
   wgpuInstanceRequestAdapterF := GetProcAddress(vLib, 'wgpuInstanceRequestAdapterF');
   wgpuInstanceWaitAny := GetProcAddress(vLib, 'wgpuInstanceWaitAny');
   wgpuInstanceAddRef := GetProcAddress(vLib, 'wgpuInstanceAddRef');
   wgpuInstanceRelease := GetProcAddress(vLib, 'wgpuInstanceRelease');
   wgpuPipelineLayoutSetLabel := GetProcAddress(vLib, 'wgpuPipelineLayoutSetLabel');
   wgpuPipelineLayoutSetLabel2 := GetProcAddress(vLib, 'wgpuPipelineLayoutSetLabel2');
   wgpuPipelineLayoutAddRef := GetProcAddress(vLib, 'wgpuPipelineLayoutAddRef');
   wgpuPipelineLayoutRelease := GetProcAddress(vLib, 'wgpuPipelineLayoutRelease');
   wgpuQuerySetDestroy := GetProcAddress(vLib, 'wgpuQuerySetDestroy');
   wgpuQuerySetGetCount := GetProcAddress(vLib, 'wgpuQuerySetGetCount');
   wgpuQuerySetGetType := GetProcAddress(vLib, 'wgpuQuerySetGetType');
   wgpuQuerySetSetLabel := GetProcAddress(vLib, 'wgpuQuerySetSetLabel');
   wgpuQuerySetSetLabel2 := GetProcAddress(vLib, 'wgpuQuerySetSetLabel2');
   wgpuQuerySetAddRef := GetProcAddress(vLib, 'wgpuQuerySetAddRef');
   wgpuQuerySetRelease := GetProcAddress(vLib, 'wgpuQuerySetRelease');
   wgpuQueueCopyExternalTextureForBrowser := GetProcAddress(vLib, 'wgpuQueueCopyExternalTextureForBrowser');
   wgpuQueueCopyTextureForBrowser := GetProcAddress(vLib, 'wgpuQueueCopyTextureForBrowser');
   wgpuQueueOnSubmittedWorkDone := GetProcAddress(vLib, 'wgpuQueueOnSubmittedWorkDone');
   wgpuQueueOnSubmittedWorkDone2 := GetProcAddress(vLib, 'wgpuQueueOnSubmittedWorkDone2');
   wgpuQueueOnSubmittedWorkDoneF := GetProcAddress(vLib, 'wgpuQueueOnSubmittedWorkDoneF');
   wgpuQueueSetLabel := GetProcAddress(vLib, 'wgpuQueueSetLabel');
   wgpuQueueSetLabel2 := GetProcAddress(vLib, 'wgpuQueueSetLabel2');
   wgpuQueueSubmit := GetProcAddress(vLib, 'wgpuQueueSubmit');
   wgpuQueueWriteBuffer := GetProcAddress(vLib, 'wgpuQueueWriteBuffer');
   wgpuQueueWriteTexture := GetProcAddress(vLib, 'wgpuQueueWriteTexture');
   wgpuQueueAddRef := GetProcAddress(vLib, 'wgpuQueueAddRef');
   wgpuQueueRelease := GetProcAddress(vLib, 'wgpuQueueRelease');
   wgpuRenderBundleSetLabel := GetProcAddress(vLib, 'wgpuRenderBundleSetLabel');
   wgpuRenderBundleSetLabel2 := GetProcAddress(vLib, 'wgpuRenderBundleSetLabel2');
   wgpuRenderBundleAddRef := GetProcAddress(vLib, 'wgpuRenderBundleAddRef');
   wgpuRenderBundleRelease := GetProcAddress(vLib, 'wgpuRenderBundleRelease');
   wgpuRenderBundleEncoderDraw := GetProcAddress(vLib, 'wgpuRenderBundleEncoderDraw');
   wgpuRenderBundleEncoderDrawIndexed := GetProcAddress(vLib, 'wgpuRenderBundleEncoderDrawIndexed');
   wgpuRenderBundleEncoderDrawIndexedIndirect := GetProcAddress(vLib, 'wgpuRenderBundleEncoderDrawIndexedIndirect');
   wgpuRenderBundleEncoderDrawIndirect := GetProcAddress(vLib, 'wgpuRenderBundleEncoderDrawIndirect');
   wgpuRenderBundleEncoderFinish := GetProcAddress(vLib, 'wgpuRenderBundleEncoderFinish');
   wgpuRenderBundleEncoderInsertDebugMarker := GetProcAddress(vLib, 'wgpuRenderBundleEncoderInsertDebugMarker');
   wgpuRenderBundleEncoderInsertDebugMarker2 := GetProcAddress(vLib, 'wgpuRenderBundleEncoderInsertDebugMarker2');
   wgpuRenderBundleEncoderPopDebugGroup := GetProcAddress(vLib, 'wgpuRenderBundleEncoderPopDebugGroup');
   wgpuRenderBundleEncoderPushDebugGroup := GetProcAddress(vLib, 'wgpuRenderBundleEncoderPushDebugGroup');
   wgpuRenderBundleEncoderPushDebugGroup2 := GetProcAddress(vLib, 'wgpuRenderBundleEncoderPushDebugGroup2');
   wgpuRenderBundleEncoderSetBindGroup := GetProcAddress(vLib, 'wgpuRenderBundleEncoderSetBindGroup');
   wgpuRenderBundleEncoderSetIndexBuffer := GetProcAddress(vLib, 'wgpuRenderBundleEncoderSetIndexBuffer');
   wgpuRenderBundleEncoderSetLabel := GetProcAddress(vLib, 'wgpuRenderBundleEncoderSetLabel');
   wgpuRenderBundleEncoderSetLabel2 := GetProcAddress(vLib, 'wgpuRenderBundleEncoderSetLabel2');
   wgpuRenderBundleEncoderSetPipeline := GetProcAddress(vLib, 'wgpuRenderBundleEncoderSetPipeline');
   wgpuRenderBundleEncoderSetVertexBuffer := GetProcAddress(vLib, 'wgpuRenderBundleEncoderSetVertexBuffer');
   wgpuRenderBundleEncoderAddRef := GetProcAddress(vLib, 'wgpuRenderBundleEncoderAddRef');
   wgpuRenderBundleEncoderRelease := GetProcAddress(vLib, 'wgpuRenderBundleEncoderRelease');
   wgpuRenderPassEncoderBeginOcclusionQuery := GetProcAddress(vLib, 'wgpuRenderPassEncoderBeginOcclusionQuery');
   wgpuRenderPassEncoderDraw := GetProcAddress(vLib, 'wgpuRenderPassEncoderDraw');
   wgpuRenderPassEncoderDrawIndexed := GetProcAddress(vLib, 'wgpuRenderPassEncoderDrawIndexed');
   wgpuRenderPassEncoderDrawIndexedIndirect := GetProcAddress(vLib, 'wgpuRenderPassEncoderDrawIndexedIndirect');
   wgpuRenderPassEncoderDrawIndirect := GetProcAddress(vLib, 'wgpuRenderPassEncoderDrawIndirect');
   wgpuRenderPassEncoderEnd := GetProcAddress(vLib, 'wgpuRenderPassEncoderEnd');
   wgpuRenderPassEncoderEndOcclusionQuery := GetProcAddress(vLib, 'wgpuRenderPassEncoderEndOcclusionQuery');
   wgpuRenderPassEncoderExecuteBundles := GetProcAddress(vLib, 'wgpuRenderPassEncoderExecuteBundles');
   wgpuRenderPassEncoderInsertDebugMarker := GetProcAddress(vLib, 'wgpuRenderPassEncoderInsertDebugMarker');
   wgpuRenderPassEncoderInsertDebugMarker2 := GetProcAddress(vLib, 'wgpuRenderPassEncoderInsertDebugMarker2');
   wgpuRenderPassEncoderMultiDrawIndexedIndirect := GetProcAddress(vLib, 'wgpuRenderPassEncoderMultiDrawIndexedIndirect');
   wgpuRenderPassEncoderMultiDrawIndirect := GetProcAddress(vLib, 'wgpuRenderPassEncoderMultiDrawIndirect');
   wgpuRenderPassEncoderPixelLocalStorageBarrier := GetProcAddress(vLib, 'wgpuRenderPassEncoderPixelLocalStorageBarrier');
   wgpuRenderPassEncoderPopDebugGroup := GetProcAddress(vLib, 'wgpuRenderPassEncoderPopDebugGroup');
   wgpuRenderPassEncoderPushDebugGroup := GetProcAddress(vLib, 'wgpuRenderPassEncoderPushDebugGroup');
   wgpuRenderPassEncoderPushDebugGroup2 := GetProcAddress(vLib, 'wgpuRenderPassEncoderPushDebugGroup2');
   wgpuRenderPassEncoderSetBindGroup := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetBindGroup');
   wgpuRenderPassEncoderSetBlendConstant := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetBlendConstant');
   wgpuRenderPassEncoderSetIndexBuffer := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetIndexBuffer');
   wgpuRenderPassEncoderSetLabel := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetLabel');
   wgpuRenderPassEncoderSetLabel2 := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetLabel2');
   wgpuRenderPassEncoderSetPipeline := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetPipeline');
   wgpuRenderPassEncoderSetScissorRect := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetScissorRect');
   wgpuRenderPassEncoderSetStencilReference := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetStencilReference');
   wgpuRenderPassEncoderSetVertexBuffer := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetVertexBuffer');
   wgpuRenderPassEncoderSetViewport := GetProcAddress(vLib, 'wgpuRenderPassEncoderSetViewport');
   wgpuRenderPassEncoderWriteTimestamp := GetProcAddress(vLib, 'wgpuRenderPassEncoderWriteTimestamp');
   wgpuRenderPassEncoderAddRef := GetProcAddress(vLib, 'wgpuRenderPassEncoderAddRef');
   wgpuRenderPassEncoderRelease := GetProcAddress(vLib, 'wgpuRenderPassEncoderRelease');
   wgpuRenderPipelineGetBindGroupLayout := GetProcAddress(vLib, 'wgpuRenderPipelineGetBindGroupLayout');
   wgpuRenderPipelineSetLabel := GetProcAddress(vLib, 'wgpuRenderPipelineSetLabel');
   wgpuRenderPipelineSetLabel2 := GetProcAddress(vLib, 'wgpuRenderPipelineSetLabel2');
   wgpuRenderPipelineAddRef := GetProcAddress(vLib, 'wgpuRenderPipelineAddRef');
   wgpuRenderPipelineRelease := GetProcAddress(vLib, 'wgpuRenderPipelineRelease');
   wgpuSamplerSetLabel := GetProcAddress(vLib, 'wgpuSamplerSetLabel');
   wgpuSamplerSetLabel2 := GetProcAddress(vLib, 'wgpuSamplerSetLabel2');
   wgpuSamplerAddRef := GetProcAddress(vLib, 'wgpuSamplerAddRef');
   wgpuSamplerRelease := GetProcAddress(vLib, 'wgpuSamplerRelease');
   wgpuShaderModuleGetCompilationInfo := GetProcAddress(vLib, 'wgpuShaderModuleGetCompilationInfo');
   wgpuShaderModuleGetCompilationInfo2 := GetProcAddress(vLib, 'wgpuShaderModuleGetCompilationInfo2');
   wgpuShaderModuleGetCompilationInfoF := GetProcAddress(vLib, 'wgpuShaderModuleGetCompilationInfoF');
   wgpuShaderModuleSetLabel := GetProcAddress(vLib, 'wgpuShaderModuleSetLabel');
   wgpuShaderModuleSetLabel2 := GetProcAddress(vLib, 'wgpuShaderModuleSetLabel2');
   wgpuShaderModuleAddRef := GetProcAddress(vLib, 'wgpuShaderModuleAddRef');
   wgpuShaderModuleRelease := GetProcAddress(vLib, 'wgpuShaderModuleRelease');
   wgpuSharedBufferMemoryBeginAccess := GetProcAddress(vLib, 'wgpuSharedBufferMemoryBeginAccess');
   wgpuSharedBufferMemoryCreateBuffer := GetProcAddress(vLib, 'wgpuSharedBufferMemoryCreateBuffer');
   wgpuSharedBufferMemoryEndAccess := GetProcAddress(vLib, 'wgpuSharedBufferMemoryEndAccess');
   wgpuSharedBufferMemoryGetProperties := GetProcAddress(vLib, 'wgpuSharedBufferMemoryGetProperties');
   wgpuSharedBufferMemoryIsDeviceLost := GetProcAddress(vLib, 'wgpuSharedBufferMemoryIsDeviceLost');
   wgpuSharedBufferMemorySetLabel := GetProcAddress(vLib, 'wgpuSharedBufferMemorySetLabel');
   wgpuSharedBufferMemorySetLabel2 := GetProcAddress(vLib, 'wgpuSharedBufferMemorySetLabel2');
   wgpuSharedBufferMemoryAddRef := GetProcAddress(vLib, 'wgpuSharedBufferMemoryAddRef');
   wgpuSharedBufferMemoryRelease := GetProcAddress(vLib, 'wgpuSharedBufferMemoryRelease');
   wgpuSharedFenceExportInfo := GetProcAddress(vLib, 'wgpuSharedFenceExportInfo');
   wgpuSharedFenceAddRef := GetProcAddress(vLib, 'wgpuSharedFenceAddRef');
   wgpuSharedFenceRelease := GetProcAddress(vLib, 'wgpuSharedFenceRelease');
   wgpuSharedTextureMemoryBeginAccess := GetProcAddress(vLib, 'wgpuSharedTextureMemoryBeginAccess');
   wgpuSharedTextureMemoryCreateTexture := GetProcAddress(vLib, 'wgpuSharedTextureMemoryCreateTexture');
   wgpuSharedTextureMemoryEndAccess := GetProcAddress(vLib, 'wgpuSharedTextureMemoryEndAccess');
   wgpuSharedTextureMemoryGetProperties := GetProcAddress(vLib, 'wgpuSharedTextureMemoryGetProperties');
   wgpuSharedTextureMemoryIsDeviceLost := GetProcAddress(vLib, 'wgpuSharedTextureMemoryIsDeviceLost');
   wgpuSharedTextureMemorySetLabel := GetProcAddress(vLib, 'wgpuSharedTextureMemorySetLabel');
   wgpuSharedTextureMemorySetLabel2 := GetProcAddress(vLib, 'wgpuSharedTextureMemorySetLabel2');
   wgpuSharedTextureMemoryAddRef := GetProcAddress(vLib, 'wgpuSharedTextureMemoryAddRef');
   wgpuSharedTextureMemoryRelease := GetProcAddress(vLib, 'wgpuSharedTextureMemoryRelease');
   wgpuSurfaceConfigure := GetProcAddress(vLib, 'wgpuSurfaceConfigure');
   wgpuSurfaceGetCapabilities := GetProcAddress(vLib, 'wgpuSurfaceGetCapabilities');
   wgpuSurfaceGetCurrentTexture := GetProcAddress(vLib, 'wgpuSurfaceGetCurrentTexture');
   wgpuSurfaceGetPreferredFormat := GetProcAddress(vLib, 'wgpuSurfaceGetPreferredFormat');
   wgpuSurfacePresent := GetProcAddress(vLib, 'wgpuSurfacePresent');
   wgpuSurfaceSetLabel := GetProcAddress(vLib, 'wgpuSurfaceSetLabel');
   wgpuSurfaceSetLabel2 := GetProcAddress(vLib, 'wgpuSurfaceSetLabel2');
   wgpuSurfaceUnconfigure := GetProcAddress(vLib, 'wgpuSurfaceUnconfigure');
   wgpuSurfaceAddRef := GetProcAddress(vLib, 'wgpuSurfaceAddRef');
   wgpuSurfaceRelease := GetProcAddress(vLib, 'wgpuSurfaceRelease');
   wgpuSwapChainGetCurrentTexture := GetProcAddress(vLib, 'wgpuSwapChainGetCurrentTexture');
   wgpuSwapChainGetCurrentTextureView := GetProcAddress(vLib, 'wgpuSwapChainGetCurrentTextureView');
   wgpuSwapChainPresent := GetProcAddress(vLib, 'wgpuSwapChainPresent');
   wgpuSwapChainAddRef := GetProcAddress(vLib, 'wgpuSwapChainAddRef');
   wgpuSwapChainRelease := GetProcAddress(vLib, 'wgpuSwapChainRelease');
   wgpuTextureCreateErrorView := GetProcAddress(vLib, 'wgpuTextureCreateErrorView');
   wgpuTextureCreateView := GetProcAddress(vLib, 'wgpuTextureCreateView');
   wgpuTextureDestroy := GetProcAddress(vLib, 'wgpuTextureDestroy');
   wgpuTextureGetDepthOrArrayLayers := GetProcAddress(vLib, 'wgpuTextureGetDepthOrArrayLayers');
   wgpuTextureGetDimension := GetProcAddress(vLib, 'wgpuTextureGetDimension');
   wgpuTextureGetFormat := GetProcAddress(vLib, 'wgpuTextureGetFormat');
   wgpuTextureGetHeight := GetProcAddress(vLib, 'wgpuTextureGetHeight');
   wgpuTextureGetMipLevelCount := GetProcAddress(vLib, 'wgpuTextureGetMipLevelCount');
   wgpuTextureGetSampleCount := GetProcAddress(vLib, 'wgpuTextureGetSampleCount');
   wgpuTextureGetUsage := GetProcAddress(vLib, 'wgpuTextureGetUsage');
   wgpuTextureGetWidth := GetProcAddress(vLib, 'wgpuTextureGetWidth');
   wgpuTextureSetLabel := GetProcAddress(vLib, 'wgpuTextureSetLabel');
   wgpuTextureSetLabel2 := GetProcAddress(vLib, 'wgpuTextureSetLabel2');
   wgpuTextureAddRef := GetProcAddress(vLib, 'wgpuTextureAddRef');
   wgpuTextureRelease := GetProcAddress(vLib, 'wgpuTextureRelease');
   wgpuTextureViewSetLabel := GetProcAddress(vLib, 'wgpuTextureViewSetLabel');
   wgpuTextureViewSetLabel2 := GetProcAddress(vLib, 'wgpuTextureViewSetLabel2');
   wgpuTextureViewAddRef := GetProcAddress(vLib, 'wgpuTextureViewAddRef');
   wgpuTextureViewRelease := GetProcAddress(vLib, 'wgpuTextureViewRelease');
end;

end.
